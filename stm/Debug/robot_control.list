
robot_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055f0  080055f0  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080055f0  080055f0  000065f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f8  080055f8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f8  080055f8  000065f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055fc  080055fc  000065fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005600  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a8  20000068  08005668  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08005668  00007310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000103ed  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f8  00000000  00000000  00017485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00019780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c1e  00000000  00000000  0001a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e28  00000000  00000000  0001b336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e4a  00000000  00000000  0003d15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb63d  00000000  00000000  0004efa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a5e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  0011a628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005544 	.word	0x08005544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005544 	.word	0x08005544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fc8d 	bl	8000ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f834 	bl	8000610 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f97c 	bl	80008a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f94a 	bl	8000844 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80005b0:	f000 f890 	bl	80006d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80005b4:	2100      	movs	r1, #0
 80005b6:	4812      	ldr	r0, [pc, #72]	@ (8000600 <main+0x64>)
 80005b8:	f002 f9de 	bl	8002978 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005bc:	2104      	movs	r1, #4
 80005be:	4810      	ldr	r0, [pc, #64]	@ (8000600 <main+0x64>)
 80005c0:	f002 f9da 	bl	8002978 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, rx_buffer, RX_BUFFER_SIZE);
 80005c4:	2264      	movs	r2, #100	@ 0x64
 80005c6:	490f      	ldr	r1, [pc, #60]	@ (8000604 <main+0x68>)
 80005c8:	480f      	ldr	r0, [pc, #60]	@ (8000608 <main+0x6c>)
 80005ca:	f003 f96b 	bl	80038a4 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    Motor_SetSpeedLeft(500);
 80005ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005d2:	f000 fa61 	bl	8000a98 <Motor_SetSpeedLeft>
    Motor_SetSpeedRight(500);
 80005d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005da:	f000 fa6d 	bl	8000ab8 <Motor_SetSpeedRight>
	HAL_Delay(5000);
 80005de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005e2:	f000 fce1 	bl	8000fa8 <HAL_Delay>
    Motor_SetSpeedLeft(-500);
 80005e6:	4809      	ldr	r0, [pc, #36]	@ (800060c <main+0x70>)
 80005e8:	f000 fa56 	bl	8000a98 <Motor_SetSpeedLeft>
    Motor_SetSpeedRight(-500);
 80005ec:	4807      	ldr	r0, [pc, #28]	@ (800060c <main+0x70>)
 80005ee:	f000 fa63 	bl	8000ab8 <Motor_SetSpeedRight>
	HAL_Delay(5000);
 80005f2:	f241 3088 	movw	r0, #5000	@ 0x1388
 80005f6:	f000 fcd7 	bl	8000fa8 <HAL_Delay>
    Motor_SetSpeedLeft(500);
 80005fa:	bf00      	nop
 80005fc:	e7e7      	b.n	80005ce <main+0x32>
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	20000158 	.word	0x20000158
 8000608:	200000d0 	.word	0x200000d0
 800060c:	fffffe0c 	.word	0xfffffe0c

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	@ 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	@ 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f004 f979 	bl	8004916 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000636:	f000 ff61 	bl	80014fc <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 f9b4 	bl	80009ac <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f000 ff3c 	bl	80014c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <SystemClock_Config+0xc0>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800064e:	4a20      	ldr	r2, [pc, #128]	@ (80006d0 <SystemClock_Config+0xc0>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000658:	2314      	movs	r3, #20
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000668:	2360      	movs	r3, #96	@ 0x60
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000674:	2301      	movs	r3, #1
 8000676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000678:	2328      	movs	r3, #40	@ 0x28
 800067a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800067c:	2307      	movs	r3, #7
 800067e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4618      	mov	r0, r3
 800068e:	f000 ff8b 	bl	80015a8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000698:	f000 f988 	bl	80009ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2104      	movs	r1, #4
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fb8b 	bl	8001dd0 <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c0:	f000 f974 	bl	80009ac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c4:	f001 ff9e 	bl	8002604 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	@ 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b09a      	sub	sp, #104	@ 0x68
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
 8000704:	615a      	str	r2, [r3, #20]
 8000706:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000708:	1d3b      	adds	r3, r7, #4
 800070a:	222c      	movs	r2, #44	@ 0x2c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f004 f901 	bl	8004916 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000714:	4b49      	ldr	r3, [pc, #292]	@ (800083c <MX_TIM1_Init+0x168>)
 8000716:	4a4a      	ldr	r2, [pc, #296]	@ (8000840 <MX_TIM1_Init+0x16c>)
 8000718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800071a:	4b48      	ldr	r3, [pc, #288]	@ (800083c <MX_TIM1_Init+0x168>)
 800071c:	224f      	movs	r2, #79	@ 0x4f
 800071e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000720:	4b46      	ldr	r3, [pc, #280]	@ (800083c <MX_TIM1_Init+0x168>)
 8000722:	2200      	movs	r2, #0
 8000724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000726:	4b45      	ldr	r3, [pc, #276]	@ (800083c <MX_TIM1_Init+0x168>)
 8000728:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800072c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800072e:	4b43      	ldr	r3, [pc, #268]	@ (800083c <MX_TIM1_Init+0x168>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000734:	4b41      	ldr	r3, [pc, #260]	@ (800083c <MX_TIM1_Init+0x168>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073a:	4b40      	ldr	r3, [pc, #256]	@ (800083c <MX_TIM1_Init+0x168>)
 800073c:	2280      	movs	r2, #128	@ 0x80
 800073e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000740:	483e      	ldr	r0, [pc, #248]	@ (800083c <MX_TIM1_Init+0x168>)
 8000742:	f002 f861 	bl	8002808 <HAL_TIM_Base_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800074c:	f000 f92e 	bl	80009ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000750:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000754:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000756:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800075a:	4619      	mov	r1, r3
 800075c:	4837      	ldr	r0, [pc, #220]	@ (800083c <MX_TIM1_Init+0x168>)
 800075e:	f002 fafd 	bl	8002d5c <HAL_TIM_ConfigClockSource>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000768:	f000 f920 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076c:	4833      	ldr	r0, [pc, #204]	@ (800083c <MX_TIM1_Init+0x168>)
 800076e:	f002 f8a2 	bl	80028b6 <HAL_TIM_PWM_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000778:	f000 f918 	bl	80009ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000788:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800078c:	4619      	mov	r1, r3
 800078e:	482b      	ldr	r0, [pc, #172]	@ (800083c <MX_TIM1_Init+0x168>)
 8000790:	f002 ff5c 	bl	800364c <HAL_TIMEx_MasterConfigSynchronization>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800079a:	f000 f907 	bl	80009ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079e:	2360      	movs	r3, #96	@ 0x60
 80007a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007ae:	2300      	movs	r3, #0
 80007b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b6:	2300      	movs	r3, #0
 80007b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007be:	2200      	movs	r2, #0
 80007c0:	4619      	mov	r1, r3
 80007c2:	481e      	ldr	r0, [pc, #120]	@ (800083c <MX_TIM1_Init+0x168>)
 80007c4:	f002 f9b6 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007ce:	f000 f8ed 	bl	80009ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007d6:	2204      	movs	r2, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4818      	ldr	r0, [pc, #96]	@ (800083c <MX_TIM1_Init+0x168>)
 80007dc:	f002 f9aa 	bl	8002b34 <HAL_TIM_PWM_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007e6:	f000 f8e1 	bl	80009ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000802:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800080c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	@ (800083c <MX_TIM1_Init+0x168>)
 8000820:	f002 ff7a 	bl	8003718 <HAL_TIMEx_ConfigBreakDeadTime>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800082a:	f000 f8bf 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082e:	4803      	ldr	r0, [pc, #12]	@ (800083c <MX_TIM1_Init+0x168>)
 8000830:	f000 f996 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3768      	adds	r7, #104	@ 0x68
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000084 	.word	0x20000084
 8000840:	40012c00 	.word	0x40012c00

08000844 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800084a:	4a15      	ldr	r2, [pc, #84]	@ (80008a0 <MX_USART2_UART_Init+0x5c>)
 800084c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084e:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000854:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000856:	4b11      	ldr	r3, [pc, #68]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800085c:	4b0f      	ldr	r3, [pc, #60]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000862:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000868:	4b0c      	ldr	r3, [pc, #48]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800086a:	220c      	movs	r2, #12
 800086c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000874:	4b09      	ldr	r3, [pc, #36]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <MX_USART2_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	@ (800089c <MX_USART2_UART_Init+0x58>)
 8000888:	f002 ffbe 	bl	8003808 <HAL_UART_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f88b 	bl	80009ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000d0 	.word	0x200000d0
 80008a0:	40004400 	.word	0x40004400

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
 80008b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	4b28      	ldr	r3, [pc, #160]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008be:	4a27      	ldr	r2, [pc, #156]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008c6:	4b25      	ldr	r3, [pc, #148]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	4b22      	ldr	r3, [pc, #136]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d6:	4a21      	ldr	r2, [pc, #132]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008de:	4b1f      	ldr	r3, [pc, #124]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	4b1c      	ldr	r3, [pc, #112]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ee:	4a1b      	ldr	r2, [pc, #108]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008f0:	f043 0302 	orr.w	r3, r3, #2
 80008f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008f6:	4b19      	ldr	r3, [pc, #100]	@ (800095c <MX_GPIO_Init+0xb8>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	603b      	str	r3, [r7, #0]
 8000900:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2130      	movs	r1, #48	@ 0x30
 8000906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090a:	f000 fdc1 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	4813      	ldr	r0, [pc, #76]	@ (8000960 <MX_GPIO_Init+0xbc>)
 8000914:	f000 fdbc 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000918:	2330      	movs	r3, #48	@ 0x30
 800091a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091c:	2301      	movs	r3, #1
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 030c 	add.w	r3, r7, #12
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000932:	f000 fc43 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000936:	2308      	movs	r3, #8
 8000938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	2301      	movs	r3, #1
 800093c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	4619      	mov	r1, r3
 800094c:	4804      	ldr	r0, [pc, #16]	@ (8000960 <MX_GPIO_Init+0xbc>)
 800094e:	f000 fc35 	bl	80011bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	48000400 	.word	0x48000400

08000964 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <HAL_UART_RxCpltCallback+0x38>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10e      	bne.n	8000994 <HAL_UART_RxCpltCallback+0x30>
    {
        // Null-terminate the received data
        rx_buffer[rx_buffer[0]] = '\0';
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_UART_RxCpltCallback+0x3c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <HAL_UART_RxCpltCallback+0x3c>)
 800097e:	2100      	movs	r1, #0
 8000980:	5499      	strb	r1, [r3, r2]

        // Print the received data (For Debugging)
        printf("[Received from Pi]: %s\n", rx_buffer);
 8000982:	4907      	ldr	r1, [pc, #28]	@ (80009a0 <HAL_UART_RxCpltCallback+0x3c>)
 8000984:	4807      	ldr	r0, [pc, #28]	@ (80009a4 <HAL_UART_RxCpltCallback+0x40>)
 8000986:	f003 ff71 	bl	800486c <iprintf>

        // Restart UART receive in interrupt mode
        HAL_UART_Receive_IT(&huart2, rx_buffer, RX_BUFFER_SIZE);
 800098a:	2264      	movs	r2, #100	@ 0x64
 800098c:	4904      	ldr	r1, [pc, #16]	@ (80009a0 <HAL_UART_RxCpltCallback+0x3c>)
 800098e:	4806      	ldr	r0, [pc, #24]	@ (80009a8 <HAL_UART_RxCpltCallback+0x44>)
 8000990:	f002 ff88 	bl	80038a4 <HAL_UART_Receive_IT>
    }
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	20000158 	.word	0x20000158
 80009a4:	0800555c 	.word	0x0800555c
 80009a8:	200000d0 	.word	0x200000d0

080009ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b0:	b672      	cpsid	i
}
 80009b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <Error_Handler+0x8>

080009b8 <setSpeed>:
 */

#include "motor_control.h"

void setSpeed(int16_t speed, uint16_t in_a_pin, uint16_t in_b_pin, uint32_t tim_channel)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4603      	mov	r3, r0
 80009c2:	81fb      	strh	r3, [r7, #14]
 80009c4:	460b      	mov	r3, r1
 80009c6:	81bb      	strh	r3, [r7, #12]
 80009c8:	4613      	mov	r3, r2
 80009ca:	817b      	strh	r3, [r7, #10]
    if (speed >= 0) {
 80009cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db0e      	blt.n	80009f2 <setSpeed+0x3a>
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, in_a_pin, GPIO_PIN_SET);
 80009d4:	89bb      	ldrh	r3, [r7, #12]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f000 fd57 	bl	8001490 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, in_b_pin, GPIO_PIN_RESET);
 80009e2:	897b      	ldrh	r3, [r7, #10]
 80009e4:	2200      	movs	r2, #0
 80009e6:	4619      	mov	r1, r3
 80009e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ec:	f000 fd50 	bl	8001490 <HAL_GPIO_WritePin>
 80009f0:	e011      	b.n	8000a16 <setSpeed+0x5e>
    } else {
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, in_a_pin, GPIO_PIN_RESET);
 80009f2:	89bb      	ldrh	r3, [r7, #12]
 80009f4:	2200      	movs	r2, #0
 80009f6:	4619      	mov	r1, r3
 80009f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fc:	f000 fd48 	bl	8001490 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, in_b_pin, GPIO_PIN_SET);
 8000a00:	897b      	ldrh	r3, [r7, #10]
 8000a02:	2201      	movs	r2, #1
 8000a04:	4619      	mov	r1, r3
 8000a06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a0a:	f000 fd41 	bl	8001490 <HAL_GPIO_WritePin>
        speed = -speed;
 8000a0e:	89fb      	ldrh	r3, [r7, #14]
 8000a10:	425b      	negs	r3, r3
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	81fb      	strh	r3, [r7, #14]
    }

    if (speed > 1000) { speed = 1000; }
 8000a16:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a1a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a1e:	dd02      	ble.n	8000a26 <setSpeed+0x6e>
 8000a20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a24:	81fb      	strh	r3, [r7, #14]

    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d105      	bne.n	8000a38 <setSpeed+0x80>
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <setSpeed+0xdc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34

}
 8000a36:	e028      	b.n	8000a8a <setSpeed+0xd2>
    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	d105      	bne.n	8000a4a <setSpeed+0x92>
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <setSpeed+0xdc>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a46:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a48:	e01f      	b.n	8000a8a <setSpeed+0xd2>
    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b08      	cmp	r3, #8
 8000a4e:	d105      	bne.n	8000a5c <setSpeed+0xa4>
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <setSpeed+0xdc>)
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a58:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8000a5a:	e016      	b.n	8000a8a <setSpeed+0xd2>
    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0c      	cmp	r3, #12
 8000a60:	d105      	bne.n	8000a6e <setSpeed+0xb6>
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <setSpeed+0xdc>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a6a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a6c:	e00d      	b.n	8000a8a <setSpeed+0xd2>
    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2b10      	cmp	r3, #16
 8000a72:	d105      	bne.n	8000a80 <setSpeed+0xc8>
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <setSpeed+0xdc>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a7c:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8000a7e:	e004      	b.n	8000a8a <setSpeed+0xd2>
    __HAL_TIM_SET_COMPARE(&htim1, tim_channel, speed);
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <setSpeed+0xdc>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a88:	65d3      	str	r3, [r2, #92]	@ 0x5c
}
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000084 	.word	0x20000084

08000a98 <Motor_SetSpeedLeft>:

void Motor_SetSpeedLeft(int16_t speed)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	80fb      	strh	r3, [r7, #6]
	setSpeed(speed, MOTOR_LEFT_IN1_PIN, MOTOR_LEFT_IN2_PIN, TIM_CHANNEL_1);
 8000aa2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	2110      	movs	r1, #16
 8000aac:	f7ff ff84 	bl	80009b8 <setSpeed>
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <Motor_SetSpeedRight>:

void Motor_SetSpeedRight(int16_t speed)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	80fb      	strh	r3, [r7, #6]
	setSpeed(speed, MOTOR_RIGHT_IN3_PIN, MOTOR_RIGHT_IN4_PIN, TIM_CHANNEL_2);
 8000ac2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	2280      	movs	r2, #128	@ 0x80
 8000aca:	2140      	movs	r1, #64	@ 0x40
 8000acc:	f7ff ff74 	bl	80009b8 <setSpeed>
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <HAL_TIM_Base_MspInit+0x38>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d10b      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b36:	4a09      	ldr	r2, [pc, #36]	@ (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b38:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40012c00 	.word	0x40012c00
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <HAL_TIM_MspPostInit+0x68>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d11d      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	4a11      	ldr	r2, [pc, #68]	@ (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b8e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bcc <HAL_TIM_MspPostInit+0x6c>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bba:	f000 faff 	bl	80011bc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000bbe:	bf00      	nop
 8000bc0:	3720      	adds	r7, #32
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b09e      	sub	sp, #120	@ 0x78
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be8:	f107 0310 	add.w	r3, r7, #16
 8000bec:	2254      	movs	r2, #84	@ 0x54
 8000bee:	2100      	movs	r1, #0
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fe90 	bl	8004916 <memset>
  if(huart->Instance==USART2)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a28      	ldr	r2, [pc, #160]	@ (8000c9c <HAL_UART_MspInit+0xcc>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d148      	bne.n	8000c92 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fb03 	bl	8002218 <HAL_RCCEx_PeriphCLKConfig>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c18:	f7ff fec8 	bl	80009ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c26:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c38:	4a19      	ldr	r2, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c3a:	f043 0301 	orr.w	r3, r3, #1
 8000c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_UART_MspInit+0xd0>)
 8000c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c5c:	2307      	movs	r3, #7
 8000c5e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f000 faa7 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c80:	2303      	movs	r3, #3
 8000c82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c8e:	f000 fa95 	bl	80011bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c92:	bf00      	nop
 8000c94:	3778      	adds	r7, #120	@ 0x78
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ca8:	bf00      	nop
 8000caa:	e7fd      	b.n	8000ca8 <NMI_Handler+0x4>

08000cac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <BusFault_Handler+0x4>

08000cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <UsageFault_Handler+0x4>

08000ccc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cfa:	f000 f935 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	60f8      	str	r0, [r7, #12]
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e00a      	b.n	8000d2a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d14:	f3af 8000 	nop.w
 8000d18:	4601      	mov	r1, r0
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1c5a      	adds	r2, r3, #1
 8000d1e:	60ba      	str	r2, [r7, #8]
 8000d20:	b2ca      	uxtb	r2, r1
 8000d22:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	3301      	adds	r3, #1
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	dbf0      	blt.n	8000d14 <_read+0x12>
  }

  return len;
 8000d32:	687b      	ldr	r3, [r7, #4]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	e009      	b.n	8000d62 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	60ba      	str	r2, [r7, #8]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	dbf1      	blt.n	8000d4e <_write+0x12>
  }
  return len;
 8000d6a:	687b      	ldr	r3, [r7, #4]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <_close>:

int _close(int file)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d9c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d9e:	2300      	movs	r3, #0
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <_isatty>:

int _isatty(int file)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000db4:	2301      	movs	r3, #1
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr

08000dc2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b085      	sub	sp, #20
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	60f8      	str	r0, [r7, #12]
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dce:	2300      	movs	r3, #0
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	@ (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	@ (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	@ (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	@ (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fdd2 	bl	80049b4 <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000c000 	.word	0x2000c000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	200001bc 	.word	0x200001bc
 8000e44:	20000310 	.word	0x20000310

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	@ (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	@ (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	@ (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 fd91 	bl	80049c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fb7d 	bl	800059c <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000eb0:	08005600 	.word	0x08005600
  ldr r2, =_sbss
 8000eb4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb8:	20000310 	.word	0x20000310

08000ebc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_IRQHandler>

08000ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f943 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 f80e 	bl	8000ef0 <HAL_InitTick>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d002      	beq.n	8000ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	71fb      	strb	r3, [r7, #7]
 8000ede:	e001      	b.n	8000ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ee0:	f7ff fdfa 	bl	8000ad8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000efc:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <HAL_InitTick+0x6c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d023      	beq.n	8000f4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f04:	4b16      	ldr	r3, [pc, #88]	@ (8000f60 <HAL_InitTick+0x70>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_InitTick+0x6c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f941 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10f      	bne.n	8000f46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b0f      	cmp	r3, #15
 8000f2a:	d809      	bhi.n	8000f40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	6879      	ldr	r1, [r7, #4]
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	f000 f919 	bl	800116a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f38:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <HAL_InitTick+0x74>)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e007      	b.n	8000f50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	e004      	b.n	8000f50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e001      	b.n	8000f50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000000 	.word	0x20000000
 8000f64:	20000004 	.word	0x20000004

08000f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008
 8000f8c:	200001c0 	.word	0x200001c0

08000f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200001c0 	.word	0x200001c0

08000fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb0:	f7ff ffee 	bl	8000f90 <HAL_GetTick>
 8000fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc0:	d005      	beq.n	8000fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000fec <HAL_Delay+0x44>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	4413      	add	r3, r2
 8000fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fce:	bf00      	nop
 8000fd0:	f7ff ffde 	bl	8000f90 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	68fa      	ldr	r2, [r7, #12]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d8f7      	bhi.n	8000fd0 <HAL_Delay+0x28>
  {
  }
}
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000008 	.word	0x20000008

08000ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001006:	68ba      	ldr	r2, [r7, #8]
 8001008:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800100c:	4013      	ands	r3, r2
 800100e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001018:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800101c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001022:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <__NVIC_SetPriorityGrouping+0x44>)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	60d3      	str	r3, [r2, #12]
}
 8001028:	bf00      	nop
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <__NVIC_GetPriorityGrouping+0x18>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	0a1b      	lsrs	r3, r3, #8
 8001042:	f003 0307 	and.w	r3, r3, #7
}
 8001046:	4618      	mov	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	@ (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	@ (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	@ 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	@ 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	@ (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff47 	bl	8000ff0 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff5c 	bl	8001038 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffb0 	bl	8001110 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b087      	sub	sp, #28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	e148      	b.n	800145e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	2101      	movs	r1, #1
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	fa01 f303 	lsl.w	r3, r1, r3
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	f000 813a 	beq.w	8001458 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <HAL_GPIO_Init+0x40>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d130      	bne.n	800125e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68da      	ldr	r2, [r3, #12]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001232:	2201      	movs	r2, #1
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 0201 	and.w	r2, r3, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b03      	cmp	r3, #3
 8001268:	d017      	beq.n	800129a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	2203      	movs	r2, #3
 8001276:	fa02 f303 	lsl.w	r3, r2, r3
 800127a:	43db      	mvns	r3, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4013      	ands	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	6939      	ldr	r1, [r7, #16]
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0203 	and.w	r2, r3, #3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800132a:	2b00      	cmp	r3, #0
 800132c:	f000 8094 	beq.w	8001458 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001330:	4b52      	ldr	r3, [pc, #328]	@ (800147c <HAL_GPIO_Init+0x2c0>)
 8001332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001334:	4a51      	ldr	r2, [pc, #324]	@ (800147c <HAL_GPIO_Init+0x2c0>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6613      	str	r3, [r2, #96]	@ 0x60
 800133c:	4b4f      	ldr	r3, [pc, #316]	@ (800147c <HAL_GPIO_Init+0x2c0>)
 800133e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001348:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <HAL_GPIO_Init+0x2c4>)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0303 	and.w	r3, r3, #3
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	220f      	movs	r2, #15
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001372:	d00d      	beq.n	8001390 <HAL_GPIO_Init+0x1d4>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a43      	ldr	r2, [pc, #268]	@ (8001484 <HAL_GPIO_Init+0x2c8>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d007      	beq.n	800138c <HAL_GPIO_Init+0x1d0>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4a42      	ldr	r2, [pc, #264]	@ (8001488 <HAL_GPIO_Init+0x2cc>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d101      	bne.n	8001388 <HAL_GPIO_Init+0x1cc>
 8001384:	2302      	movs	r3, #2
 8001386:	e004      	b.n	8001392 <HAL_GPIO_Init+0x1d6>
 8001388:	2307      	movs	r3, #7
 800138a:	e002      	b.n	8001392 <HAL_GPIO_Init+0x1d6>
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <HAL_GPIO_Init+0x1d6>
 8001390:	2300      	movs	r3, #0
 8001392:	697a      	ldr	r2, [r7, #20]
 8001394:	f002 0203 	and.w	r2, r2, #3
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	4093      	lsls	r3, r2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013a2:	4937      	ldr	r1, [pc, #220]	@ (8001480 <HAL_GPIO_Init+0x2c4>)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	089b      	lsrs	r3, r3, #2
 80013a8:	3302      	adds	r3, #2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b0:	4b36      	ldr	r3, [pc, #216]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	43db      	mvns	r3, r3
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d003      	beq.n	80013d4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013d4:	4a2d      	ldr	r2, [pc, #180]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013da:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013fe:	4a23      	ldr	r2, [pc, #140]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001404:	4b21      	ldr	r3, [pc, #132]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	43db      	mvns	r3, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001428:	4a18      	ldr	r2, [pc, #96]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800142e:	4b17      	ldr	r3, [pc, #92]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4313      	orrs	r3, r2
 8001450:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_GPIO_Init+0x2d0>)
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3301      	adds	r3, #1
 800145c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa22 f303 	lsr.w	r3, r2, r3
 8001468:	2b00      	cmp	r3, #0
 800146a:	f47f aeaf 	bne.w	80011cc <HAL_GPIO_Init+0x10>
  }
}
 800146e:	bf00      	nop
 8001470:	bf00      	nop
 8001472:	371c      	adds	r7, #28
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40021000 	.word	0x40021000
 8001480:	40010000 	.word	0x40010000
 8001484:	48000400 	.word	0x48000400
 8001488:	48000800 	.word	0x48000800
 800148c:	40010400 	.word	0x40010400

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014ae:	887a      	ldrh	r2, [r7, #2]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014b4:	bf00      	nop
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014c4:	4b05      	ldr	r3, [pc, #20]	@ (80014dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a04      	ldr	r2, [pc, #16]	@ (80014dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000

080014e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014e4:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800150a:	d130      	bne.n	800156e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001518:	d038      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800151a:	4b20      	ldr	r3, [pc, #128]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001522:	4a1e      	ldr	r2, [pc, #120]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001524:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2232      	movs	r2, #50	@ 0x32
 8001530:	fb02 f303 	mul.w	r3, r2, r3
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0c9b      	lsrs	r3, r3, #18
 800153c:	3301      	adds	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001540:	e002      	b.n	8001548 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	3b01      	subs	r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001554:	d102      	bne.n	800155c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f2      	bne.n	8001542 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001568:	d110      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e00f      	b.n	800158e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001576:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800157a:	d007      	beq.n	800158c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800157c:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3714      	adds	r7, #20
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	40007000 	.word	0x40007000
 80015a0:	20000000 	.word	0x20000000
 80015a4:	431bde83 	.word	0x431bde83

080015a8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d102      	bne.n	80015bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f000 bc02 	b.w	8001dc0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015bc:	4b96      	ldr	r3, [pc, #600]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c6:	4b94      	ldr	r3, [pc, #592]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0310 	and.w	r3, r3, #16
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80e4 	beq.w	80017a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_RCC_OscConfig+0x4c>
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	2b0c      	cmp	r3, #12
 80015e8:	f040 808b 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	f040 8087 	bne.w	8001702 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015f4:	4b88      	ldr	r3, [pc, #544]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d005      	beq.n	800160c <HAL_RCC_OscConfig+0x64>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d101      	bne.n	800160c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e3d9      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1a      	ldr	r2, [r3, #32]
 8001610:	4b81      	ldr	r3, [pc, #516]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0308 	and.w	r3, r3, #8
 8001618:	2b00      	cmp	r3, #0
 800161a:	d004      	beq.n	8001626 <HAL_RCC_OscConfig+0x7e>
 800161c:	4b7e      	ldr	r3, [pc, #504]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001624:	e005      	b.n	8001632 <HAL_RCC_OscConfig+0x8a>
 8001626:	4b7c      	ldr	r3, [pc, #496]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001632:	4293      	cmp	r3, r2
 8001634:	d223      	bcs.n	800167e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4618      	mov	r0, r3
 800163c:	f000 fd8c 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3ba      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800164a:	4b73      	ldr	r3, [pc, #460]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a72      	ldr	r2, [pc, #456]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b70      	ldr	r3, [pc, #448]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	496d      	ldr	r1, [pc, #436]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001664:	4313      	orrs	r3, r2
 8001666:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001668:	4b6b      	ldr	r3, [pc, #428]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
 8001674:	021b      	lsls	r3, r3, #8
 8001676:	4968      	ldr	r1, [pc, #416]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e025      	b.n	80016ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800167e:	4b66      	ldr	r3, [pc, #408]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a65      	ldr	r2, [pc, #404]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001684:	f043 0308 	orr.w	r3, r3, #8
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	4b63      	ldr	r3, [pc, #396]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	4960      	ldr	r1, [pc, #384]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	4b5e      	ldr	r3, [pc, #376]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	495b      	ldr	r1, [pc, #364]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016b0:	69bb      	ldr	r3, [r7, #24]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd4c 	bl	8002158 <RCC_SetFlashLatencyFromMSIRange>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e37a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ca:	f000 fc81 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4b51      	ldr	r3, [pc, #324]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	4950      	ldr	r1, [pc, #320]	@ (800181c <HAL_RCC_OscConfig+0x274>)
 80016dc:	5ccb      	ldrb	r3, [r1, r3]
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	4a4e      	ldr	r2, [pc, #312]	@ (8001820 <HAL_RCC_OscConfig+0x278>)
 80016e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001824 <HAL_RCC_OscConfig+0x27c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fbfe 	bl	8000ef0 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016f8:	7bfb      	ldrb	r3, [r7, #15]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d052      	beq.n	80017a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
 8001700:	e35e      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d032      	beq.n	8001770 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800170a:	4b43      	ldr	r3, [pc, #268]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a42      	ldr	r2, [pc, #264]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001716:	f7ff fc3b 	bl	8000f90 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171e:	f7ff fc37 	bl	8000f90 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e347      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001730:	4b39      	ldr	r3, [pc, #228]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800173c:	4b36      	ldr	r3, [pc, #216]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a35      	ldr	r2, [pc, #212]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001742:	f043 0308 	orr.w	r3, r3, #8
 8001746:	6013      	str	r3, [r2, #0]
 8001748:	4b33      	ldr	r3, [pc, #204]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	4930      	ldr	r1, [pc, #192]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	4b2f      	ldr	r3, [pc, #188]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	492b      	ldr	r1, [pc, #172]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
 800176e:	e01a      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001770:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a28      	ldr	r2, [pc, #160]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001776:	f023 0301 	bic.w	r3, r3, #1
 800177a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800177c:	f7ff fc08 	bl	8000f90 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001784:	f7ff fc04 	bl	8000f90 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e314      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001796:	4b20      	ldr	r3, [pc, #128]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x1dc>
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d073      	beq.n	800189a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	2b08      	cmp	r3, #8
 80017b6:	d005      	beq.n	80017c4 <HAL_RCC_OscConfig+0x21c>
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2b0c      	cmp	r3, #12
 80017bc:	d10e      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b03      	cmp	r3, #3
 80017c2:	d10b      	bne.n	80017dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d063      	beq.n	8001898 <HAL_RCC_OscConfig+0x2f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d15f      	bne.n	8001898 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017d8:	2301      	movs	r3, #1
 80017da:	e2f1      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e4:	d106      	bne.n	80017f4 <HAL_RCC_OscConfig+0x24c>
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 80017ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e025      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017fc:	d114      	bne.n	8001828 <HAL_RCC_OscConfig+0x280>
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a05      	ldr	r2, [pc, #20]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b03      	ldr	r3, [pc, #12]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a02      	ldr	r2, [pc, #8]	@ (8001818 <HAL_RCC_OscConfig+0x270>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e013      	b.n	8001840 <HAL_RCC_OscConfig+0x298>
 8001818:	40021000 	.word	0x40021000
 800181c:	08005574 	.word	0x08005574
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004
 8001828:	4ba0      	ldr	r3, [pc, #640]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a9f      	ldr	r2, [pc, #636]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800182e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b9d      	ldr	r3, [pc, #628]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a9c      	ldr	r2, [pc, #624]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800183a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d013      	beq.n	8001870 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fba2 	bl	8000f90 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fb9e 	bl	8000f90 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	@ 0x64
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2ae      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001862:	4b92      	ldr	r3, [pc, #584]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x2a8>
 800186e:	e014      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001870:	f7ff fb8e 	bl	8000f90 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001878:	f7ff fb8a 	bl	8000f90 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b64      	cmp	r3, #100	@ 0x64
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e29a      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188a:	4b88      	ldr	r3, [pc, #544]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x2d0>
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d060      	beq.n	8001968 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d005      	beq.n	80018b8 <HAL_RCC_OscConfig+0x310>
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2b0c      	cmp	r3, #12
 80018b0:	d119      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d116      	bne.n	80018e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018b8:	4b7c      	ldr	r3, [pc, #496]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <HAL_RCC_OscConfig+0x328>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d101      	bne.n	80018d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e277      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d0:	4b76      	ldr	r3, [pc, #472]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4973      	ldr	r1, [pc, #460]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018e4:	e040      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d023      	beq.n	8001936 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ee:	4b6f      	ldr	r3, [pc, #444]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb49 	bl	8000f90 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fb45 	bl	8000f90 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e255      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001914:	4b65      	ldr	r3, [pc, #404]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b62      	ldr	r3, [pc, #392]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	061b      	lsls	r3, r3, #24
 800192e:	495f      	ldr	r1, [pc, #380]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001930:	4313      	orrs	r3, r2
 8001932:	604b      	str	r3, [r1, #4]
 8001934:	e018      	b.n	8001968 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a5c      	ldr	r2, [pc, #368]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800193c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001942:	f7ff fb25 	bl	8000f90 <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fb21 	bl	8000f90 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e231      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b53      	ldr	r3, [pc, #332]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001964:	2b00      	cmp	r3, #0
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0308 	and.w	r3, r3, #8
 8001970:	2b00      	cmp	r3, #0
 8001972:	d03c      	beq.n	80019ee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d01c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800197c:	4b4b      	ldr	r3, [pc, #300]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001982:	4a4a      	ldr	r2, [pc, #296]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fb00 	bl	8000f90 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fafc 	bl	8000f90 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e20c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a6:	4b41      	ldr	r3, [pc, #260]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x3ec>
 80019b4:	e01b      	b.n	80019ee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b6:	4b3d      	ldr	r3, [pc, #244]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019bc:	4a3b      	ldr	r2, [pc, #236]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c6:	f7ff fae3 	bl	8000f90 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ce:	f7ff fadf 	bl	8000f90 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e1ef      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e0:	4b32      	ldr	r3, [pc, #200]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 80019e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1ef      	bne.n	80019ce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80a6 	beq.w	8001b48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fc:	2300      	movs	r3, #0
 80019fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a00:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10d      	bne.n	8001a28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	4b27      	ldr	r3, [pc, #156]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a10:	4a26      	ldr	r2, [pc, #152]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a18:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a24:	2301      	movs	r3, #1
 8001a26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d118      	bne.n	8001a66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a40:	f7ff faa6 	bl	8000f90 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a48:	f7ff faa2 	bl	8000f90 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1b2      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <HAL_RCC_OscConfig+0x508>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d108      	bne.n	8001a80 <HAL_RCC_OscConfig+0x4d8>
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a76:	f043 0301 	orr.w	r3, r3, #1
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a7e:	e029      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d115      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x50c>
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a8e:	4a07      	ldr	r2, [pc, #28]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001a98:	4b04      	ldr	r3, [pc, #16]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a9e:	4a03      	ldr	r2, [pc, #12]	@ (8001aac <HAL_RCC_OscConfig+0x504>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aa8:	e014      	b.n	8001ad4 <HAL_RCC_OscConfig+0x52c>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aba:	4a99      	ldr	r2, [pc, #612]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ac4:	4b96      	ldr	r3, [pc, #600]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001aca:	4a95      	ldr	r2, [pc, #596]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001acc:	f023 0304 	bic.w	r3, r3, #4
 8001ad0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d016      	beq.n	8001b0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001adc:	f7ff fa58 	bl	8000f90 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fa54 	bl	8000f90 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e162      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afa:	4b89      	ldr	r3, [pc, #548]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x53c>
 8001b08:	e015      	b.n	8001b36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7ff fa41 	bl	8000f90 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b10:	e00a      	b.n	8001b28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fa3d 	bl	8000f90 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e14b      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b28:	4b7d      	ldr	r3, [pc, #500]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1ed      	bne.n	8001b12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b36:	7ffb      	ldrb	r3, [r7, #31]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4b78      	ldr	r3, [pc, #480]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b40:	4a77      	ldr	r2, [pc, #476]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b46:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d03c      	beq.n	8001bce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d01c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b5c:	4b70      	ldr	r3, [pc, #448]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b62:	4a6f      	ldr	r2, [pc, #444]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fa10 	bl	8000f90 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b74:	f7ff fa0c 	bl	8000f90 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e11c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b86:	4b66      	ldr	r3, [pc, #408]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ef      	beq.n	8001b74 <HAL_RCC_OscConfig+0x5cc>
 8001b94:	e01b      	b.n	8001bce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b96:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001b9c:	4a60      	ldr	r2, [pc, #384]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff f9f3 	bl	8000f90 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bae:	f7ff f9ef 	bl	8000f90 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e0ff      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc0:	4b57      	ldr	r3, [pc, #348]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ef      	bne.n	8001bae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	f000 80f3 	beq.w	8001dbe <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	f040 80c9 	bne.w	8001d74 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001be2:	4b4f      	ldr	r3, [pc, #316]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f003 0203 	and.w	r2, r3, #3
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d12c      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c00:	3b01      	subs	r3, #1
 8001c02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d123      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d11b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d113      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c32:	085b      	lsrs	r3, r3, #1
 8001c34:	3b01      	subs	r3, #1
 8001c36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d109      	bne.n	8001c50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d06b      	beq.n	8001d28 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d062      	beq.n	8001d1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c56:	4b32      	ldr	r3, [pc, #200]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0ac      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c66:	4b2e      	ldr	r3, [pc, #184]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001c6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c72:	f7ff f98d 	bl	8000f90 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7a:	f7ff f989 	bl	8000f90 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e099      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f0      	bne.n	8001c7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c98:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	4b21      	ldr	r3, [pc, #132]	@ (8001d24 <HAL_RCC_OscConfig+0x77c>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001ca8:	3a01      	subs	r2, #1
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	4311      	orrs	r1, r2
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cb2:	0212      	lsls	r2, r2, #8
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001cba:	0852      	lsrs	r2, r2, #1
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0552      	lsls	r2, r2, #21
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cc6:	0852      	lsrs	r2, r2, #1
 8001cc8:	3a01      	subs	r2, #1
 8001cca:	0652      	lsls	r2, r2, #25
 8001ccc:	4311      	orrs	r1, r2
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cd2:	06d2      	lsls	r2, r2, #27
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	4912      	ldr	r1, [pc, #72]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b10      	ldr	r3, [pc, #64]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a0c      	ldr	r2, [pc, #48]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001cf2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf4:	f7ff f94c 	bl	8000f90 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff f948 	bl	8000f90 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e058      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d0e:	4b04      	ldr	r3, [pc, #16]	@ (8001d20 <HAL_RCC_OscConfig+0x778>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1a:	e050      	b.n	8001dbe <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e04f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
 8001d20:	40021000 	.word	0x40021000
 8001d24:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d28:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d144      	bne.n	8001dbe <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d34:	4b24      	ldr	r3, [pc, #144]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d40:	4b21      	ldr	r3, [pc, #132]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a20      	ldr	r2, [pc, #128]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d4a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d4c:	f7ff f920 	bl	8000f90 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f91c 	bl	8000f90 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e02c      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b18      	ldr	r3, [pc, #96]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x7ac>
 8001d72:	e024      	b.n	8001dbe <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d01f      	beq.n	8001dba <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7a:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a12      	ldr	r2, [pc, #72]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001d80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d86:	f7ff f903 	bl	8000f90 <HAL_GetTick>
 8001d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8e:	f7ff f8ff 	bl	8000f90 <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e00f      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da0:	4b09      	ldr	r3, [pc, #36]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	4905      	ldr	r1, [pc, #20]	@ (8001dc8 <HAL_RCC_OscConfig+0x820>)
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_RCC_OscConfig+0x824>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60cb      	str	r3, [r1, #12]
 8001db8:	e001      	b.n	8001dbe <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	feeefffc 	.word	0xfeeefffc

08001dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0e7      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de4:	4b75      	ldr	r3, [pc, #468]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d910      	bls.n	8001e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df2:	4b72      	ldr	r3, [pc, #456]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f023 0207 	bic.w	r2, r3, #7
 8001dfa:	4970      	ldr	r1, [pc, #448]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	4b6e      	ldr	r3, [pc, #440]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e0cf      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d010      	beq.n	8001e42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b66      	ldr	r3, [pc, #408]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d908      	bls.n	8001e42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e30:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	4960      	ldr	r1, [pc, #384]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d04c      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d107      	bne.n	8001e66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b5a      	ldr	r3, [pc, #360]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d121      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e0a6      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d107      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e6e:	4b54      	ldr	r3, [pc, #336]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d115      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e09a      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e86:	4b4e      	ldr	r3, [pc, #312]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d109      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e08e      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e96:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e086      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ea6:	4b46      	ldr	r3, [pc, #280]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f023 0203 	bic.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	4943      	ldr	r1, [pc, #268]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001eb8:	f7ff f86a 	bl	8000f90 <HAL_GetTick>
 8001ebc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ebe:	e00a      	b.n	8001ed6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7ff f866 	bl	8000f90 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e06e      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 020c 	and.w	r2, r3, #12
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d1eb      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	4b31      	ldr	r3, [pc, #196]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d208      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	492b      	ldr	r1, [pc, #172]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f16:	4b29      	ldr	r3, [pc, #164]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d210      	bcs.n	8001f46 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f24:	4b25      	ldr	r3, [pc, #148]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 0207 	bic.w	r2, r3, #7
 8001f2c:	4923      	ldr	r1, [pc, #140]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f34:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <HAL_RCC_ClockConfig+0x1ec>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d001      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e036      	b.n	8001fb4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	4918      	ldr	r1, [pc, #96]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0308 	and.w	r3, r3, #8
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f70:	4b13      	ldr	r3, [pc, #76]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4910      	ldr	r1, [pc, #64]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f84:	f000 f824 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	091b      	lsrs	r3, r3, #4
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	490b      	ldr	r1, [pc, #44]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f96:	5ccb      	ldrb	r3, [r1, r3]
 8001f98:	f003 031f 	and.w	r3, r3, #31
 8001f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa0:	4a09      	ldr	r2, [pc, #36]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fa4:	4b09      	ldr	r3, [pc, #36]	@ (8001fcc <HAL_RCC_ClockConfig+0x1fc>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe ffa1 	bl	8000ef0 <HAL_InitTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40022000 	.word	0x40022000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	08005574 	.word	0x08005574
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b089      	sub	sp, #36	@ 0x24
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fde:	4b3e      	ldr	r3, [pc, #248]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 030c 	and.w	r3, r3, #12
 8001fe6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d121      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b01      	cmp	r3, #1
 8002002:	d11e      	bne.n	8002042 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002004:	4b34      	ldr	r3, [pc, #208]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	2b00      	cmp	r3, #0
 800200e:	d107      	bne.n	8002020 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002010:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002016:	0a1b      	lsrs	r3, r3, #8
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	61fb      	str	r3, [r7, #28]
 800201e:	e005      	b.n	800202c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002020:	4b2d      	ldr	r3, [pc, #180]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800202c:	4a2b      	ldr	r2, [pc, #172]	@ (80020dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002034:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b04      	cmp	r3, #4
 8002046:	d102      	bne.n	800204e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002048:	4b25      	ldr	r3, [pc, #148]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800204a:	61bb      	str	r3, [r7, #24]
 800204c:	e004      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b08      	cmp	r3, #8
 8002052:	d101      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002054:	4b23      	ldr	r3, [pc, #140]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002056:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	d134      	bne.n	80020c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800205e:	4b1e      	ldr	r3, [pc, #120]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2b02      	cmp	r3, #2
 800206c:	d003      	beq.n	8002076 <HAL_RCC_GetSysClockFreq+0xa6>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b03      	cmp	r3, #3
 8002072:	d003      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0xac>
 8002074:	e005      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002078:	617b      	str	r3, [r7, #20]
      break;
 800207a:	e005      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800207c:	4b19      	ldr	r3, [pc, #100]	@ (80020e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	617b      	str	r3, [r7, #20]
      break;
 8002080:	e002      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	617b      	str	r3, [r7, #20]
      break;
 8002086:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002088:	4b13      	ldr	r3, [pc, #76]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	091b      	lsrs	r3, r3, #4
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	3301      	adds	r3, #1
 8002094:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	0e5b      	lsrs	r3, r3, #25
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	3301      	adds	r3, #1
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c8:	69bb      	ldr	r3, [r7, #24]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40021000 	.word	0x40021000
 80020dc:	0800558c 	.word	0x0800558c
 80020e0:	00f42400 	.word	0x00f42400
 80020e4:	007a1200 	.word	0x007a1200

080020e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <HAL_RCC_GetHCLKFreq+0x14>)
 80020ee:	681b      	ldr	r3, [r3, #0]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000

08002100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002104:	f7ff fff0 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002108:	4602      	mov	r2, r0
 800210a:	4b06      	ldr	r3, [pc, #24]	@ (8002124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	0a1b      	lsrs	r3, r3, #8
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	4904      	ldr	r1, [pc, #16]	@ (8002128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002116:	5ccb      	ldrb	r3, [r1, r3]
 8002118:	f003 031f 	and.w	r3, r3, #31
 800211c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40021000 	.word	0x40021000
 8002128:	08005584 	.word	0x08005584

0800212c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002130:	f7ff ffda 	bl	80020e8 <HAL_RCC_GetHCLKFreq>
 8002134:	4602      	mov	r2, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0adb      	lsrs	r3, r3, #11
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	4904      	ldr	r1, [pc, #16]	@ (8002154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002142:	5ccb      	ldrb	r3, [r1, r3]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08005584 	.word	0x08005584

08002158 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002160:	2300      	movs	r3, #0
 8002162:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002164:	4b2a      	ldr	r3, [pc, #168]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002170:	f7ff f9b6 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 8002174:	6178      	str	r0, [r7, #20]
 8002176:	e014      	b.n	80021a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800217c:	4a24      	ldr	r2, [pc, #144]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002182:	6593      	str	r3, [r2, #88]	@ 0x58
 8002184:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002190:	f7ff f9a6 	bl	80014e0 <HAL_PWREx_GetVoltageRange>
 8002194:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b1e      	ldr	r3, [pc, #120]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a1d      	ldr	r2, [pc, #116]	@ (8002210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021a8:	d10b      	bne.n	80021c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b80      	cmp	r3, #128	@ 0x80
 80021ae:	d919      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80021b4:	d902      	bls.n	80021bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b6:	2302      	movs	r3, #2
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	e013      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	e010      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b80      	cmp	r3, #128	@ 0x80
 80021c6:	d902      	bls.n	80021ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021c8:	2303      	movs	r3, #3
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	e00a      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b80      	cmp	r3, #128	@ 0x80
 80021d2:	d102      	bne.n	80021da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021d4:	2302      	movs	r3, #2
 80021d6:	613b      	str	r3, [r7, #16]
 80021d8:	e004      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2b70      	cmp	r3, #112	@ 0x70
 80021de:	d101      	bne.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e0:	2301      	movs	r3, #1
 80021e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f023 0207 	bic.w	r2, r3, #7
 80021ec:	4909      	ldr	r1, [pc, #36]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021f4:	4b07      	ldr	r3, [pc, #28]	@ (8002214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d001      	beq.n	8002206 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	40022000 	.word	0x40022000

08002218 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002220:	2300      	movs	r3, #0
 8002222:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002224:	2300      	movs	r3, #0
 8002226:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002230:	2b00      	cmp	r3, #0
 8002232:	d031      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002238:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800223c:	d01a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800223e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002242:	d814      	bhi.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002248:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800224c:	d10f      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800224e:	4b5d      	ldr	r3, [pc, #372]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	4a5c      	ldr	r2, [pc, #368]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002258:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800225a:	e00c      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3304      	adds	r3, #4
 8002260:	2100      	movs	r1, #0
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f9de 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800226c:	e003      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	74fb      	strb	r3, [r7, #19]
      break;
 8002272:	e000      	b.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002274:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800227c:	4b51      	ldr	r3, [pc, #324]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800228a:	494e      	ldr	r1, [pc, #312]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002292:	e001      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002294:	7cfb      	ldrb	r3, [r7, #19]
 8002296:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 809e 	beq.w	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a6:	2300      	movs	r3, #0
 80022a8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022aa:	4b46      	ldr	r3, [pc, #280]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022ba:	2300      	movs	r3, #0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00d      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022c0:	4b40      	ldr	r3, [pc, #256]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c4:	4a3f      	ldr	r2, [pc, #252]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80022cc:	4b3d      	ldr	r3, [pc, #244]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022dc:	4b3a      	ldr	r3, [pc, #232]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a39      	ldr	r2, [pc, #228]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e8:	f7fe fe52 	bl	8000f90 <HAL_GetTick>
 80022ec:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ee:	e009      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022f0:	f7fe fe4e 	bl	8000f90 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d902      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	74fb      	strb	r3, [r7, #19]
        break;
 8002302:	e005      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002304:	4b30      	ldr	r3, [pc, #192]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0ef      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d15a      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002316:	4b2b      	ldr	r3, [pc, #172]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800231c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002320:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01e      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232c:	697a      	ldr	r2, [r7, #20]
 800232e:	429a      	cmp	r2, r3
 8002330:	d019      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002332:	4b24      	ldr	r3, [pc, #144]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002338:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800233c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800233e:	4b21      	ldr	r3, [pc, #132]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002344:	4a1f      	ldr	r2, [pc, #124]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800234a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800234e:	4b1d      	ldr	r3, [pc, #116]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002354:	4a1b      	ldr	r2, [pc, #108]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800235e:	4a19      	ldr	r2, [pc, #100]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d016      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe fe0e 	bl	8000f90 <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002376:	e00b      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002378:	f7fe fe0a 	bl	8000f90 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002386:	4293      	cmp	r3, r2
 8002388:	d902      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	74fb      	strb	r3, [r7, #19]
            break;
 800238e:	e006      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0ec      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10b      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023aa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	4904      	ldr	r1, [pc, #16]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023ba:	e009      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	74bb      	strb	r3, [r7, #18]
 80023c0:	e006      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023c2:	bf00      	nop
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023d0:	7c7b      	ldrb	r3, [r7, #17]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d105      	bne.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d6:	4b8a      	ldr	r3, [pc, #552]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	4a89      	ldr	r2, [pc, #548]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00a      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ee:	4b84      	ldr	r3, [pc, #528]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f4:	f023 0203 	bic.w	r2, r3, #3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	4980      	ldr	r1, [pc, #512]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00a      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002410:	4b7b      	ldr	r3, [pc, #492]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002416:	f023 020c 	bic.w	r2, r3, #12
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	4978      	ldr	r1, [pc, #480]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0320 	and.w	r3, r3, #32
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00a      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002432:	4b73      	ldr	r3, [pc, #460]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002438:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	496f      	ldr	r1, [pc, #444]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002442:	4313      	orrs	r3, r2
 8002444:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00a      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002454:	4b6a      	ldr	r3, [pc, #424]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002456:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800245a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002462:	4967      	ldr	r1, [pc, #412]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002464:	4313      	orrs	r3, r2
 8002466:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002476:	4b62      	ldr	r3, [pc, #392]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002478:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002484:	495e      	ldr	r1, [pc, #376]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002494:	2b00      	cmp	r3, #0
 8002496:	d00a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002498:	4b59      	ldr	r3, [pc, #356]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800249a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a6:	4956      	ldr	r1, [pc, #344]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ba:	4b51      	ldr	r3, [pc, #324]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c8:	494d      	ldr	r1, [pc, #308]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d028      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024dc:	4b48      	ldr	r3, [pc, #288]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	4945      	ldr	r1, [pc, #276]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024fa:	d106      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b40      	ldr	r3, [pc, #256]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a3f      	ldr	r2, [pc, #252]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e011      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002512:	d10c      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	2101      	movs	r1, #1
 800251a:	4618      	mov	r0, r3
 800251c:	f000 f882 	bl	8002624 <RCCEx_PLLSAI1_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800252a:	7cfb      	ldrb	r3, [r7, #19]
 800252c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d028      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800253a:	4b31      	ldr	r3, [pc, #196]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002540:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002548:	492d      	ldr	r1, [pc, #180]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002554:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002558:	d106      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800255a:	4b29      	ldr	r3, [pc, #164]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4a28      	ldr	r2, [pc, #160]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002560:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002564:	60d3      	str	r3, [r2, #12]
 8002566:	e011      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800256c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002570:	d10c      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	2101      	movs	r1, #1
 8002578:	4618      	mov	r0, r3
 800257a:	f000 f853 	bl	8002624 <RCCEx_PLLSAI1_Config>
 800257e:	4603      	mov	r3, r0
 8002580:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002582:	7cfb      	ldrb	r3, [r7, #19]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01c      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002598:	4b19      	ldr	r3, [pc, #100]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a6:	4916      	ldr	r1, [pc, #88]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025b6:	d10c      	bne.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3304      	adds	r3, #4
 80025bc:	2102      	movs	r1, #2
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 f830 	bl	8002624 <RCCEx_PLLSAI1_Config>
 80025c4:	4603      	mov	r3, r0
 80025c6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80025ce:	7cfb      	ldrb	r3, [r7, #19]
 80025d0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00a      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025de:	4b08      	ldr	r3, [pc, #32]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ec:	4904      	ldr	r1, [pc, #16]	@ (8002600 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3718      	adds	r7, #24
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a04      	ldr	r2, [pc, #16]	@ (8002620 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800260e:	f043 0304 	orr.w	r3, r3, #4
 8002612:	6013      	str	r3, [r2, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002632:	4b74      	ldr	r3, [pc, #464]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d018      	beq.n	8002670 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800263e:	4b71      	ldr	r3, [pc, #452]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0203 	and.w	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d10d      	bne.n	800266a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
       ||
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002656:	4b6b      	ldr	r3, [pc, #428]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	091b      	lsrs	r3, r3, #4
 800265c:	f003 0307 	and.w	r3, r3, #7
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
       ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d047      	beq.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e044      	b.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b03      	cmp	r3, #3
 8002676:	d018      	beq.n	80026aa <RCCEx_PLLSAI1_Config+0x86>
 8002678:	2b03      	cmp	r3, #3
 800267a:	d825      	bhi.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
 800267c:	2b01      	cmp	r3, #1
 800267e:	d002      	beq.n	8002686 <RCCEx_PLLSAI1_Config+0x62>
 8002680:	2b02      	cmp	r3, #2
 8002682:	d009      	beq.n	8002698 <RCCEx_PLLSAI1_Config+0x74>
 8002684:	e020      	b.n	80026c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002686:	4b5f      	ldr	r3, [pc, #380]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11d      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002696:	e01a      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002698:	4b5a      	ldr	r3, [pc, #360]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d116      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a8:	e013      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026aa:	4b56      	ldr	r3, [pc, #344]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10f      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b6:	4b53      	ldr	r3, [pc, #332]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c6:	e006      	b.n	80026d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
      break;
 80026cc:	e004      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e002      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d2:	bf00      	nop
 80026d4:	e000      	b.n	80026d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10d      	bne.n	80026fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026de:	4b49      	ldr	r3, [pc, #292]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	430b      	orrs	r3, r1
 80026f4:	4943      	ldr	r1, [pc, #268]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d17c      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002700:	4b40      	ldr	r3, [pc, #256]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a3f      	ldr	r2, [pc, #252]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002706:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800270a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7fe fc40 	bl	8000f90 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002714:	f7fe fc3c 	bl	8000f90 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
        break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002728:	4b36      	ldr	r3, [pc, #216]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ef      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d15f      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d110      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002740:	4b30      	ldr	r3, [pc, #192]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002748:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
 8002750:	0211      	lsls	r1, r2, #8
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68d2      	ldr	r2, [r2, #12]
 8002756:	06d2      	lsls	r2, r2, #27
 8002758:	430a      	orrs	r2, r1
 800275a:	492a      	ldr	r1, [pc, #168]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	610b      	str	r3, [r1, #16]
 8002760:	e027      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d112      	bne.n	800278e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002768:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002770:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6892      	ldr	r2, [r2, #8]
 8002778:	0211      	lsls	r1, r2, #8
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6912      	ldr	r2, [r2, #16]
 800277e:	0852      	lsrs	r2, r2, #1
 8002780:	3a01      	subs	r2, #1
 8002782:	0552      	lsls	r2, r2, #21
 8002784:	430a      	orrs	r2, r1
 8002786:	491f      	ldr	r1, [pc, #124]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002788:	4313      	orrs	r3, r2
 800278a:	610b      	str	r3, [r1, #16]
 800278c:	e011      	b.n	80027b2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800278e:	4b1d      	ldr	r3, [pc, #116]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002796:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6892      	ldr	r2, [r2, #8]
 800279e:	0211      	lsls	r1, r2, #8
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6952      	ldr	r2, [r2, #20]
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	3a01      	subs	r2, #1
 80027a8:	0652      	lsls	r2, r2, #25
 80027aa:	430a      	orrs	r2, r1
 80027ac:	4915      	ldr	r1, [pc, #84]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027b2:	4b14      	ldr	r3, [pc, #80]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a13      	ldr	r2, [pc, #76]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027be:	f7fe fbe7 	bl	8000f90 <HAL_GetTick>
 80027c2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c4:	e009      	b.n	80027da <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c6:	f7fe fbe3 	bl	8000f90 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d902      	bls.n	80027da <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	73fb      	strb	r3, [r7, #15]
          break;
 80027d8:	e005      	b.n	80027e6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027da:	4b0a      	ldr	r3, [pc, #40]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ef      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027ec:	4b05      	ldr	r3, [pc, #20]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	4903      	ldr	r1, [pc, #12]	@ (8002804 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e049      	b.n	80028ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe f976 	bl	8000b20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3304      	adds	r3, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4610      	mov	r0, r2
 8002848:	f000 fb52 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e049      	b.n	800295c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d106      	bne.n	80028e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f841 	bl	8002964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3304      	adds	r3, #4
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f000 fafb 	bl	8002ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2201      	movs	r2, #1
 8002956:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_TIM_PWM_Start+0x24>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	bf14      	ite	ne
 8002994:	2301      	movne	r3, #1
 8002996:	2300      	moveq	r3, #0
 8002998:	b2db      	uxtb	r3, r3
 800299a:	e03c      	b.n	8002a16 <HAL_TIM_PWM_Start+0x9e>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d109      	bne.n	80029b6 <HAL_TIM_PWM_Start+0x3e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	bf14      	ite	ne
 80029ae:	2301      	movne	r3, #1
 80029b0:	2300      	moveq	r3, #0
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	e02f      	b.n	8002a16 <HAL_TIM_PWM_Start+0x9e>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b08      	cmp	r3, #8
 80029ba:	d109      	bne.n	80029d0 <HAL_TIM_PWM_Start+0x58>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	bf14      	ite	ne
 80029c8:	2301      	movne	r3, #1
 80029ca:	2300      	moveq	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	e022      	b.n	8002a16 <HAL_TIM_PWM_Start+0x9e>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	2b0c      	cmp	r3, #12
 80029d4:	d109      	bne.n	80029ea <HAL_TIM_PWM_Start+0x72>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	bf14      	ite	ne
 80029e2:	2301      	movne	r3, #1
 80029e4:	2300      	moveq	r3, #0
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e015      	b.n	8002a16 <HAL_TIM_PWM_Start+0x9e>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d109      	bne.n	8002a04 <HAL_TIM_PWM_Start+0x8c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	bf14      	ite	ne
 80029fc:	2301      	movne	r3, #1
 80029fe:	2300      	moveq	r3, #0
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	e008      	b.n	8002a16 <HAL_TIM_PWM_Start+0x9e>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	bf14      	ite	ne
 8002a10:	2301      	movne	r3, #1
 8002a12:	2300      	moveq	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07e      	b.n	8002b1c <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0xb6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a2c:	e023      	b.n	8002a76 <HAL_TIM_PWM_Start+0xfe>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b04      	cmp	r3, #4
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xc6>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a3c:	e01b      	b.n	8002a76 <HAL_TIM_PWM_Start+0xfe>
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	2b08      	cmp	r3, #8
 8002a42:	d104      	bne.n	8002a4e <HAL_TIM_PWM_Start+0xd6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2202      	movs	r2, #2
 8002a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a4c:	e013      	b.n	8002a76 <HAL_TIM_PWM_Start+0xfe>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	2b0c      	cmp	r3, #12
 8002a52:	d104      	bne.n	8002a5e <HAL_TIM_PWM_Start+0xe6>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002a5c:	e00b      	b.n	8002a76 <HAL_TIM_PWM_Start+0xfe>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b10      	cmp	r3, #16
 8002a62:	d104      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xf6>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a6c:	e003      	b.n	8002a76 <HAL_TIM_PWM_Start+0xfe>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	6839      	ldr	r1, [r7, #0]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 fdbe 	bl	8003600 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a26      	ldr	r2, [pc, #152]	@ (8002b24 <HAL_TIM_PWM_Start+0x1ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x12a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a25      	ldr	r2, [pc, #148]	@ (8002b28 <HAL_TIM_PWM_Start+0x1b0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_TIM_PWM_Start+0x12a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a23      	ldr	r2, [pc, #140]	@ (8002b2c <HAL_TIM_PWM_Start+0x1b4>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_TIM_PWM_Start+0x12e>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_PWM_Start+0x130>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d007      	beq.n	8002abc <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002aba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a18      	ldr	r2, [pc, #96]	@ (8002b24 <HAL_TIM_PWM_Start+0x1ac>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_TIM_PWM_Start+0x162>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ace:	d004      	beq.n	8002ada <HAL_TIM_PWM_Start+0x162>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a14      	ldr	r2, [pc, #80]	@ (8002b28 <HAL_TIM_PWM_Start+0x1b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d115      	bne.n	8002b06 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	4b13      	ldr	r3, [pc, #76]	@ (8002b30 <HAL_TIM_PWM_Start+0x1b8>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d015      	beq.n	8002b18 <HAL_TIM_PWM_Start+0x1a0>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af2:	d011      	beq.n	8002b18 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b04:	e008      	b.n	8002b18 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	e000      	b.n	8002b1a <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40012c00 	.word	0x40012c00
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	00010007 	.word	0x00010007

08002b34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e0ff      	b.n	8002d52 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b14      	cmp	r3, #20
 8002b5e:	f200 80f0 	bhi.w	8002d42 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b62:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002d43 	.word	0x08002d43
 8002b70:	08002d43 	.word	0x08002d43
 8002b74:	08002d43 	.word	0x08002d43
 8002b78:	08002bfd 	.word	0x08002bfd
 8002b7c:	08002d43 	.word	0x08002d43
 8002b80:	08002d43 	.word	0x08002d43
 8002b84:	08002d43 	.word	0x08002d43
 8002b88:	08002c3f 	.word	0x08002c3f
 8002b8c:	08002d43 	.word	0x08002d43
 8002b90:	08002d43 	.word	0x08002d43
 8002b94:	08002d43 	.word	0x08002d43
 8002b98:	08002c7f 	.word	0x08002c7f
 8002b9c:	08002d43 	.word	0x08002d43
 8002ba0:	08002d43 	.word	0x08002d43
 8002ba4:	08002d43 	.word	0x08002d43
 8002ba8:	08002cc1 	.word	0x08002cc1
 8002bac:	08002d43 	.word	0x08002d43
 8002bb0:	08002d43 	.word	0x08002d43
 8002bb4:	08002d43 	.word	0x08002d43
 8002bb8:	08002d01 	.word	0x08002d01
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68b9      	ldr	r1, [r7, #8]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fa04 	bl	8002fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0208 	orr.w	r2, r2, #8
 8002bd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6999      	ldr	r1, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	691a      	ldr	r2, [r3, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	619a      	str	r2, [r3, #24]
      break;
 8002bfa:	e0a5      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fa60 	bl	80030c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	021a      	lsls	r2, r3, #8
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	619a      	str	r2, [r3, #24]
      break;
 8002c3c:	e084      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 fab9 	bl	80031bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69da      	ldr	r2, [r3, #28]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0208 	orr.w	r2, r2, #8
 8002c58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	69da      	ldr	r2, [r3, #28]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0204 	bic.w	r2, r2, #4
 8002c68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69d9      	ldr	r1, [r3, #28]
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	61da      	str	r2, [r3, #28]
      break;
 8002c7c:	e064      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fb11 	bl	80032ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	021a      	lsls	r2, r3, #8
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	61da      	str	r2, [r3, #28]
      break;
 8002cbe:	e043      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68b9      	ldr	r1, [r7, #8]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 fb4e 	bl	8003368 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0208 	orr.w	r2, r2, #8
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0204 	bic.w	r2, r2, #4
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	691a      	ldr	r2, [r3, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002cfe:	e023      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fb86 	bl	8003418 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d1a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	021a      	lsls	r2, r3, #8
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002d40:	e002      	b.n	8002d48 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	75fb      	strb	r3, [r7, #23]
      break;
 8002d46:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d66:	2300      	movs	r3, #0
 8002d68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d101      	bne.n	8002d78 <HAL_TIM_ConfigClockSource+0x1c>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e0b6      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x18a>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002da2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002db4:	d03e      	beq.n	8002e34 <HAL_TIM_ConfigClockSource+0xd8>
 8002db6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dba:	f200 8087 	bhi.w	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002dbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dc2:	f000 8086 	beq.w	8002ed2 <HAL_TIM_ConfigClockSource+0x176>
 8002dc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dca:	d87f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002dcc:	2b70      	cmp	r3, #112	@ 0x70
 8002dce:	d01a      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0xaa>
 8002dd0:	2b70      	cmp	r3, #112	@ 0x70
 8002dd2:	d87b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002dd4:	2b60      	cmp	r3, #96	@ 0x60
 8002dd6:	d050      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0x11e>
 8002dd8:	2b60      	cmp	r3, #96	@ 0x60
 8002dda:	d877      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002ddc:	2b50      	cmp	r3, #80	@ 0x50
 8002dde:	d03c      	beq.n	8002e5a <HAL_TIM_ConfigClockSource+0xfe>
 8002de0:	2b50      	cmp	r3, #80	@ 0x50
 8002de2:	d873      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002de4:	2b40      	cmp	r3, #64	@ 0x40
 8002de6:	d058      	beq.n	8002e9a <HAL_TIM_ConfigClockSource+0x13e>
 8002de8:	2b40      	cmp	r3, #64	@ 0x40
 8002dea:	d86f      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002dec:	2b30      	cmp	r3, #48	@ 0x30
 8002dee:	d064      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15e>
 8002df0:	2b30      	cmp	r3, #48	@ 0x30
 8002df2:	d86b      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d060      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15e>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d867      	bhi.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d05c      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15e>
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d05a      	beq.n	8002eba <HAL_TIM_ConfigClockSource+0x15e>
 8002e04:	e062      	b.n	8002ecc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e16:	f000 fbd3 	bl	80035c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	609a      	str	r2, [r3, #8]
      break;
 8002e32:	e04f      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e44:	f000 fbbc 	bl	80035c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e56:	609a      	str	r2, [r3, #8]
      break;
 8002e58:	e03c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e66:	461a      	mov	r2, r3
 8002e68:	f000 fb30 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2150      	movs	r1, #80	@ 0x50
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 fb89 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002e78:	e02c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e86:	461a      	mov	r2, r3
 8002e88:	f000 fb4f 	bl	800352a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2160      	movs	r1, #96	@ 0x60
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb79 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002e98:	e01c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f000 fb10 	bl	80034cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2140      	movs	r1, #64	@ 0x40
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb69 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002eb8:	e00c      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	f000 fb60 	bl	800358a <TIM_ITRx_SetConfig>
      break;
 8002eca:	e003      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed0:	e000      	b.n	8002ed4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ed2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a30      	ldr	r2, [pc, #192]	@ (8002fc4 <TIM_Base_SetConfig+0xd4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x20>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a27      	ldr	r2, [pc, #156]	@ (8002fc4 <TIM_Base_SetConfig+0xd4>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <TIM_Base_SetConfig+0x52>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f30:	d007      	beq.n	8002f42 <TIM_Base_SetConfig+0x52>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a24      	ldr	r2, [pc, #144]	@ (8002fc8 <TIM_Base_SetConfig+0xd8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d003      	beq.n	8002f42 <TIM_Base_SetConfig+0x52>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a23      	ldr	r2, [pc, #140]	@ (8002fcc <TIM_Base_SetConfig+0xdc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d108      	bne.n	8002f54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	68fa      	ldr	r2, [r7, #12]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a12      	ldr	r2, [pc, #72]	@ (8002fc4 <TIM_Base_SetConfig+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d007      	beq.n	8002f90 <TIM_Base_SetConfig+0xa0>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a11      	ldr	r2, [pc, #68]	@ (8002fc8 <TIM_Base_SetConfig+0xd8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d003      	beq.n	8002f90 <TIM_Base_SetConfig+0xa0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a10      	ldr	r2, [pc, #64]	@ (8002fcc <TIM_Base_SetConfig+0xdc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d103      	bne.n	8002f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d105      	bne.n	8002fb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	f023 0201 	bic.w	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	611a      	str	r2, [r3, #16]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40014000 	.word	0x40014000
 8002fcc:	40014400 	.word	0x40014400

08002fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a1b      	ldr	r3, [r3, #32]
 8002fe4:	f023 0201 	bic.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f023 0302 	bic.w	r3, r3, #2
 800301c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a24      	ldr	r2, [pc, #144]	@ (80030bc <TIM_OC1_SetConfig+0xec>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <TIM_OC1_SetConfig+0x70>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a23      	ldr	r2, [pc, #140]	@ (80030c0 <TIM_OC1_SetConfig+0xf0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_OC1_SetConfig+0x70>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <TIM_OC1_SetConfig+0xf4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d10c      	bne.n	800305a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f023 0308 	bic.w	r3, r3, #8
 8003046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f023 0304 	bic.w	r3, r3, #4
 8003058:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a17      	ldr	r2, [pc, #92]	@ (80030bc <TIM_OC1_SetConfig+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d007      	beq.n	8003072 <TIM_OC1_SetConfig+0xa2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a16      	ldr	r2, [pc, #88]	@ (80030c0 <TIM_OC1_SetConfig+0xf0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d003      	beq.n	8003072 <TIM_OC1_SetConfig+0xa2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a15      	ldr	r2, [pc, #84]	@ (80030c4 <TIM_OC1_SetConfig+0xf4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d111      	bne.n	8003096 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	621a      	str	r2, [r3, #32]
}
 80030b0:	bf00      	nop
 80030b2:	371c      	adds	r7, #28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40014000 	.word	0x40014000
 80030c4:	40014400 	.word	0x40014400

080030c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 0210 	bic.w	r2, r3, #16
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	021b      	lsls	r3, r3, #8
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	4313      	orrs	r3, r2
 800310e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f023 0320 	bic.w	r3, r3, #32
 8003116:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a22      	ldr	r2, [pc, #136]	@ (80031b0 <TIM_OC2_SetConfig+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10d      	bne.n	8003148 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003146:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a19      	ldr	r2, [pc, #100]	@ (80031b0 <TIM_OC2_SetConfig+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d007      	beq.n	8003160 <TIM_OC2_SetConfig+0x98>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a18      	ldr	r2, [pc, #96]	@ (80031b4 <TIM_OC2_SetConfig+0xec>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d003      	beq.n	8003160 <TIM_OC2_SetConfig+0x98>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a17      	ldr	r2, [pc, #92]	@ (80031b8 <TIM_OC2_SetConfig+0xf0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d113      	bne.n	8003188 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003166:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800316e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	621a      	str	r2, [r3, #32]
}
 80031a2:	bf00      	nop
 80031a4:	371c      	adds	r7, #28
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40014400 	.word	0x40014400

080031bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0303 	bic.w	r3, r3, #3
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	697a      	ldr	r2, [r7, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a21      	ldr	r2, [pc, #132]	@ (80032a0 <TIM_OC3_SetConfig+0xe4>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d10d      	bne.n	800323a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003224:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a18      	ldr	r2, [pc, #96]	@ (80032a0 <TIM_OC3_SetConfig+0xe4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_OC3_SetConfig+0x96>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a17      	ldr	r2, [pc, #92]	@ (80032a4 <TIM_OC3_SetConfig+0xe8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_OC3_SetConfig+0x96>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a16      	ldr	r2, [pc, #88]	@ (80032a8 <TIM_OC3_SetConfig+0xec>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d113      	bne.n	800327a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	693a      	ldr	r2, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	621a      	str	r2, [r3, #32]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	40012c00 	.word	0x40012c00
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40014400 	.word	0x40014400

080032ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80032de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80032fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	031b      	lsls	r3, r3, #12
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a14      	ldr	r2, [pc, #80]	@ (800335c <TIM_OC4_SetConfig+0xb0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_OC4_SetConfig+0x74>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a13      	ldr	r2, [pc, #76]	@ (8003360 <TIM_OC4_SetConfig+0xb4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_OC4_SetConfig+0x74>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a12      	ldr	r2, [pc, #72]	@ (8003364 <TIM_OC4_SetConfig+0xb8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d109      	bne.n	8003334 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003326:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	019b      	lsls	r3, r3, #6
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	621a      	str	r2, [r3, #32]
}
 800334e:	bf00      	nop
 8003350:	371c      	adds	r7, #28
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00
 8003360:	40014000 	.word	0x40014000
 8003364:	40014400 	.word	0x40014400

08003368 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003368:	b480      	push	{r7}
 800336a:	b087      	sub	sp, #28
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80033ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a13      	ldr	r2, [pc, #76]	@ (800340c <TIM_OC5_SetConfig+0xa4>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d007      	beq.n	80033d2 <TIM_OC5_SetConfig+0x6a>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a12      	ldr	r2, [pc, #72]	@ (8003410 <TIM_OC5_SetConfig+0xa8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d003      	beq.n	80033d2 <TIM_OC5_SetConfig+0x6a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a11      	ldr	r2, [pc, #68]	@ (8003414 <TIM_OC5_SetConfig+0xac>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d109      	bne.n	80033e6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	021b      	lsls	r3, r3, #8
 80033e0:	697a      	ldr	r2, [r7, #20]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	693a      	ldr	r2, [r7, #16]
 80033fe:	621a      	str	r2, [r3, #32]
}
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40014000 	.word	0x40014000
 8003414:	40014400 	.word	0x40014400

08003418 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003418:	b480      	push	{r7}
 800341a:	b087      	sub	sp, #28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003446:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800344a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	021b      	lsls	r3, r3, #8
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800345e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	051b      	lsls	r3, r3, #20
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a14      	ldr	r2, [pc, #80]	@ (80034c0 <TIM_OC6_SetConfig+0xa8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_OC6_SetConfig+0x6c>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a13      	ldr	r2, [pc, #76]	@ (80034c4 <TIM_OC6_SetConfig+0xac>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC6_SetConfig+0x6c>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a12      	ldr	r2, [pc, #72]	@ (80034c8 <TIM_OC6_SetConfig+0xb0>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d109      	bne.n	8003498 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	029b      	lsls	r3, r3, #10
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	621a      	str	r2, [r3, #32]
}
 80034b2:	bf00      	nop
 80034b4:	371c      	adds	r7, #28
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40012c00 	.word	0x40012c00
 80034c4:	40014000 	.word	0x40014000
 80034c8:	40014400 	.word	0x40014400

080034cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4313      	orrs	r3, r2
 8003500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f023 030a 	bic.w	r3, r3, #10
 8003508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	621a      	str	r2, [r3, #32]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	f023 0210 	bic.w	r2, r3, #16
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003554:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003566:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	621a      	str	r2, [r3, #32]
}
 800357e:	bf00      	nop
 8003580:	371c      	adds	r7, #28
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800358a:	b480      	push	{r7}
 800358c:	b085      	sub	sp, #20
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
 8003592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035a2:	683a      	ldr	r2, [r7, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	f043 0307 	orr.w	r3, r3, #7
 80035ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	609a      	str	r2, [r3, #8]
}
 80035b4:	bf00      	nop
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b087      	sub	sp, #28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	697a      	ldr	r2, [r7, #20]
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	371c      	adds	r7, #28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003600:	b480      	push	{r7}
 8003602:	b087      	sub	sp, #28
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	f003 031f 	and.w	r3, r3, #31
 8003612:	2201      	movs	r2, #1
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6a1a      	ldr	r2, [r3, #32]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	43db      	mvns	r3, r3
 8003622:	401a      	ands	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a1a      	ldr	r2, [r3, #32]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	431a      	orrs	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800364c:	b480      	push	{r7}
 800364e:	b085      	sub	sp, #20
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365c:	2b01      	cmp	r3, #1
 800365e:	d101      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003660:	2302      	movs	r3, #2
 8003662:	e04f      	b.n	8003704 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a21      	ldr	r2, [pc, #132]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d108      	bne.n	80036a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003694:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a14      	ldr	r2, [pc, #80]	@ (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036cc:	d004      	beq.n	80036d8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a10      	ldr	r2, [pc, #64]	@ (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10c      	bne.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036de:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014000 	.word	0x40014000

08003718 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800372c:	2b01      	cmp	r3, #1
 800372e:	d101      	bne.n	8003734 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003730:	2302      	movs	r3, #2
 8003732:	e060      	b.n	80037f6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4313      	orrs	r3, r2
 8003756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	4313      	orrs	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	4313      	orrs	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	041b      	lsls	r3, r3, #16
 80037aa:	4313      	orrs	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a14      	ldr	r2, [pc, #80]	@ (8003804 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d115      	bne.n	80037e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	051b      	lsls	r3, r3, #20
 80037c4:	4313      	orrs	r3, r2
 80037c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40012c00 	.word	0x40012c00

08003808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e040      	b.n	800389c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7fd f9d0 	bl	8000bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2224      	movs	r2, #36	@ 0x24
 8003834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0201 	bic.w	r2, r2, #1
 8003844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d002      	beq.n	8003854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 faac 	bl	8003dac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f87d 	bl	8003954 <UART_SetConfig>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d101      	bne.n	8003864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e01b      	b.n	800389c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	689a      	ldr	r2, [r3, #8]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fb2b 	bl	8003ef0 <UART_CheckIdleState>
 800389a:	4603      	mov	r3, r0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	@ 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	4613      	mov	r3, r2
 80038b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d137      	bne.n	800392c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d002      	beq.n	80038c8 <HAL_UART_Receive_IT+0x24>
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e030      	b.n	800392e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <HAL_UART_Receive_IT+0x94>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d01f      	beq.n	800391c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d018      	beq.n	800391c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	613b      	str	r3, [r7, #16]
   return(result);
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69f9      	ldr	r1, [r7, #28]
 800390e:	6a3a      	ldr	r2, [r7, #32]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	61bb      	str	r3, [r7, #24]
   return(result);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	461a      	mov	r2, r3
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 fbfa 	bl	800411c <UART_Start_Receive_IT>
 8003928:	4603      	mov	r3, r0
 800392a:	e000      	b.n	800392e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	@ 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40008000 	.word	0x40008000

0800393c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	460b      	mov	r3, r1
 8003946:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003958:	b08a      	sub	sp, #40	@ 0x28
 800395a:	af00      	add	r7, sp, #0
 800395c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	431a      	orrs	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	431a      	orrs	r2, r3
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4313      	orrs	r3, r2
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	4bb4      	ldr	r3, [pc, #720]	@ (8003c54 <UART_SetConfig+0x300>)
 8003984:	4013      	ands	r3, r2
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	6812      	ldr	r2, [r2, #0]
 800398a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398c:	430b      	orrs	r3, r1
 800398e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	68da      	ldr	r2, [r3, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4aa9      	ldr	r2, [pc, #676]	@ (8003c58 <UART_SetConfig+0x304>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039bc:	4313      	orrs	r3, r2
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d0:	430a      	orrs	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4aa0      	ldr	r2, [pc, #640]	@ (8003c5c <UART_SetConfig+0x308>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d126      	bne.n	8003a2c <UART_SetConfig+0xd8>
 80039de:	4ba0      	ldr	r3, [pc, #640]	@ (8003c60 <UART_SetConfig+0x30c>)
 80039e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d81b      	bhi.n	8003a24 <UART_SetConfig+0xd0>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <UART_SetConfig+0xa0>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a15 	.word	0x08003a15
 80039fc:	08003a0d 	.word	0x08003a0d
 8003a00:	08003a1d 	.word	0x08003a1d
 8003a04:	2301      	movs	r3, #1
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a0a:	e080      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a12:	e07c      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a14:	2304      	movs	r3, #4
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a1a:	e078      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a1c:	2308      	movs	r3, #8
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a22:	e074      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a24:	2310      	movs	r3, #16
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2a:	e070      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a8c      	ldr	r2, [pc, #560]	@ (8003c64 <UART_SetConfig+0x310>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d138      	bne.n	8003aa8 <UART_SetConfig+0x154>
 8003a36:	4b8a      	ldr	r3, [pc, #552]	@ (8003c60 <UART_SetConfig+0x30c>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a3c:	f003 030c 	and.w	r3, r3, #12
 8003a40:	2b0c      	cmp	r3, #12
 8003a42:	d82d      	bhi.n	8003aa0 <UART_SetConfig+0x14c>
 8003a44:	a201      	add	r2, pc, #4	@ (adr r2, 8003a4c <UART_SetConfig+0xf8>)
 8003a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a4a:	bf00      	nop
 8003a4c:	08003a81 	.word	0x08003a81
 8003a50:	08003aa1 	.word	0x08003aa1
 8003a54:	08003aa1 	.word	0x08003aa1
 8003a58:	08003aa1 	.word	0x08003aa1
 8003a5c:	08003a91 	.word	0x08003a91
 8003a60:	08003aa1 	.word	0x08003aa1
 8003a64:	08003aa1 	.word	0x08003aa1
 8003a68:	08003aa1 	.word	0x08003aa1
 8003a6c:	08003a89 	.word	0x08003a89
 8003a70:	08003aa1 	.word	0x08003aa1
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003aa1 	.word	0x08003aa1
 8003a7c:	08003a99 	.word	0x08003a99
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a86:	e042      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8e:	e03e      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a90:	2304      	movs	r3, #4
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a96:	e03a      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9e:	e036      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa6:	e032      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6a      	ldr	r2, [pc, #424]	@ (8003c58 <UART_SetConfig+0x304>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12a      	bne.n	8003b08 <UART_SetConfig+0x1b4>
 8003ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8003c60 <UART_SetConfig+0x30c>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003abc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac0:	d01a      	beq.n	8003af8 <UART_SetConfig+0x1a4>
 8003ac2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac6:	d81b      	bhi.n	8003b00 <UART_SetConfig+0x1ac>
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003acc:	d00c      	beq.n	8003ae8 <UART_SetConfig+0x194>
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad2:	d815      	bhi.n	8003b00 <UART_SetConfig+0x1ac>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x18c>
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003adc:	d008      	beq.n	8003af0 <UART_SetConfig+0x19c>
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x1ac>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ae6:	e012      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aee:	e00e      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af6:	e00a      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afe:	e006      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b06:	e002      	b.n	8003b0e <UART_SetConfig+0x1ba>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a51      	ldr	r2, [pc, #324]	@ (8003c58 <UART_SetConfig+0x304>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d17a      	bne.n	8003c0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b1c:	2b08      	cmp	r3, #8
 8003b1e:	d824      	bhi.n	8003b6a <UART_SetConfig+0x216>
 8003b20:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <UART_SetConfig+0x1d4>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003b4d 	.word	0x08003b4d
 8003b2c:	08003b6b 	.word	0x08003b6b
 8003b30:	08003b55 	.word	0x08003b55
 8003b34:	08003b6b 	.word	0x08003b6b
 8003b38:	08003b5b 	.word	0x08003b5b
 8003b3c:	08003b6b 	.word	0x08003b6b
 8003b40:	08003b6b 	.word	0x08003b6b
 8003b44:	08003b6b 	.word	0x08003b6b
 8003b48:	08003b63 	.word	0x08003b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b4c:	f7fe fad8 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003b50:	61f8      	str	r0, [r7, #28]
        break;
 8003b52:	e010      	b.n	8003b76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b54:	4b44      	ldr	r3, [pc, #272]	@ (8003c68 <UART_SetConfig+0x314>)
 8003b56:	61fb      	str	r3, [r7, #28]
        break;
 8003b58:	e00d      	b.n	8003b76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b5a:	f7fe fa39 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	61f8      	str	r0, [r7, #28]
        break;
 8003b60:	e009      	b.n	8003b76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b66:	61fb      	str	r3, [r7, #28]
        break;
 8003b68:	e005      	b.n	8003b76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8107 	beq.w	8003d8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	4413      	add	r3, r2
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d305      	bcc.n	8003b9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d903      	bls.n	8003ba2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003ba0:	e0f4      	b.n	8003d8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	461c      	mov	r4, r3
 8003ba8:	4615      	mov	r5, r2
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	022b      	lsls	r3, r5, #8
 8003bb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bb8:	0222      	lsls	r2, r4, #8
 8003bba:	68f9      	ldr	r1, [r7, #12]
 8003bbc:	6849      	ldr	r1, [r1, #4]
 8003bbe:	0849      	lsrs	r1, r1, #1
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	4688      	mov	r8, r1
 8003bc4:	4681      	mov	r9, r0
 8003bc6:	eb12 0a08 	adds.w	sl, r2, r8
 8003bca:	eb43 0b09 	adc.w	fp, r3, r9
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	603b      	str	r3, [r7, #0]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bdc:	4650      	mov	r0, sl
 8003bde:	4659      	mov	r1, fp
 8003be0:	f7fc fb46 	bl	8000270 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf2:	d308      	bcc.n	8003c06 <UART_SetConfig+0x2b2>
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bfa:	d204      	bcs.n	8003c06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69ba      	ldr	r2, [r7, #24]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e0c2      	b.n	8003d8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c0c:	e0be      	b.n	8003d8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c16:	d16a      	bne.n	8003cee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003c18:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d834      	bhi.n	8003c8a <UART_SetConfig+0x336>
 8003c20:	a201      	add	r2, pc, #4	@ (adr r2, 8003c28 <UART_SetConfig+0x2d4>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c6d 	.word	0x08003c6d
 8003c30:	08003c75 	.word	0x08003c75
 8003c34:	08003c8b 	.word	0x08003c8b
 8003c38:	08003c7b 	.word	0x08003c7b
 8003c3c:	08003c8b 	.word	0x08003c8b
 8003c40:	08003c8b 	.word	0x08003c8b
 8003c44:	08003c8b 	.word	0x08003c8b
 8003c48:	08003c83 	.word	0x08003c83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fa58 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003c50:	61f8      	str	r0, [r7, #28]
        break;
 8003c52:	e020      	b.n	8003c96 <UART_SetConfig+0x342>
 8003c54:	efff69f3 	.word	0xefff69f3
 8003c58:	40008000 	.word	0x40008000
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	40021000 	.word	0x40021000
 8003c64:	40004400 	.word	0x40004400
 8003c68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe fa5e 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8003c70:	61f8      	str	r0, [r7, #28]
        break;
 8003c72:	e010      	b.n	8003c96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c74:	4b4c      	ldr	r3, [pc, #304]	@ (8003da8 <UART_SetConfig+0x454>)
 8003c76:	61fb      	str	r3, [r7, #28]
        break;
 8003c78:	e00d      	b.n	8003c96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c7a:	f7fe f9a9 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003c7e:	61f8      	str	r0, [r7, #28]
        break;
 8003c80:	e009      	b.n	8003c96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c86:	61fb      	str	r3, [r7, #28]
        break;
 8003c88:	e005      	b.n	8003c96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003c94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d077      	beq.n	8003d8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	005a      	lsls	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	441a      	add	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d916      	bls.n	8003ce6 <UART_SetConfig+0x392>
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cbe:	d212      	bcs.n	8003ce6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	f023 030f 	bic.w	r3, r3, #15
 8003cc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	085b      	lsrs	r3, r3, #1
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f003 0307 	and.w	r3, r3, #7
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	8afb      	ldrh	r3, [r7, #22]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	8afa      	ldrh	r2, [r7, #22]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e052      	b.n	8003d8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cec:	e04e      	b.n	8003d8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d827      	bhi.n	8003d46 <UART_SetConfig+0x3f2>
 8003cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cfc <UART_SetConfig+0x3a8>)
 8003cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfc:	08003d21 	.word	0x08003d21
 8003d00:	08003d29 	.word	0x08003d29
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d47 	.word	0x08003d47
 8003d0c:	08003d37 	.word	0x08003d37
 8003d10:	08003d47 	.word	0x08003d47
 8003d14:	08003d47 	.word	0x08003d47
 8003d18:	08003d47 	.word	0x08003d47
 8003d1c:	08003d3f 	.word	0x08003d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d20:	f7fe f9ee 	bl	8002100 <HAL_RCC_GetPCLK1Freq>
 8003d24:	61f8      	str	r0, [r7, #28]
        break;
 8003d26:	e014      	b.n	8003d52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d28:	f7fe fa00 	bl	800212c <HAL_RCC_GetPCLK2Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e010      	b.n	8003d52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d30:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <UART_SetConfig+0x454>)
 8003d32:	61fb      	str	r3, [r7, #28]
        break;
 8003d34:	e00d      	b.n	8003d52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d36:	f7fe f94b 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8003d3a:	61f8      	str	r0, [r7, #28]
        break;
 8003d3c:	e009      	b.n	8003d52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d42:	61fb      	str	r3, [r7, #28]
        break;
 8003d44:	e005      	b.n	8003d52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d50:	bf00      	nop
    }

    if (pclk != 0U)
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d019      	beq.n	8003d8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	085a      	lsrs	r2, r3, #1
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	441a      	add	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b0f      	cmp	r3, #15
 8003d70:	d909      	bls.n	8003d86 <UART_SetConfig+0x432>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d78:	d205      	bcs.n	8003d86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	60da      	str	r2, [r3, #12]
 8003d84:	e002      	b.n	8003d8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d98:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3728      	adds	r7, #40	@ 0x28
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	00f42400 	.word	0x00f42400

08003dac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	f003 0310 	and.w	r3, r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00a      	beq.n	8003e5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00a      	beq.n	8003e80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d01a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eaa:	d10a      	bne.n	8003ec2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b098      	sub	sp, #96	@ 0x60
 8003ef4:	af02      	add	r7, sp, #8
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f00:	f7fd f846 	bl	8000f90 <HAL_GetTick>
 8003f04:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d12e      	bne.n	8003f72 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f14:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f88c 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d021      	beq.n	8003f72 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f36:	e853 3f00 	ldrex	r3, [r3]
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e6      	bne.n	8003f2e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e062      	b.n	8004038 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b04      	cmp	r3, #4
 8003f7e:	d149      	bne.n	8004014 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f856 	bl	8004040 <UART_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03c      	beq.n	8004014 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	e853 3f00 	ldrex	r3, [r3]
 8003fa6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fba:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e6      	bne.n	8003f9a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f023 0301 	bic.w	r3, r3, #1
 8003fe2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	3308      	adds	r3, #8
 8003fea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003fec:	61fa      	str	r2, [r7, #28]
 8003fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	69b9      	ldr	r1, [r7, #24]
 8003ff2:	69fa      	ldr	r2, [r7, #28]
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e5      	bne.n	8003fcc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e011      	b.n	8004038 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2220      	movs	r2, #32
 800401e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3758      	adds	r7, #88	@ 0x58
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	4613      	mov	r3, r2
 800404e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004050:	e04f      	b.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d04b      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800405a:	f7fc ff99 	bl	8000f90 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	429a      	cmp	r2, r3
 8004068:	d302      	bcc.n	8004070 <UART_WaitOnFlagUntilTimeout+0x30>
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e04e      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	d037      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	2b80      	cmp	r3, #128	@ 0x80
 8004086:	d034      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b40      	cmp	r3, #64	@ 0x40
 800408c:	d031      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d110      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2208      	movs	r2, #8
 80040a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f8ff 	bl	80042a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2208      	movs	r2, #8
 80040ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e029      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040cc:	d111      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f8e5 	bl	80042a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e00f      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	d0a0      	beq.n	8004052 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
	...

0800411c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411c:	b480      	push	{r7}
 800411e:	b097      	sub	sp, #92	@ 0x5c
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	4613      	mov	r3, r2
 8004128:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	88fa      	ldrh	r2, [r7, #6]
 8004134:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414e:	d10e      	bne.n	800416e <UART_Start_Receive_IT+0x52>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <UART_Start_Receive_IT+0x48>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800415e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004162:	e02d      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	22ff      	movs	r2, #255	@ 0xff
 8004168:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800416c:	e028      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10d      	bne.n	8004192 <UART_Start_Receive_IT+0x76>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d104      	bne.n	8004188 <UART_Start_Receive_IT+0x6c>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	22ff      	movs	r2, #255	@ 0xff
 8004182:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004186:	e01b      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	227f      	movs	r2, #127	@ 0x7f
 800418c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004190:	e016      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800419a:	d10d      	bne.n	80041b8 <UART_Start_Receive_IT+0x9c>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d104      	bne.n	80041ae <UART_Start_Receive_IT+0x92>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	227f      	movs	r2, #127	@ 0x7f
 80041a8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041ac:	e008      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	223f      	movs	r2, #63	@ 0x3f
 80041b2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80041b6:	e003      	b.n	80041c0 <UART_Start_Receive_IT+0xa4>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2222      	movs	r2, #34	@ 0x22
 80041cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3308      	adds	r3, #8
 80041d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041f0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80041f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80041f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80041fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800420c:	d107      	bne.n	800421e <UART_Start_Receive_IT+0x102>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d103      	bne.n	800421e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4a21      	ldr	r2, [pc, #132]	@ (80042a0 <UART_Start_Receive_IT+0x184>)
 800421a:	669a      	str	r2, [r3, #104]	@ 0x68
 800421c:	e002      	b.n	8004224 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4a20      	ldr	r2, [pc, #128]	@ (80042a4 <UART_Start_Receive_IT+0x188>)
 8004222:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d019      	beq.n	8004260 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004234:	e853 3f00 	ldrex	r3, [r3]
 8004238:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800424a:	637b      	str	r3, [r7, #52]	@ 0x34
 800424c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004250:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004252:	e841 2300 	strex	r3, r2, [r1]
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e6      	bne.n	800422c <UART_Start_Receive_IT+0x110>
 800425e:	e018      	b.n	8004292 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	613b      	str	r3, [r7, #16]
   return(result);
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	f043 0320 	orr.w	r3, r3, #32
 8004274:	653b      	str	r3, [r7, #80]	@ 0x50
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427e:	623b      	str	r3, [r7, #32]
 8004280:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	69f9      	ldr	r1, [r7, #28]
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	61bb      	str	r3, [r7, #24]
   return(result);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e6      	bne.n	8004260 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	375c      	adds	r7, #92	@ 0x5c
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	0800452d 	.word	0x0800452d
 80042a4:	08004371 	.word	0x08004371

080042a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b095      	sub	sp, #84	@ 0x54
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b8:	e853 3f00 	ldrex	r3, [r3]
 80042bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80042be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	461a      	mov	r2, r3
 80042cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80042d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80042d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80042dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e6      	bne.n	80042b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6a3b      	ldr	r3, [r7, #32]
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	f023 0301 	bic.w	r3, r3, #1
 80042f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3308      	adds	r3, #8
 8004300:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004304:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004306:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004308:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800430a:	e841 2300 	strex	r3, r2, [r1]
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004312:	2b00      	cmp	r3, #0
 8004314:	d1e5      	bne.n	80042e2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800431a:	2b01      	cmp	r3, #1
 800431c:	d118      	bne.n	8004350 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	60bb      	str	r3, [r7, #8]
   return(result);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f023 0310 	bic.w	r3, r3, #16
 8004332:	647b      	str	r3, [r7, #68]	@ 0x44
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	461a      	mov	r2, r3
 800433a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6979      	ldr	r1, [r7, #20]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	613b      	str	r3, [r7, #16]
   return(result);
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e6      	bne.n	800431e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2220      	movs	r2, #32
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004364:	bf00      	nop
 8004366:	3754      	adds	r7, #84	@ 0x54
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b09c      	sub	sp, #112	@ 0x70
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800437e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004388:	2b22      	cmp	r3, #34	@ 0x22
 800438a:	f040 80be 	bne.w	800450a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004394:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004398:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800439c:	b2d9      	uxtb	r1, r3
 800439e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043a8:	400a      	ands	r2, r1
 80043aa:	b2d2      	uxtb	r2, r2
 80043ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f040 80a3 	bne.w	800451e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043e0:	e853 3f00 	ldrex	r3, [r3]
 80043e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80043e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80043f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80043fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80043fe:	e841 2300 	strex	r3, r2, [r1]
 8004402:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1e6      	bne.n	80043d8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800441a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441c:	f023 0301 	bic.w	r3, r3, #1
 8004420:	667b      	str	r3, [r7, #100]	@ 0x64
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800442a:	647a      	str	r2, [r7, #68]	@ 0x44
 800442c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004430:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a34      	ldr	r2, [pc, #208]	@ (8004528 <UART_RxISR_8BIT+0x1b8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d01f      	beq.n	800449c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	623b      	str	r3, [r7, #32]
   return(result);
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800447e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004488:	633b      	str	r3, [r7, #48]	@ 0x30
 800448a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d12e      	bne.n	8004502 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d103      	bne.n	80044f2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff fa1e 	bl	800393c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004500:	e00d      	b.n	800451e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fa2e 	bl	8000964 <HAL_UART_RxCpltCallback>
}
 8004508:	e009      	b.n	800451e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	8b1b      	ldrh	r3, [r3, #24]
 8004510:	b29a      	uxth	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0208 	orr.w	r2, r2, #8
 800451a:	b292      	uxth	r2, r2
 800451c:	831a      	strh	r2, [r3, #24]
}
 800451e:	bf00      	nop
 8004520:	3770      	adds	r7, #112	@ 0x70
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40008000 	.word	0x40008000

0800452c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b09c      	sub	sp, #112	@ 0x70
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800453a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004544:	2b22      	cmp	r3, #34	@ 0x22
 8004546:	f040 80be 	bne.w	80046c6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004550:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800455a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800455e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004562:	4013      	ands	r3, r2
 8004564:	b29a      	uxth	r2, r3
 8004566:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004568:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456e:	1c9a      	adds	r2, r3, #2
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	f040 80a3 	bne.w	80046da <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80045a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80045b4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80045b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80045c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e6      	bne.n	8004594 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3308      	adds	r3, #8
 80045e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80045e6:	643a      	str	r2, [r7, #64]	@ 0x40
 80045e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a34      	ldr	r2, [pc, #208]	@ (80046e4 <UART_RxISR_16BIT+0x1b8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d01f      	beq.n	8004658 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d018      	beq.n	8004658 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	e853 3f00 	ldrex	r3, [r3]
 8004632:	61fb      	str	r3, [r7, #28]
   return(result);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800463a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	461a      	mov	r2, r3
 8004642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004646:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e6      	bne.n	8004626 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800465c:	2b01      	cmp	r3, #1
 800465e:	d12e      	bne.n	80046be <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e853 3f00 	ldrex	r3, [r3]
 8004672:	60bb      	str	r3, [r7, #8]
   return(result);
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f023 0310 	bic.w	r3, r3, #16
 800467a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004688:	6979      	ldr	r1, [r7, #20]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	e841 2300 	strex	r3, r2, [r1]
 8004690:	613b      	str	r3, [r7, #16]
   return(result);
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e6      	bne.n	8004666 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	f003 0310 	and.w	r3, r3, #16
 80046a2:	2b10      	cmp	r3, #16
 80046a4:	d103      	bne.n	80046ae <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2210      	movs	r2, #16
 80046ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff f940 	bl	800393c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046bc:	e00d      	b.n	80046da <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fc f950 	bl	8000964 <HAL_UART_RxCpltCallback>
}
 80046c4:	e009      	b.n	80046da <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	8b1b      	ldrh	r3, [r3, #24]
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	b292      	uxth	r2, r2
 80046d8:	831a      	strh	r2, [r3, #24]
}
 80046da:	bf00      	nop
 80046dc:	3770      	adds	r7, #112	@ 0x70
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40008000 	.word	0x40008000

080046e8 <std>:
 80046e8:	2300      	movs	r3, #0
 80046ea:	b510      	push	{r4, lr}
 80046ec:	4604      	mov	r4, r0
 80046ee:	e9c0 3300 	strd	r3, r3, [r0]
 80046f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046f6:	6083      	str	r3, [r0, #8]
 80046f8:	8181      	strh	r1, [r0, #12]
 80046fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80046fc:	81c2      	strh	r2, [r0, #14]
 80046fe:	6183      	str	r3, [r0, #24]
 8004700:	4619      	mov	r1, r3
 8004702:	2208      	movs	r2, #8
 8004704:	305c      	adds	r0, #92	@ 0x5c
 8004706:	f000 f906 	bl	8004916 <memset>
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <std+0x58>)
 800470c:	6263      	str	r3, [r4, #36]	@ 0x24
 800470e:	4b0d      	ldr	r3, [pc, #52]	@ (8004744 <std+0x5c>)
 8004710:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004712:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <std+0x60>)
 8004714:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <std+0x64>)
 8004718:	6323      	str	r3, [r4, #48]	@ 0x30
 800471a:	4b0d      	ldr	r3, [pc, #52]	@ (8004750 <std+0x68>)
 800471c:	6224      	str	r4, [r4, #32]
 800471e:	429c      	cmp	r4, r3
 8004720:	d006      	beq.n	8004730 <std+0x48>
 8004722:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004726:	4294      	cmp	r4, r2
 8004728:	d002      	beq.n	8004730 <std+0x48>
 800472a:	33d0      	adds	r3, #208	@ 0xd0
 800472c:	429c      	cmp	r4, r3
 800472e:	d105      	bne.n	800473c <std+0x54>
 8004730:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004738:	f000 b966 	b.w	8004a08 <__retarget_lock_init_recursive>
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	08004891 	.word	0x08004891
 8004744:	080048b3 	.word	0x080048b3
 8004748:	080048eb 	.word	0x080048eb
 800474c:	0800490f 	.word	0x0800490f
 8004750:	200001c4 	.word	0x200001c4

08004754 <stdio_exit_handler>:
 8004754:	4a02      	ldr	r2, [pc, #8]	@ (8004760 <stdio_exit_handler+0xc>)
 8004756:	4903      	ldr	r1, [pc, #12]	@ (8004764 <stdio_exit_handler+0x10>)
 8004758:	4803      	ldr	r0, [pc, #12]	@ (8004768 <stdio_exit_handler+0x14>)
 800475a:	f000 b869 	b.w	8004830 <_fwalk_sglue>
 800475e:	bf00      	nop
 8004760:	2000000c 	.word	0x2000000c
 8004764:	080052a5 	.word	0x080052a5
 8004768:	2000001c 	.word	0x2000001c

0800476c <cleanup_stdio>:
 800476c:	6841      	ldr	r1, [r0, #4]
 800476e:	4b0c      	ldr	r3, [pc, #48]	@ (80047a0 <cleanup_stdio+0x34>)
 8004770:	4299      	cmp	r1, r3
 8004772:	b510      	push	{r4, lr}
 8004774:	4604      	mov	r4, r0
 8004776:	d001      	beq.n	800477c <cleanup_stdio+0x10>
 8004778:	f000 fd94 	bl	80052a4 <_fflush_r>
 800477c:	68a1      	ldr	r1, [r4, #8]
 800477e:	4b09      	ldr	r3, [pc, #36]	@ (80047a4 <cleanup_stdio+0x38>)
 8004780:	4299      	cmp	r1, r3
 8004782:	d002      	beq.n	800478a <cleanup_stdio+0x1e>
 8004784:	4620      	mov	r0, r4
 8004786:	f000 fd8d 	bl	80052a4 <_fflush_r>
 800478a:	68e1      	ldr	r1, [r4, #12]
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <cleanup_stdio+0x3c>)
 800478e:	4299      	cmp	r1, r3
 8004790:	d004      	beq.n	800479c <cleanup_stdio+0x30>
 8004792:	4620      	mov	r0, r4
 8004794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004798:	f000 bd84 	b.w	80052a4 <_fflush_r>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	bf00      	nop
 80047a0:	200001c4 	.word	0x200001c4
 80047a4:	2000022c 	.word	0x2000022c
 80047a8:	20000294 	.word	0x20000294

080047ac <global_stdio_init.part.0>:
 80047ac:	b510      	push	{r4, lr}
 80047ae:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <global_stdio_init.part.0+0x30>)
 80047b0:	4c0b      	ldr	r4, [pc, #44]	@ (80047e0 <global_stdio_init.part.0+0x34>)
 80047b2:	4a0c      	ldr	r2, [pc, #48]	@ (80047e4 <global_stdio_init.part.0+0x38>)
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	4620      	mov	r0, r4
 80047b8:	2200      	movs	r2, #0
 80047ba:	2104      	movs	r1, #4
 80047bc:	f7ff ff94 	bl	80046e8 <std>
 80047c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047c4:	2201      	movs	r2, #1
 80047c6:	2109      	movs	r1, #9
 80047c8:	f7ff ff8e 	bl	80046e8 <std>
 80047cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047d0:	2202      	movs	r2, #2
 80047d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d6:	2112      	movs	r1, #18
 80047d8:	f7ff bf86 	b.w	80046e8 <std>
 80047dc:	200002fc 	.word	0x200002fc
 80047e0:	200001c4 	.word	0x200001c4
 80047e4:	08004755 	.word	0x08004755

080047e8 <__sfp_lock_acquire>:
 80047e8:	4801      	ldr	r0, [pc, #4]	@ (80047f0 <__sfp_lock_acquire+0x8>)
 80047ea:	f000 b90e 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 80047ee:	bf00      	nop
 80047f0:	20000305 	.word	0x20000305

080047f4 <__sfp_lock_release>:
 80047f4:	4801      	ldr	r0, [pc, #4]	@ (80047fc <__sfp_lock_release+0x8>)
 80047f6:	f000 b909 	b.w	8004a0c <__retarget_lock_release_recursive>
 80047fa:	bf00      	nop
 80047fc:	20000305 	.word	0x20000305

08004800 <__sinit>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4604      	mov	r4, r0
 8004804:	f7ff fff0 	bl	80047e8 <__sfp_lock_acquire>
 8004808:	6a23      	ldr	r3, [r4, #32]
 800480a:	b11b      	cbz	r3, 8004814 <__sinit+0x14>
 800480c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004810:	f7ff bff0 	b.w	80047f4 <__sfp_lock_release>
 8004814:	4b04      	ldr	r3, [pc, #16]	@ (8004828 <__sinit+0x28>)
 8004816:	6223      	str	r3, [r4, #32]
 8004818:	4b04      	ldr	r3, [pc, #16]	@ (800482c <__sinit+0x2c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f5      	bne.n	800480c <__sinit+0xc>
 8004820:	f7ff ffc4 	bl	80047ac <global_stdio_init.part.0>
 8004824:	e7f2      	b.n	800480c <__sinit+0xc>
 8004826:	bf00      	nop
 8004828:	0800476d 	.word	0x0800476d
 800482c:	200002fc 	.word	0x200002fc

08004830 <_fwalk_sglue>:
 8004830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004834:	4607      	mov	r7, r0
 8004836:	4688      	mov	r8, r1
 8004838:	4614      	mov	r4, r2
 800483a:	2600      	movs	r6, #0
 800483c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004840:	f1b9 0901 	subs.w	r9, r9, #1
 8004844:	d505      	bpl.n	8004852 <_fwalk_sglue+0x22>
 8004846:	6824      	ldr	r4, [r4, #0]
 8004848:	2c00      	cmp	r4, #0
 800484a:	d1f7      	bne.n	800483c <_fwalk_sglue+0xc>
 800484c:	4630      	mov	r0, r6
 800484e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004852:	89ab      	ldrh	r3, [r5, #12]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d907      	bls.n	8004868 <_fwalk_sglue+0x38>
 8004858:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800485c:	3301      	adds	r3, #1
 800485e:	d003      	beq.n	8004868 <_fwalk_sglue+0x38>
 8004860:	4629      	mov	r1, r5
 8004862:	4638      	mov	r0, r7
 8004864:	47c0      	blx	r8
 8004866:	4306      	orrs	r6, r0
 8004868:	3568      	adds	r5, #104	@ 0x68
 800486a:	e7e9      	b.n	8004840 <_fwalk_sglue+0x10>

0800486c <iprintf>:
 800486c:	b40f      	push	{r0, r1, r2, r3}
 800486e:	b507      	push	{r0, r1, r2, lr}
 8004870:	4906      	ldr	r1, [pc, #24]	@ (800488c <iprintf+0x20>)
 8004872:	ab04      	add	r3, sp, #16
 8004874:	6808      	ldr	r0, [r1, #0]
 8004876:	f853 2b04 	ldr.w	r2, [r3], #4
 800487a:	6881      	ldr	r1, [r0, #8]
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	f000 f9e9 	bl	8004c54 <_vfiprintf_r>
 8004882:	b003      	add	sp, #12
 8004884:	f85d eb04 	ldr.w	lr, [sp], #4
 8004888:	b004      	add	sp, #16
 800488a:	4770      	bx	lr
 800488c:	20000018 	.word	0x20000018

08004890 <__sread>:
 8004890:	b510      	push	{r4, lr}
 8004892:	460c      	mov	r4, r1
 8004894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004898:	f000 f868 	bl	800496c <_read_r>
 800489c:	2800      	cmp	r0, #0
 800489e:	bfab      	itete	ge
 80048a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048a2:	89a3      	ldrhlt	r3, [r4, #12]
 80048a4:	181b      	addge	r3, r3, r0
 80048a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048aa:	bfac      	ite	ge
 80048ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048ae:	81a3      	strhlt	r3, [r4, #12]
 80048b0:	bd10      	pop	{r4, pc}

080048b2 <__swrite>:
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	461f      	mov	r7, r3
 80048b8:	898b      	ldrh	r3, [r1, #12]
 80048ba:	05db      	lsls	r3, r3, #23
 80048bc:	4605      	mov	r5, r0
 80048be:	460c      	mov	r4, r1
 80048c0:	4616      	mov	r6, r2
 80048c2:	d505      	bpl.n	80048d0 <__swrite+0x1e>
 80048c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c8:	2302      	movs	r3, #2
 80048ca:	2200      	movs	r2, #0
 80048cc:	f000 f83c 	bl	8004948 <_lseek_r>
 80048d0:	89a3      	ldrh	r3, [r4, #12]
 80048d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048da:	81a3      	strh	r3, [r4, #12]
 80048dc:	4632      	mov	r2, r6
 80048de:	463b      	mov	r3, r7
 80048e0:	4628      	mov	r0, r5
 80048e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048e6:	f000 b853 	b.w	8004990 <_write_r>

080048ea <__sseek>:
 80048ea:	b510      	push	{r4, lr}
 80048ec:	460c      	mov	r4, r1
 80048ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f2:	f000 f829 	bl	8004948 <_lseek_r>
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	89a3      	ldrh	r3, [r4, #12]
 80048fa:	bf15      	itete	ne
 80048fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004902:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004906:	81a3      	strheq	r3, [r4, #12]
 8004908:	bf18      	it	ne
 800490a:	81a3      	strhne	r3, [r4, #12]
 800490c:	bd10      	pop	{r4, pc}

0800490e <__sclose>:
 800490e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004912:	f000 b809 	b.w	8004928 <_close_r>

08004916 <memset>:
 8004916:	4402      	add	r2, r0
 8004918:	4603      	mov	r3, r0
 800491a:	4293      	cmp	r3, r2
 800491c:	d100      	bne.n	8004920 <memset+0xa>
 800491e:	4770      	bx	lr
 8004920:	f803 1b01 	strb.w	r1, [r3], #1
 8004924:	e7f9      	b.n	800491a <memset+0x4>
	...

08004928 <_close_r>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4d06      	ldr	r5, [pc, #24]	@ (8004944 <_close_r+0x1c>)
 800492c:	2300      	movs	r3, #0
 800492e:	4604      	mov	r4, r0
 8004930:	4608      	mov	r0, r1
 8004932:	602b      	str	r3, [r5, #0]
 8004934:	f7fc fa1e 	bl	8000d74 <_close>
 8004938:	1c43      	adds	r3, r0, #1
 800493a:	d102      	bne.n	8004942 <_close_r+0x1a>
 800493c:	682b      	ldr	r3, [r5, #0]
 800493e:	b103      	cbz	r3, 8004942 <_close_r+0x1a>
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	bd38      	pop	{r3, r4, r5, pc}
 8004944:	20000300 	.word	0x20000300

08004948 <_lseek_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	4d07      	ldr	r5, [pc, #28]	@ (8004968 <_lseek_r+0x20>)
 800494c:	4604      	mov	r4, r0
 800494e:	4608      	mov	r0, r1
 8004950:	4611      	mov	r1, r2
 8004952:	2200      	movs	r2, #0
 8004954:	602a      	str	r2, [r5, #0]
 8004956:	461a      	mov	r2, r3
 8004958:	f7fc fa33 	bl	8000dc2 <_lseek>
 800495c:	1c43      	adds	r3, r0, #1
 800495e:	d102      	bne.n	8004966 <_lseek_r+0x1e>
 8004960:	682b      	ldr	r3, [r5, #0]
 8004962:	b103      	cbz	r3, 8004966 <_lseek_r+0x1e>
 8004964:	6023      	str	r3, [r4, #0]
 8004966:	bd38      	pop	{r3, r4, r5, pc}
 8004968:	20000300 	.word	0x20000300

0800496c <_read_r>:
 800496c:	b538      	push	{r3, r4, r5, lr}
 800496e:	4d07      	ldr	r5, [pc, #28]	@ (800498c <_read_r+0x20>)
 8004970:	4604      	mov	r4, r0
 8004972:	4608      	mov	r0, r1
 8004974:	4611      	mov	r1, r2
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	f7fc f9c1 	bl	8000d02 <_read>
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d102      	bne.n	800498a <_read_r+0x1e>
 8004984:	682b      	ldr	r3, [r5, #0]
 8004986:	b103      	cbz	r3, 800498a <_read_r+0x1e>
 8004988:	6023      	str	r3, [r4, #0]
 800498a:	bd38      	pop	{r3, r4, r5, pc}
 800498c:	20000300 	.word	0x20000300

08004990 <_write_r>:
 8004990:	b538      	push	{r3, r4, r5, lr}
 8004992:	4d07      	ldr	r5, [pc, #28]	@ (80049b0 <_write_r+0x20>)
 8004994:	4604      	mov	r4, r0
 8004996:	4608      	mov	r0, r1
 8004998:	4611      	mov	r1, r2
 800499a:	2200      	movs	r2, #0
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	f7fc f9cc 	bl	8000d3c <_write>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d102      	bne.n	80049ae <_write_r+0x1e>
 80049a8:	682b      	ldr	r3, [r5, #0]
 80049aa:	b103      	cbz	r3, 80049ae <_write_r+0x1e>
 80049ac:	6023      	str	r3, [r4, #0]
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	20000300 	.word	0x20000300

080049b4 <__errno>:
 80049b4:	4b01      	ldr	r3, [pc, #4]	@ (80049bc <__errno+0x8>)
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	20000018 	.word	0x20000018

080049c0 <__libc_init_array>:
 80049c0:	b570      	push	{r4, r5, r6, lr}
 80049c2:	4d0d      	ldr	r5, [pc, #52]	@ (80049f8 <__libc_init_array+0x38>)
 80049c4:	4c0d      	ldr	r4, [pc, #52]	@ (80049fc <__libc_init_array+0x3c>)
 80049c6:	1b64      	subs	r4, r4, r5
 80049c8:	10a4      	asrs	r4, r4, #2
 80049ca:	2600      	movs	r6, #0
 80049cc:	42a6      	cmp	r6, r4
 80049ce:	d109      	bne.n	80049e4 <__libc_init_array+0x24>
 80049d0:	4d0b      	ldr	r5, [pc, #44]	@ (8004a00 <__libc_init_array+0x40>)
 80049d2:	4c0c      	ldr	r4, [pc, #48]	@ (8004a04 <__libc_init_array+0x44>)
 80049d4:	f000 fdb6 	bl	8005544 <_init>
 80049d8:	1b64      	subs	r4, r4, r5
 80049da:	10a4      	asrs	r4, r4, #2
 80049dc:	2600      	movs	r6, #0
 80049de:	42a6      	cmp	r6, r4
 80049e0:	d105      	bne.n	80049ee <__libc_init_array+0x2e>
 80049e2:	bd70      	pop	{r4, r5, r6, pc}
 80049e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e8:	4798      	blx	r3
 80049ea:	3601      	adds	r6, #1
 80049ec:	e7ee      	b.n	80049cc <__libc_init_array+0xc>
 80049ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f2:	4798      	blx	r3
 80049f4:	3601      	adds	r6, #1
 80049f6:	e7f2      	b.n	80049de <__libc_init_array+0x1e>
 80049f8:	080055f8 	.word	0x080055f8
 80049fc:	080055f8 	.word	0x080055f8
 8004a00:	080055f8 	.word	0x080055f8
 8004a04:	080055fc 	.word	0x080055fc

08004a08 <__retarget_lock_init_recursive>:
 8004a08:	4770      	bx	lr

08004a0a <__retarget_lock_acquire_recursive>:
 8004a0a:	4770      	bx	lr

08004a0c <__retarget_lock_release_recursive>:
 8004a0c:	4770      	bx	lr
	...

08004a10 <_free_r>:
 8004a10:	b538      	push	{r3, r4, r5, lr}
 8004a12:	4605      	mov	r5, r0
 8004a14:	2900      	cmp	r1, #0
 8004a16:	d041      	beq.n	8004a9c <_free_r+0x8c>
 8004a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a1c:	1f0c      	subs	r4, r1, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	bfb8      	it	lt
 8004a22:	18e4      	addlt	r4, r4, r3
 8004a24:	f000 f8e0 	bl	8004be8 <__malloc_lock>
 8004a28:	4a1d      	ldr	r2, [pc, #116]	@ (8004aa0 <_free_r+0x90>)
 8004a2a:	6813      	ldr	r3, [r2, #0]
 8004a2c:	b933      	cbnz	r3, 8004a3c <_free_r+0x2c>
 8004a2e:	6063      	str	r3, [r4, #4]
 8004a30:	6014      	str	r4, [r2, #0]
 8004a32:	4628      	mov	r0, r5
 8004a34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a38:	f000 b8dc 	b.w	8004bf4 <__malloc_unlock>
 8004a3c:	42a3      	cmp	r3, r4
 8004a3e:	d908      	bls.n	8004a52 <_free_r+0x42>
 8004a40:	6820      	ldr	r0, [r4, #0]
 8004a42:	1821      	adds	r1, r4, r0
 8004a44:	428b      	cmp	r3, r1
 8004a46:	bf01      	itttt	eq
 8004a48:	6819      	ldreq	r1, [r3, #0]
 8004a4a:	685b      	ldreq	r3, [r3, #4]
 8004a4c:	1809      	addeq	r1, r1, r0
 8004a4e:	6021      	streq	r1, [r4, #0]
 8004a50:	e7ed      	b.n	8004a2e <_free_r+0x1e>
 8004a52:	461a      	mov	r2, r3
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b10b      	cbz	r3, 8004a5c <_free_r+0x4c>
 8004a58:	42a3      	cmp	r3, r4
 8004a5a:	d9fa      	bls.n	8004a52 <_free_r+0x42>
 8004a5c:	6811      	ldr	r1, [r2, #0]
 8004a5e:	1850      	adds	r0, r2, r1
 8004a60:	42a0      	cmp	r0, r4
 8004a62:	d10b      	bne.n	8004a7c <_free_r+0x6c>
 8004a64:	6820      	ldr	r0, [r4, #0]
 8004a66:	4401      	add	r1, r0
 8004a68:	1850      	adds	r0, r2, r1
 8004a6a:	4283      	cmp	r3, r0
 8004a6c:	6011      	str	r1, [r2, #0]
 8004a6e:	d1e0      	bne.n	8004a32 <_free_r+0x22>
 8004a70:	6818      	ldr	r0, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	6053      	str	r3, [r2, #4]
 8004a76:	4408      	add	r0, r1
 8004a78:	6010      	str	r0, [r2, #0]
 8004a7a:	e7da      	b.n	8004a32 <_free_r+0x22>
 8004a7c:	d902      	bls.n	8004a84 <_free_r+0x74>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	602b      	str	r3, [r5, #0]
 8004a82:	e7d6      	b.n	8004a32 <_free_r+0x22>
 8004a84:	6820      	ldr	r0, [r4, #0]
 8004a86:	1821      	adds	r1, r4, r0
 8004a88:	428b      	cmp	r3, r1
 8004a8a:	bf04      	itt	eq
 8004a8c:	6819      	ldreq	r1, [r3, #0]
 8004a8e:	685b      	ldreq	r3, [r3, #4]
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	bf04      	itt	eq
 8004a94:	1809      	addeq	r1, r1, r0
 8004a96:	6021      	streq	r1, [r4, #0]
 8004a98:	6054      	str	r4, [r2, #4]
 8004a9a:	e7ca      	b.n	8004a32 <_free_r+0x22>
 8004a9c:	bd38      	pop	{r3, r4, r5, pc}
 8004a9e:	bf00      	nop
 8004aa0:	2000030c 	.word	0x2000030c

08004aa4 <sbrk_aligned>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae4 <sbrk_aligned+0x40>)
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	6831      	ldr	r1, [r6, #0]
 8004aac:	4605      	mov	r5, r0
 8004aae:	b911      	cbnz	r1, 8004ab6 <sbrk_aligned+0x12>
 8004ab0:	f000 fcb4 	bl	800541c <_sbrk_r>
 8004ab4:	6030      	str	r0, [r6, #0]
 8004ab6:	4621      	mov	r1, r4
 8004ab8:	4628      	mov	r0, r5
 8004aba:	f000 fcaf 	bl	800541c <_sbrk_r>
 8004abe:	1c43      	adds	r3, r0, #1
 8004ac0:	d103      	bne.n	8004aca <sbrk_aligned+0x26>
 8004ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	bd70      	pop	{r4, r5, r6, pc}
 8004aca:	1cc4      	adds	r4, r0, #3
 8004acc:	f024 0403 	bic.w	r4, r4, #3
 8004ad0:	42a0      	cmp	r0, r4
 8004ad2:	d0f8      	beq.n	8004ac6 <sbrk_aligned+0x22>
 8004ad4:	1a21      	subs	r1, r4, r0
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 fca0 	bl	800541c <_sbrk_r>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d1f2      	bne.n	8004ac6 <sbrk_aligned+0x22>
 8004ae0:	e7ef      	b.n	8004ac2 <sbrk_aligned+0x1e>
 8004ae2:	bf00      	nop
 8004ae4:	20000308 	.word	0x20000308

08004ae8 <_malloc_r>:
 8004ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004aec:	1ccd      	adds	r5, r1, #3
 8004aee:	f025 0503 	bic.w	r5, r5, #3
 8004af2:	3508      	adds	r5, #8
 8004af4:	2d0c      	cmp	r5, #12
 8004af6:	bf38      	it	cc
 8004af8:	250c      	movcc	r5, #12
 8004afa:	2d00      	cmp	r5, #0
 8004afc:	4606      	mov	r6, r0
 8004afe:	db01      	blt.n	8004b04 <_malloc_r+0x1c>
 8004b00:	42a9      	cmp	r1, r5
 8004b02:	d904      	bls.n	8004b0e <_malloc_r+0x26>
 8004b04:	230c      	movs	r3, #12
 8004b06:	6033      	str	r3, [r6, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be4 <_malloc_r+0xfc>
 8004b12:	f000 f869 	bl	8004be8 <__malloc_lock>
 8004b16:	f8d8 3000 	ldr.w	r3, [r8]
 8004b1a:	461c      	mov	r4, r3
 8004b1c:	bb44      	cbnz	r4, 8004b70 <_malloc_r+0x88>
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff ffbf 	bl	8004aa4 <sbrk_aligned>
 8004b26:	1c43      	adds	r3, r0, #1
 8004b28:	4604      	mov	r4, r0
 8004b2a:	d158      	bne.n	8004bde <_malloc_r+0xf6>
 8004b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8004b30:	4627      	mov	r7, r4
 8004b32:	2f00      	cmp	r7, #0
 8004b34:	d143      	bne.n	8004bbe <_malloc_r+0xd6>
 8004b36:	2c00      	cmp	r4, #0
 8004b38:	d04b      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	4630      	mov	r0, r6
 8004b40:	eb04 0903 	add.w	r9, r4, r3
 8004b44:	f000 fc6a 	bl	800541c <_sbrk_r>
 8004b48:	4581      	cmp	r9, r0
 8004b4a:	d142      	bne.n	8004bd2 <_malloc_r+0xea>
 8004b4c:	6821      	ldr	r1, [r4, #0]
 8004b4e:	1a6d      	subs	r5, r5, r1
 8004b50:	4629      	mov	r1, r5
 8004b52:	4630      	mov	r0, r6
 8004b54:	f7ff ffa6 	bl	8004aa4 <sbrk_aligned>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d03a      	beq.n	8004bd2 <_malloc_r+0xea>
 8004b5c:	6823      	ldr	r3, [r4, #0]
 8004b5e:	442b      	add	r3, r5
 8004b60:	6023      	str	r3, [r4, #0]
 8004b62:	f8d8 3000 	ldr.w	r3, [r8]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	bb62      	cbnz	r2, 8004bc4 <_malloc_r+0xdc>
 8004b6a:	f8c8 7000 	str.w	r7, [r8]
 8004b6e:	e00f      	b.n	8004b90 <_malloc_r+0xa8>
 8004b70:	6822      	ldr	r2, [r4, #0]
 8004b72:	1b52      	subs	r2, r2, r5
 8004b74:	d420      	bmi.n	8004bb8 <_malloc_r+0xd0>
 8004b76:	2a0b      	cmp	r2, #11
 8004b78:	d917      	bls.n	8004baa <_malloc_r+0xc2>
 8004b7a:	1961      	adds	r1, r4, r5
 8004b7c:	42a3      	cmp	r3, r4
 8004b7e:	6025      	str	r5, [r4, #0]
 8004b80:	bf18      	it	ne
 8004b82:	6059      	strne	r1, [r3, #4]
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	bf08      	it	eq
 8004b88:	f8c8 1000 	streq.w	r1, [r8]
 8004b8c:	5162      	str	r2, [r4, r5]
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	4630      	mov	r0, r6
 8004b92:	f000 f82f 	bl	8004bf4 <__malloc_unlock>
 8004b96:	f104 000b 	add.w	r0, r4, #11
 8004b9a:	1d23      	adds	r3, r4, #4
 8004b9c:	f020 0007 	bic.w	r0, r0, #7
 8004ba0:	1ac2      	subs	r2, r0, r3
 8004ba2:	bf1c      	itt	ne
 8004ba4:	1a1b      	subne	r3, r3, r0
 8004ba6:	50a3      	strne	r3, [r4, r2]
 8004ba8:	e7af      	b.n	8004b0a <_malloc_r+0x22>
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	42a3      	cmp	r3, r4
 8004bae:	bf0c      	ite	eq
 8004bb0:	f8c8 2000 	streq.w	r2, [r8]
 8004bb4:	605a      	strne	r2, [r3, #4]
 8004bb6:	e7eb      	b.n	8004b90 <_malloc_r+0xa8>
 8004bb8:	4623      	mov	r3, r4
 8004bba:	6864      	ldr	r4, [r4, #4]
 8004bbc:	e7ae      	b.n	8004b1c <_malloc_r+0x34>
 8004bbe:	463c      	mov	r4, r7
 8004bc0:	687f      	ldr	r7, [r7, #4]
 8004bc2:	e7b6      	b.n	8004b32 <_malloc_r+0x4a>
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	42a3      	cmp	r3, r4
 8004bca:	d1fb      	bne.n	8004bc4 <_malloc_r+0xdc>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	6053      	str	r3, [r2, #4]
 8004bd0:	e7de      	b.n	8004b90 <_malloc_r+0xa8>
 8004bd2:	230c      	movs	r3, #12
 8004bd4:	6033      	str	r3, [r6, #0]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f000 f80c 	bl	8004bf4 <__malloc_unlock>
 8004bdc:	e794      	b.n	8004b08 <_malloc_r+0x20>
 8004bde:	6005      	str	r5, [r0, #0]
 8004be0:	e7d6      	b.n	8004b90 <_malloc_r+0xa8>
 8004be2:	bf00      	nop
 8004be4:	2000030c 	.word	0x2000030c

08004be8 <__malloc_lock>:
 8004be8:	4801      	ldr	r0, [pc, #4]	@ (8004bf0 <__malloc_lock+0x8>)
 8004bea:	f7ff bf0e 	b.w	8004a0a <__retarget_lock_acquire_recursive>
 8004bee:	bf00      	nop
 8004bf0:	20000304 	.word	0x20000304

08004bf4 <__malloc_unlock>:
 8004bf4:	4801      	ldr	r0, [pc, #4]	@ (8004bfc <__malloc_unlock+0x8>)
 8004bf6:	f7ff bf09 	b.w	8004a0c <__retarget_lock_release_recursive>
 8004bfa:	bf00      	nop
 8004bfc:	20000304 	.word	0x20000304

08004c00 <__sfputc_r>:
 8004c00:	6893      	ldr	r3, [r2, #8]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	b410      	push	{r4}
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	da08      	bge.n	8004c1e <__sfputc_r+0x1e>
 8004c0c:	6994      	ldr	r4, [r2, #24]
 8004c0e:	42a3      	cmp	r3, r4
 8004c10:	db01      	blt.n	8004c16 <__sfputc_r+0x16>
 8004c12:	290a      	cmp	r1, #10
 8004c14:	d103      	bne.n	8004c1e <__sfputc_r+0x1e>
 8004c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c1a:	f000 bb6b 	b.w	80052f4 <__swbuf_r>
 8004c1e:	6813      	ldr	r3, [r2, #0]
 8004c20:	1c58      	adds	r0, r3, #1
 8004c22:	6010      	str	r0, [r2, #0]
 8004c24:	7019      	strb	r1, [r3, #0]
 8004c26:	4608      	mov	r0, r1
 8004c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <__sfputs_r>:
 8004c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	18d5      	adds	r5, r2, r3
 8004c38:	42ac      	cmp	r4, r5
 8004c3a:	d101      	bne.n	8004c40 <__sfputs_r+0x12>
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	e007      	b.n	8004c50 <__sfputs_r+0x22>
 8004c40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c44:	463a      	mov	r2, r7
 8004c46:	4630      	mov	r0, r6
 8004c48:	f7ff ffda 	bl	8004c00 <__sfputc_r>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d1f3      	bne.n	8004c38 <__sfputs_r+0xa>
 8004c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c54 <_vfiprintf_r>:
 8004c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	460d      	mov	r5, r1
 8004c5a:	b09d      	sub	sp, #116	@ 0x74
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	4698      	mov	r8, r3
 8004c60:	4606      	mov	r6, r0
 8004c62:	b118      	cbz	r0, 8004c6c <_vfiprintf_r+0x18>
 8004c64:	6a03      	ldr	r3, [r0, #32]
 8004c66:	b90b      	cbnz	r3, 8004c6c <_vfiprintf_r+0x18>
 8004c68:	f7ff fdca 	bl	8004800 <__sinit>
 8004c6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c6e:	07d9      	lsls	r1, r3, #31
 8004c70:	d405      	bmi.n	8004c7e <_vfiprintf_r+0x2a>
 8004c72:	89ab      	ldrh	r3, [r5, #12]
 8004c74:	059a      	lsls	r2, r3, #22
 8004c76:	d402      	bmi.n	8004c7e <_vfiprintf_r+0x2a>
 8004c78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c7a:	f7ff fec6 	bl	8004a0a <__retarget_lock_acquire_recursive>
 8004c7e:	89ab      	ldrh	r3, [r5, #12]
 8004c80:	071b      	lsls	r3, r3, #28
 8004c82:	d501      	bpl.n	8004c88 <_vfiprintf_r+0x34>
 8004c84:	692b      	ldr	r3, [r5, #16]
 8004c86:	b99b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x5c>
 8004c88:	4629      	mov	r1, r5
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	f000 fb70 	bl	8005370 <__swsetup_r>
 8004c90:	b170      	cbz	r0, 8004cb0 <_vfiprintf_r+0x5c>
 8004c92:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c94:	07dc      	lsls	r4, r3, #31
 8004c96:	d504      	bpl.n	8004ca2 <_vfiprintf_r+0x4e>
 8004c98:	f04f 30ff 	mov.w	r0, #4294967295
 8004c9c:	b01d      	add	sp, #116	@ 0x74
 8004c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ca2:	89ab      	ldrh	r3, [r5, #12]
 8004ca4:	0598      	lsls	r0, r3, #22
 8004ca6:	d4f7      	bmi.n	8004c98 <_vfiprintf_r+0x44>
 8004ca8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004caa:	f7ff feaf 	bl	8004a0c <__retarget_lock_release_recursive>
 8004cae:	e7f3      	b.n	8004c98 <_vfiprintf_r+0x44>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004cba:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cbe:	2330      	movs	r3, #48	@ 0x30
 8004cc0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004e70 <_vfiprintf_r+0x21c>
 8004cc4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004cc8:	f04f 0901 	mov.w	r9, #1
 8004ccc:	4623      	mov	r3, r4
 8004cce:	469a      	mov	sl, r3
 8004cd0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cd4:	b10a      	cbz	r2, 8004cda <_vfiprintf_r+0x86>
 8004cd6:	2a25      	cmp	r2, #37	@ 0x25
 8004cd8:	d1f9      	bne.n	8004cce <_vfiprintf_r+0x7a>
 8004cda:	ebba 0b04 	subs.w	fp, sl, r4
 8004cde:	d00b      	beq.n	8004cf8 <_vfiprintf_r+0xa4>
 8004ce0:	465b      	mov	r3, fp
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	4630      	mov	r0, r6
 8004ce8:	f7ff ffa1 	bl	8004c2e <__sfputs_r>
 8004cec:	3001      	adds	r0, #1
 8004cee:	f000 80a7 	beq.w	8004e40 <_vfiprintf_r+0x1ec>
 8004cf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cf4:	445a      	add	r2, fp
 8004cf6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 809f 	beq.w	8004e40 <_vfiprintf_r+0x1ec>
 8004d02:	2300      	movs	r3, #0
 8004d04:	f04f 32ff 	mov.w	r2, #4294967295
 8004d08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d0c:	f10a 0a01 	add.w	sl, sl, #1
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	9307      	str	r3, [sp, #28]
 8004d14:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004d18:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d1a:	4654      	mov	r4, sl
 8004d1c:	2205      	movs	r2, #5
 8004d1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d22:	4853      	ldr	r0, [pc, #332]	@ (8004e70 <_vfiprintf_r+0x21c>)
 8004d24:	f7fb fa54 	bl	80001d0 <memchr>
 8004d28:	9a04      	ldr	r2, [sp, #16]
 8004d2a:	b9d8      	cbnz	r0, 8004d64 <_vfiprintf_r+0x110>
 8004d2c:	06d1      	lsls	r1, r2, #27
 8004d2e:	bf44      	itt	mi
 8004d30:	2320      	movmi	r3, #32
 8004d32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d36:	0713      	lsls	r3, r2, #28
 8004d38:	bf44      	itt	mi
 8004d3a:	232b      	movmi	r3, #43	@ 0x2b
 8004d3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004d40:	f89a 3000 	ldrb.w	r3, [sl]
 8004d44:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d46:	d015      	beq.n	8004d74 <_vfiprintf_r+0x120>
 8004d48:	9a07      	ldr	r2, [sp, #28]
 8004d4a:	4654      	mov	r4, sl
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f04f 0c0a 	mov.w	ip, #10
 8004d52:	4621      	mov	r1, r4
 8004d54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d58:	3b30      	subs	r3, #48	@ 0x30
 8004d5a:	2b09      	cmp	r3, #9
 8004d5c:	d94b      	bls.n	8004df6 <_vfiprintf_r+0x1a2>
 8004d5e:	b1b0      	cbz	r0, 8004d8e <_vfiprintf_r+0x13a>
 8004d60:	9207      	str	r2, [sp, #28]
 8004d62:	e014      	b.n	8004d8e <_vfiprintf_r+0x13a>
 8004d64:	eba0 0308 	sub.w	r3, r0, r8
 8004d68:	fa09 f303 	lsl.w	r3, r9, r3
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	46a2      	mov	sl, r4
 8004d72:	e7d2      	b.n	8004d1a <_vfiprintf_r+0xc6>
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	1d19      	adds	r1, r3, #4
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	9103      	str	r1, [sp, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	bfbb      	ittet	lt
 8004d80:	425b      	neglt	r3, r3
 8004d82:	f042 0202 	orrlt.w	r2, r2, #2
 8004d86:	9307      	strge	r3, [sp, #28]
 8004d88:	9307      	strlt	r3, [sp, #28]
 8004d8a:	bfb8      	it	lt
 8004d8c:	9204      	strlt	r2, [sp, #16]
 8004d8e:	7823      	ldrb	r3, [r4, #0]
 8004d90:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d92:	d10a      	bne.n	8004daa <_vfiprintf_r+0x156>
 8004d94:	7863      	ldrb	r3, [r4, #1]
 8004d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d98:	d132      	bne.n	8004e00 <_vfiprintf_r+0x1ac>
 8004d9a:	9b03      	ldr	r3, [sp, #12]
 8004d9c:	1d1a      	adds	r2, r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	9203      	str	r2, [sp, #12]
 8004da2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004da6:	3402      	adds	r4, #2
 8004da8:	9305      	str	r3, [sp, #20]
 8004daa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004e80 <_vfiprintf_r+0x22c>
 8004dae:	7821      	ldrb	r1, [r4, #0]
 8004db0:	2203      	movs	r2, #3
 8004db2:	4650      	mov	r0, sl
 8004db4:	f7fb fa0c 	bl	80001d0 <memchr>
 8004db8:	b138      	cbz	r0, 8004dca <_vfiprintf_r+0x176>
 8004dba:	9b04      	ldr	r3, [sp, #16]
 8004dbc:	eba0 000a 	sub.w	r0, r0, sl
 8004dc0:	2240      	movs	r2, #64	@ 0x40
 8004dc2:	4082      	lsls	r2, r0
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	3401      	adds	r4, #1
 8004dc8:	9304      	str	r3, [sp, #16]
 8004dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dce:	4829      	ldr	r0, [pc, #164]	@ (8004e74 <_vfiprintf_r+0x220>)
 8004dd0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004dd4:	2206      	movs	r2, #6
 8004dd6:	f7fb f9fb 	bl	80001d0 <memchr>
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	d03f      	beq.n	8004e5e <_vfiprintf_r+0x20a>
 8004dde:	4b26      	ldr	r3, [pc, #152]	@ (8004e78 <_vfiprintf_r+0x224>)
 8004de0:	bb1b      	cbnz	r3, 8004e2a <_vfiprintf_r+0x1d6>
 8004de2:	9b03      	ldr	r3, [sp, #12]
 8004de4:	3307      	adds	r3, #7
 8004de6:	f023 0307 	bic.w	r3, r3, #7
 8004dea:	3308      	adds	r3, #8
 8004dec:	9303      	str	r3, [sp, #12]
 8004dee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df0:	443b      	add	r3, r7
 8004df2:	9309      	str	r3, [sp, #36]	@ 0x24
 8004df4:	e76a      	b.n	8004ccc <_vfiprintf_r+0x78>
 8004df6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	2001      	movs	r0, #1
 8004dfe:	e7a8      	b.n	8004d52 <_vfiprintf_r+0xfe>
 8004e00:	2300      	movs	r3, #0
 8004e02:	3401      	adds	r4, #1
 8004e04:	9305      	str	r3, [sp, #20]
 8004e06:	4619      	mov	r1, r3
 8004e08:	f04f 0c0a 	mov.w	ip, #10
 8004e0c:	4620      	mov	r0, r4
 8004e0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e12:	3a30      	subs	r2, #48	@ 0x30
 8004e14:	2a09      	cmp	r2, #9
 8004e16:	d903      	bls.n	8004e20 <_vfiprintf_r+0x1cc>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0c6      	beq.n	8004daa <_vfiprintf_r+0x156>
 8004e1c:	9105      	str	r1, [sp, #20]
 8004e1e:	e7c4      	b.n	8004daa <_vfiprintf_r+0x156>
 8004e20:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e24:	4604      	mov	r4, r0
 8004e26:	2301      	movs	r3, #1
 8004e28:	e7f0      	b.n	8004e0c <_vfiprintf_r+0x1b8>
 8004e2a:	ab03      	add	r3, sp, #12
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	462a      	mov	r2, r5
 8004e30:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <_vfiprintf_r+0x228>)
 8004e32:	a904      	add	r1, sp, #16
 8004e34:	4630      	mov	r0, r6
 8004e36:	f3af 8000 	nop.w
 8004e3a:	4607      	mov	r7, r0
 8004e3c:	1c78      	adds	r0, r7, #1
 8004e3e:	d1d6      	bne.n	8004dee <_vfiprintf_r+0x19a>
 8004e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_vfiprintf_r+0x1fe>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	059a      	lsls	r2, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_vfiprintf_r+0x1fe>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e4e:	f7ff fddd 	bl	8004a0c <__retarget_lock_release_recursive>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	065b      	lsls	r3, r3, #25
 8004e56:	f53f af1f 	bmi.w	8004c98 <_vfiprintf_r+0x44>
 8004e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004e5c:	e71e      	b.n	8004c9c <_vfiprintf_r+0x48>
 8004e5e:	ab03      	add	r3, sp, #12
 8004e60:	9300      	str	r3, [sp, #0]
 8004e62:	462a      	mov	r2, r5
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <_vfiprintf_r+0x228>)
 8004e66:	a904      	add	r1, sp, #16
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f000 f879 	bl	8004f60 <_printf_i>
 8004e6e:	e7e4      	b.n	8004e3a <_vfiprintf_r+0x1e6>
 8004e70:	080055bc 	.word	0x080055bc
 8004e74:	080055c6 	.word	0x080055c6
 8004e78:	00000000 	.word	0x00000000
 8004e7c:	08004c2f 	.word	0x08004c2f
 8004e80:	080055c2 	.word	0x080055c2

08004e84 <_printf_common>:
 8004e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e88:	4616      	mov	r6, r2
 8004e8a:	4698      	mov	r8, r3
 8004e8c:	688a      	ldr	r2, [r1, #8]
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e94:	4293      	cmp	r3, r2
 8004e96:	bfb8      	it	lt
 8004e98:	4613      	movlt	r3, r2
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004ea0:	4607      	mov	r7, r0
 8004ea2:	460c      	mov	r4, r1
 8004ea4:	b10a      	cbz	r2, 8004eaa <_printf_common+0x26>
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	6033      	str	r3, [r6, #0]
 8004eaa:	6823      	ldr	r3, [r4, #0]
 8004eac:	0699      	lsls	r1, r3, #26
 8004eae:	bf42      	ittt	mi
 8004eb0:	6833      	ldrmi	r3, [r6, #0]
 8004eb2:	3302      	addmi	r3, #2
 8004eb4:	6033      	strmi	r3, [r6, #0]
 8004eb6:	6825      	ldr	r5, [r4, #0]
 8004eb8:	f015 0506 	ands.w	r5, r5, #6
 8004ebc:	d106      	bne.n	8004ecc <_printf_common+0x48>
 8004ebe:	f104 0a19 	add.w	sl, r4, #25
 8004ec2:	68e3      	ldr	r3, [r4, #12]
 8004ec4:	6832      	ldr	r2, [r6, #0]
 8004ec6:	1a9b      	subs	r3, r3, r2
 8004ec8:	42ab      	cmp	r3, r5
 8004eca:	dc26      	bgt.n	8004f1a <_printf_common+0x96>
 8004ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	3b00      	subs	r3, #0
 8004ed4:	bf18      	it	ne
 8004ed6:	2301      	movne	r3, #1
 8004ed8:	0692      	lsls	r2, r2, #26
 8004eda:	d42b      	bmi.n	8004f34 <_printf_common+0xb0>
 8004edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	4638      	mov	r0, r7
 8004ee4:	47c8      	blx	r9
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	d01e      	beq.n	8004f28 <_printf_common+0xa4>
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	f003 0306 	and.w	r3, r3, #6
 8004ef2:	2b04      	cmp	r3, #4
 8004ef4:	bf02      	ittt	eq
 8004ef6:	68e5      	ldreq	r5, [r4, #12]
 8004ef8:	6833      	ldreq	r3, [r6, #0]
 8004efa:	1aed      	subeq	r5, r5, r3
 8004efc:	68a3      	ldr	r3, [r4, #8]
 8004efe:	bf0c      	ite	eq
 8004f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f04:	2500      	movne	r5, #0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	bfc4      	itt	gt
 8004f0a:	1a9b      	subgt	r3, r3, r2
 8004f0c:	18ed      	addgt	r5, r5, r3
 8004f0e:	2600      	movs	r6, #0
 8004f10:	341a      	adds	r4, #26
 8004f12:	42b5      	cmp	r5, r6
 8004f14:	d11a      	bne.n	8004f4c <_printf_common+0xc8>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e008      	b.n	8004f2c <_printf_common+0xa8>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	4652      	mov	r2, sl
 8004f1e:	4641      	mov	r1, r8
 8004f20:	4638      	mov	r0, r7
 8004f22:	47c8      	blx	r9
 8004f24:	3001      	adds	r0, #1
 8004f26:	d103      	bne.n	8004f30 <_printf_common+0xac>
 8004f28:	f04f 30ff 	mov.w	r0, #4294967295
 8004f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f30:	3501      	adds	r5, #1
 8004f32:	e7c6      	b.n	8004ec2 <_printf_common+0x3e>
 8004f34:	18e1      	adds	r1, r4, r3
 8004f36:	1c5a      	adds	r2, r3, #1
 8004f38:	2030      	movs	r0, #48	@ 0x30
 8004f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004f3e:	4422      	add	r2, r4
 8004f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004f48:	3302      	adds	r3, #2
 8004f4a:	e7c7      	b.n	8004edc <_printf_common+0x58>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	4622      	mov	r2, r4
 8004f50:	4641      	mov	r1, r8
 8004f52:	4638      	mov	r0, r7
 8004f54:	47c8      	blx	r9
 8004f56:	3001      	adds	r0, #1
 8004f58:	d0e6      	beq.n	8004f28 <_printf_common+0xa4>
 8004f5a:	3601      	adds	r6, #1
 8004f5c:	e7d9      	b.n	8004f12 <_printf_common+0x8e>
	...

08004f60 <_printf_i>:
 8004f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f64:	7e0f      	ldrb	r7, [r1, #24]
 8004f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f68:	2f78      	cmp	r7, #120	@ 0x78
 8004f6a:	4691      	mov	r9, r2
 8004f6c:	4680      	mov	r8, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	469a      	mov	sl, r3
 8004f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f76:	d807      	bhi.n	8004f88 <_printf_i+0x28>
 8004f78:	2f62      	cmp	r7, #98	@ 0x62
 8004f7a:	d80a      	bhi.n	8004f92 <_printf_i+0x32>
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	f000 80d1 	beq.w	8005124 <_printf_i+0x1c4>
 8004f82:	2f58      	cmp	r7, #88	@ 0x58
 8004f84:	f000 80b8 	beq.w	80050f8 <_printf_i+0x198>
 8004f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f90:	e03a      	b.n	8005008 <_printf_i+0xa8>
 8004f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f96:	2b15      	cmp	r3, #21
 8004f98:	d8f6      	bhi.n	8004f88 <_printf_i+0x28>
 8004f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8004fa0 <_printf_i+0x40>)
 8004f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fa0:	08004ff9 	.word	0x08004ff9
 8004fa4:	0800500d 	.word	0x0800500d
 8004fa8:	08004f89 	.word	0x08004f89
 8004fac:	08004f89 	.word	0x08004f89
 8004fb0:	08004f89 	.word	0x08004f89
 8004fb4:	08004f89 	.word	0x08004f89
 8004fb8:	0800500d 	.word	0x0800500d
 8004fbc:	08004f89 	.word	0x08004f89
 8004fc0:	08004f89 	.word	0x08004f89
 8004fc4:	08004f89 	.word	0x08004f89
 8004fc8:	08004f89 	.word	0x08004f89
 8004fcc:	0800510b 	.word	0x0800510b
 8004fd0:	08005037 	.word	0x08005037
 8004fd4:	080050c5 	.word	0x080050c5
 8004fd8:	08004f89 	.word	0x08004f89
 8004fdc:	08004f89 	.word	0x08004f89
 8004fe0:	0800512d 	.word	0x0800512d
 8004fe4:	08004f89 	.word	0x08004f89
 8004fe8:	08005037 	.word	0x08005037
 8004fec:	08004f89 	.word	0x08004f89
 8004ff0:	08004f89 	.word	0x08004f89
 8004ff4:	080050cd 	.word	0x080050cd
 8004ff8:	6833      	ldr	r3, [r6, #0]
 8004ffa:	1d1a      	adds	r2, r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6032      	str	r2, [r6, #0]
 8005000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005008:	2301      	movs	r3, #1
 800500a:	e09c      	b.n	8005146 <_printf_i+0x1e6>
 800500c:	6833      	ldr	r3, [r6, #0]
 800500e:	6820      	ldr	r0, [r4, #0]
 8005010:	1d19      	adds	r1, r3, #4
 8005012:	6031      	str	r1, [r6, #0]
 8005014:	0606      	lsls	r6, r0, #24
 8005016:	d501      	bpl.n	800501c <_printf_i+0xbc>
 8005018:	681d      	ldr	r5, [r3, #0]
 800501a:	e003      	b.n	8005024 <_printf_i+0xc4>
 800501c:	0645      	lsls	r5, r0, #25
 800501e:	d5fb      	bpl.n	8005018 <_printf_i+0xb8>
 8005020:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005024:	2d00      	cmp	r5, #0
 8005026:	da03      	bge.n	8005030 <_printf_i+0xd0>
 8005028:	232d      	movs	r3, #45	@ 0x2d
 800502a:	426d      	negs	r5, r5
 800502c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005030:	4858      	ldr	r0, [pc, #352]	@ (8005194 <_printf_i+0x234>)
 8005032:	230a      	movs	r3, #10
 8005034:	e011      	b.n	800505a <_printf_i+0xfa>
 8005036:	6821      	ldr	r1, [r4, #0]
 8005038:	6833      	ldr	r3, [r6, #0]
 800503a:	0608      	lsls	r0, r1, #24
 800503c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005040:	d402      	bmi.n	8005048 <_printf_i+0xe8>
 8005042:	0649      	lsls	r1, r1, #25
 8005044:	bf48      	it	mi
 8005046:	b2ad      	uxthmi	r5, r5
 8005048:	2f6f      	cmp	r7, #111	@ 0x6f
 800504a:	4852      	ldr	r0, [pc, #328]	@ (8005194 <_printf_i+0x234>)
 800504c:	6033      	str	r3, [r6, #0]
 800504e:	bf14      	ite	ne
 8005050:	230a      	movne	r3, #10
 8005052:	2308      	moveq	r3, #8
 8005054:	2100      	movs	r1, #0
 8005056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800505a:	6866      	ldr	r6, [r4, #4]
 800505c:	60a6      	str	r6, [r4, #8]
 800505e:	2e00      	cmp	r6, #0
 8005060:	db05      	blt.n	800506e <_printf_i+0x10e>
 8005062:	6821      	ldr	r1, [r4, #0]
 8005064:	432e      	orrs	r6, r5
 8005066:	f021 0104 	bic.w	r1, r1, #4
 800506a:	6021      	str	r1, [r4, #0]
 800506c:	d04b      	beq.n	8005106 <_printf_i+0x1a6>
 800506e:	4616      	mov	r6, r2
 8005070:	fbb5 f1f3 	udiv	r1, r5, r3
 8005074:	fb03 5711 	mls	r7, r3, r1, r5
 8005078:	5dc7      	ldrb	r7, [r0, r7]
 800507a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800507e:	462f      	mov	r7, r5
 8005080:	42bb      	cmp	r3, r7
 8005082:	460d      	mov	r5, r1
 8005084:	d9f4      	bls.n	8005070 <_printf_i+0x110>
 8005086:	2b08      	cmp	r3, #8
 8005088:	d10b      	bne.n	80050a2 <_printf_i+0x142>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	07df      	lsls	r7, r3, #31
 800508e:	d508      	bpl.n	80050a2 <_printf_i+0x142>
 8005090:	6923      	ldr	r3, [r4, #16]
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	4299      	cmp	r1, r3
 8005096:	bfde      	ittt	le
 8005098:	2330      	movle	r3, #48	@ 0x30
 800509a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800509e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80050a2:	1b92      	subs	r2, r2, r6
 80050a4:	6122      	str	r2, [r4, #16]
 80050a6:	f8cd a000 	str.w	sl, [sp]
 80050aa:	464b      	mov	r3, r9
 80050ac:	aa03      	add	r2, sp, #12
 80050ae:	4621      	mov	r1, r4
 80050b0:	4640      	mov	r0, r8
 80050b2:	f7ff fee7 	bl	8004e84 <_printf_common>
 80050b6:	3001      	adds	r0, #1
 80050b8:	d14a      	bne.n	8005150 <_printf_i+0x1f0>
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	b004      	add	sp, #16
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f043 0320 	orr.w	r3, r3, #32
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	4832      	ldr	r0, [pc, #200]	@ (8005198 <_printf_i+0x238>)
 80050ce:	2778      	movs	r7, #120	@ 0x78
 80050d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	6831      	ldr	r1, [r6, #0]
 80050d8:	061f      	lsls	r7, r3, #24
 80050da:	f851 5b04 	ldr.w	r5, [r1], #4
 80050de:	d402      	bmi.n	80050e6 <_printf_i+0x186>
 80050e0:	065f      	lsls	r7, r3, #25
 80050e2:	bf48      	it	mi
 80050e4:	b2ad      	uxthmi	r5, r5
 80050e6:	6031      	str	r1, [r6, #0]
 80050e8:	07d9      	lsls	r1, r3, #31
 80050ea:	bf44      	itt	mi
 80050ec:	f043 0320 	orrmi.w	r3, r3, #32
 80050f0:	6023      	strmi	r3, [r4, #0]
 80050f2:	b11d      	cbz	r5, 80050fc <_printf_i+0x19c>
 80050f4:	2310      	movs	r3, #16
 80050f6:	e7ad      	b.n	8005054 <_printf_i+0xf4>
 80050f8:	4826      	ldr	r0, [pc, #152]	@ (8005194 <_printf_i+0x234>)
 80050fa:	e7e9      	b.n	80050d0 <_printf_i+0x170>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	f023 0320 	bic.w	r3, r3, #32
 8005102:	6023      	str	r3, [r4, #0]
 8005104:	e7f6      	b.n	80050f4 <_printf_i+0x194>
 8005106:	4616      	mov	r6, r2
 8005108:	e7bd      	b.n	8005086 <_printf_i+0x126>
 800510a:	6833      	ldr	r3, [r6, #0]
 800510c:	6825      	ldr	r5, [r4, #0]
 800510e:	6961      	ldr	r1, [r4, #20]
 8005110:	1d18      	adds	r0, r3, #4
 8005112:	6030      	str	r0, [r6, #0]
 8005114:	062e      	lsls	r6, r5, #24
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0x1be>
 800511a:	6019      	str	r1, [r3, #0]
 800511c:	e002      	b.n	8005124 <_printf_i+0x1c4>
 800511e:	0668      	lsls	r0, r5, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0x1ba>
 8005122:	8019      	strh	r1, [r3, #0]
 8005124:	2300      	movs	r3, #0
 8005126:	6123      	str	r3, [r4, #16]
 8005128:	4616      	mov	r6, r2
 800512a:	e7bc      	b.n	80050a6 <_printf_i+0x146>
 800512c:	6833      	ldr	r3, [r6, #0]
 800512e:	1d1a      	adds	r2, r3, #4
 8005130:	6032      	str	r2, [r6, #0]
 8005132:	681e      	ldr	r6, [r3, #0]
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	2100      	movs	r1, #0
 8005138:	4630      	mov	r0, r6
 800513a:	f7fb f849 	bl	80001d0 <memchr>
 800513e:	b108      	cbz	r0, 8005144 <_printf_i+0x1e4>
 8005140:	1b80      	subs	r0, r0, r6
 8005142:	6060      	str	r0, [r4, #4]
 8005144:	6863      	ldr	r3, [r4, #4]
 8005146:	6123      	str	r3, [r4, #16]
 8005148:	2300      	movs	r3, #0
 800514a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800514e:	e7aa      	b.n	80050a6 <_printf_i+0x146>
 8005150:	6923      	ldr	r3, [r4, #16]
 8005152:	4632      	mov	r2, r6
 8005154:	4649      	mov	r1, r9
 8005156:	4640      	mov	r0, r8
 8005158:	47d0      	blx	sl
 800515a:	3001      	adds	r0, #1
 800515c:	d0ad      	beq.n	80050ba <_printf_i+0x15a>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	079b      	lsls	r3, r3, #30
 8005162:	d413      	bmi.n	800518c <_printf_i+0x22c>
 8005164:	68e0      	ldr	r0, [r4, #12]
 8005166:	9b03      	ldr	r3, [sp, #12]
 8005168:	4298      	cmp	r0, r3
 800516a:	bfb8      	it	lt
 800516c:	4618      	movlt	r0, r3
 800516e:	e7a6      	b.n	80050be <_printf_i+0x15e>
 8005170:	2301      	movs	r3, #1
 8005172:	4632      	mov	r2, r6
 8005174:	4649      	mov	r1, r9
 8005176:	4640      	mov	r0, r8
 8005178:	47d0      	blx	sl
 800517a:	3001      	adds	r0, #1
 800517c:	d09d      	beq.n	80050ba <_printf_i+0x15a>
 800517e:	3501      	adds	r5, #1
 8005180:	68e3      	ldr	r3, [r4, #12]
 8005182:	9903      	ldr	r1, [sp, #12]
 8005184:	1a5b      	subs	r3, r3, r1
 8005186:	42ab      	cmp	r3, r5
 8005188:	dcf2      	bgt.n	8005170 <_printf_i+0x210>
 800518a:	e7eb      	b.n	8005164 <_printf_i+0x204>
 800518c:	2500      	movs	r5, #0
 800518e:	f104 0619 	add.w	r6, r4, #25
 8005192:	e7f5      	b.n	8005180 <_printf_i+0x220>
 8005194:	080055cd 	.word	0x080055cd
 8005198:	080055de 	.word	0x080055de

0800519c <__sflush_r>:
 800519c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80051a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a4:	0716      	lsls	r6, r2, #28
 80051a6:	4605      	mov	r5, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	d454      	bmi.n	8005256 <__sflush_r+0xba>
 80051ac:	684b      	ldr	r3, [r1, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dc02      	bgt.n	80051b8 <__sflush_r+0x1c>
 80051b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	dd48      	ble.n	800524a <__sflush_r+0xae>
 80051b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051ba:	2e00      	cmp	r6, #0
 80051bc:	d045      	beq.n	800524a <__sflush_r+0xae>
 80051be:	2300      	movs	r3, #0
 80051c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80051c4:	682f      	ldr	r7, [r5, #0]
 80051c6:	6a21      	ldr	r1, [r4, #32]
 80051c8:	602b      	str	r3, [r5, #0]
 80051ca:	d030      	beq.n	800522e <__sflush_r+0x92>
 80051cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	0759      	lsls	r1, r3, #29
 80051d2:	d505      	bpl.n	80051e0 <__sflush_r+0x44>
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	1ad2      	subs	r2, r2, r3
 80051d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80051da:	b10b      	cbz	r3, 80051e0 <__sflush_r+0x44>
 80051dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80051de:	1ad2      	subs	r2, r2, r3
 80051e0:	2300      	movs	r3, #0
 80051e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80051e4:	6a21      	ldr	r1, [r4, #32]
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b0      	blx	r6
 80051ea:	1c43      	adds	r3, r0, #1
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	d106      	bne.n	80051fe <__sflush_r+0x62>
 80051f0:	6829      	ldr	r1, [r5, #0]
 80051f2:	291d      	cmp	r1, #29
 80051f4:	d82b      	bhi.n	800524e <__sflush_r+0xb2>
 80051f6:	4a2a      	ldr	r2, [pc, #168]	@ (80052a0 <__sflush_r+0x104>)
 80051f8:	40ca      	lsrs	r2, r1
 80051fa:	07d6      	lsls	r6, r2, #31
 80051fc:	d527      	bpl.n	800524e <__sflush_r+0xb2>
 80051fe:	2200      	movs	r2, #0
 8005200:	6062      	str	r2, [r4, #4]
 8005202:	04d9      	lsls	r1, r3, #19
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	6022      	str	r2, [r4, #0]
 8005208:	d504      	bpl.n	8005214 <__sflush_r+0x78>
 800520a:	1c42      	adds	r2, r0, #1
 800520c:	d101      	bne.n	8005212 <__sflush_r+0x76>
 800520e:	682b      	ldr	r3, [r5, #0]
 8005210:	b903      	cbnz	r3, 8005214 <__sflush_r+0x78>
 8005212:	6560      	str	r0, [r4, #84]	@ 0x54
 8005214:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005216:	602f      	str	r7, [r5, #0]
 8005218:	b1b9      	cbz	r1, 800524a <__sflush_r+0xae>
 800521a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800521e:	4299      	cmp	r1, r3
 8005220:	d002      	beq.n	8005228 <__sflush_r+0x8c>
 8005222:	4628      	mov	r0, r5
 8005224:	f7ff fbf4 	bl	8004a10 <_free_r>
 8005228:	2300      	movs	r3, #0
 800522a:	6363      	str	r3, [r4, #52]	@ 0x34
 800522c:	e00d      	b.n	800524a <__sflush_r+0xae>
 800522e:	2301      	movs	r3, #1
 8005230:	4628      	mov	r0, r5
 8005232:	47b0      	blx	r6
 8005234:	4602      	mov	r2, r0
 8005236:	1c50      	adds	r0, r2, #1
 8005238:	d1c9      	bne.n	80051ce <__sflush_r+0x32>
 800523a:	682b      	ldr	r3, [r5, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d0c6      	beq.n	80051ce <__sflush_r+0x32>
 8005240:	2b1d      	cmp	r3, #29
 8005242:	d001      	beq.n	8005248 <__sflush_r+0xac>
 8005244:	2b16      	cmp	r3, #22
 8005246:	d11e      	bne.n	8005286 <__sflush_r+0xea>
 8005248:	602f      	str	r7, [r5, #0]
 800524a:	2000      	movs	r0, #0
 800524c:	e022      	b.n	8005294 <__sflush_r+0xf8>
 800524e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005252:	b21b      	sxth	r3, r3
 8005254:	e01b      	b.n	800528e <__sflush_r+0xf2>
 8005256:	690f      	ldr	r7, [r1, #16]
 8005258:	2f00      	cmp	r7, #0
 800525a:	d0f6      	beq.n	800524a <__sflush_r+0xae>
 800525c:	0793      	lsls	r3, r2, #30
 800525e:	680e      	ldr	r6, [r1, #0]
 8005260:	bf08      	it	eq
 8005262:	694b      	ldreq	r3, [r1, #20]
 8005264:	600f      	str	r7, [r1, #0]
 8005266:	bf18      	it	ne
 8005268:	2300      	movne	r3, #0
 800526a:	eba6 0807 	sub.w	r8, r6, r7
 800526e:	608b      	str	r3, [r1, #8]
 8005270:	f1b8 0f00 	cmp.w	r8, #0
 8005274:	dde9      	ble.n	800524a <__sflush_r+0xae>
 8005276:	6a21      	ldr	r1, [r4, #32]
 8005278:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800527a:	4643      	mov	r3, r8
 800527c:	463a      	mov	r2, r7
 800527e:	4628      	mov	r0, r5
 8005280:	47b0      	blx	r6
 8005282:	2800      	cmp	r0, #0
 8005284:	dc08      	bgt.n	8005298 <__sflush_r+0xfc>
 8005286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800528a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800528e:	81a3      	strh	r3, [r4, #12]
 8005290:	f04f 30ff 	mov.w	r0, #4294967295
 8005294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005298:	4407      	add	r7, r0
 800529a:	eba8 0800 	sub.w	r8, r8, r0
 800529e:	e7e7      	b.n	8005270 <__sflush_r+0xd4>
 80052a0:	20400001 	.word	0x20400001

080052a4 <_fflush_r>:
 80052a4:	b538      	push	{r3, r4, r5, lr}
 80052a6:	690b      	ldr	r3, [r1, #16]
 80052a8:	4605      	mov	r5, r0
 80052aa:	460c      	mov	r4, r1
 80052ac:	b913      	cbnz	r3, 80052b4 <_fflush_r+0x10>
 80052ae:	2500      	movs	r5, #0
 80052b0:	4628      	mov	r0, r5
 80052b2:	bd38      	pop	{r3, r4, r5, pc}
 80052b4:	b118      	cbz	r0, 80052be <_fflush_r+0x1a>
 80052b6:	6a03      	ldr	r3, [r0, #32]
 80052b8:	b90b      	cbnz	r3, 80052be <_fflush_r+0x1a>
 80052ba:	f7ff faa1 	bl	8004800 <__sinit>
 80052be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f3      	beq.n	80052ae <_fflush_r+0xa>
 80052c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80052c8:	07d0      	lsls	r0, r2, #31
 80052ca:	d404      	bmi.n	80052d6 <_fflush_r+0x32>
 80052cc:	0599      	lsls	r1, r3, #22
 80052ce:	d402      	bmi.n	80052d6 <_fflush_r+0x32>
 80052d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052d2:	f7ff fb9a 	bl	8004a0a <__retarget_lock_acquire_recursive>
 80052d6:	4628      	mov	r0, r5
 80052d8:	4621      	mov	r1, r4
 80052da:	f7ff ff5f 	bl	800519c <__sflush_r>
 80052de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80052e0:	07da      	lsls	r2, r3, #31
 80052e2:	4605      	mov	r5, r0
 80052e4:	d4e4      	bmi.n	80052b0 <_fflush_r+0xc>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	059b      	lsls	r3, r3, #22
 80052ea:	d4e1      	bmi.n	80052b0 <_fflush_r+0xc>
 80052ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80052ee:	f7ff fb8d 	bl	8004a0c <__retarget_lock_release_recursive>
 80052f2:	e7dd      	b.n	80052b0 <_fflush_r+0xc>

080052f4 <__swbuf_r>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	460e      	mov	r6, r1
 80052f8:	4614      	mov	r4, r2
 80052fa:	4605      	mov	r5, r0
 80052fc:	b118      	cbz	r0, 8005306 <__swbuf_r+0x12>
 80052fe:	6a03      	ldr	r3, [r0, #32]
 8005300:	b90b      	cbnz	r3, 8005306 <__swbuf_r+0x12>
 8005302:	f7ff fa7d 	bl	8004800 <__sinit>
 8005306:	69a3      	ldr	r3, [r4, #24]
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	071a      	lsls	r2, r3, #28
 800530e:	d501      	bpl.n	8005314 <__swbuf_r+0x20>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	b943      	cbnz	r3, 8005326 <__swbuf_r+0x32>
 8005314:	4621      	mov	r1, r4
 8005316:	4628      	mov	r0, r5
 8005318:	f000 f82a 	bl	8005370 <__swsetup_r>
 800531c:	b118      	cbz	r0, 8005326 <__swbuf_r+0x32>
 800531e:	f04f 37ff 	mov.w	r7, #4294967295
 8005322:	4638      	mov	r0, r7
 8005324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	1a98      	subs	r0, r3, r2
 800532c:	6963      	ldr	r3, [r4, #20]
 800532e:	b2f6      	uxtb	r6, r6
 8005330:	4283      	cmp	r3, r0
 8005332:	4637      	mov	r7, r6
 8005334:	dc05      	bgt.n	8005342 <__swbuf_r+0x4e>
 8005336:	4621      	mov	r1, r4
 8005338:	4628      	mov	r0, r5
 800533a:	f7ff ffb3 	bl	80052a4 <_fflush_r>
 800533e:	2800      	cmp	r0, #0
 8005340:	d1ed      	bne.n	800531e <__swbuf_r+0x2a>
 8005342:	68a3      	ldr	r3, [r4, #8]
 8005344:	3b01      	subs	r3, #1
 8005346:	60a3      	str	r3, [r4, #8]
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	6022      	str	r2, [r4, #0]
 800534e:	701e      	strb	r6, [r3, #0]
 8005350:	6962      	ldr	r2, [r4, #20]
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d004      	beq.n	8005362 <__swbuf_r+0x6e>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	07db      	lsls	r3, r3, #31
 800535c:	d5e1      	bpl.n	8005322 <__swbuf_r+0x2e>
 800535e:	2e0a      	cmp	r6, #10
 8005360:	d1df      	bne.n	8005322 <__swbuf_r+0x2e>
 8005362:	4621      	mov	r1, r4
 8005364:	4628      	mov	r0, r5
 8005366:	f7ff ff9d 	bl	80052a4 <_fflush_r>
 800536a:	2800      	cmp	r0, #0
 800536c:	d0d9      	beq.n	8005322 <__swbuf_r+0x2e>
 800536e:	e7d6      	b.n	800531e <__swbuf_r+0x2a>

08005370 <__swsetup_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <__swsetup_r+0xa8>)
 8005374:	4605      	mov	r5, r0
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	460c      	mov	r4, r1
 800537a:	b118      	cbz	r0, 8005384 <__swsetup_r+0x14>
 800537c:	6a03      	ldr	r3, [r0, #32]
 800537e:	b90b      	cbnz	r3, 8005384 <__swsetup_r+0x14>
 8005380:	f7ff fa3e 	bl	8004800 <__sinit>
 8005384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005388:	0719      	lsls	r1, r3, #28
 800538a:	d422      	bmi.n	80053d2 <__swsetup_r+0x62>
 800538c:	06da      	lsls	r2, r3, #27
 800538e:	d407      	bmi.n	80053a0 <__swsetup_r+0x30>
 8005390:	2209      	movs	r2, #9
 8005392:	602a      	str	r2, [r5, #0]
 8005394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	f04f 30ff 	mov.w	r0, #4294967295
 800539e:	e033      	b.n	8005408 <__swsetup_r+0x98>
 80053a0:	0758      	lsls	r0, r3, #29
 80053a2:	d512      	bpl.n	80053ca <__swsetup_r+0x5a>
 80053a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053a6:	b141      	cbz	r1, 80053ba <__swsetup_r+0x4a>
 80053a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <__swsetup_r+0x46>
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fb2d 	bl	8004a10 <_free_r>
 80053b6:	2300      	movs	r3, #0
 80053b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	2300      	movs	r3, #0
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f043 0308 	orr.w	r3, r3, #8
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	b94b      	cbnz	r3, 80053ea <__swsetup_r+0x7a>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e0:	d003      	beq.n	80053ea <__swsetup_r+0x7a>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f84f 	bl	8005488 <__smakebuf_r>
 80053ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ee:	f013 0201 	ands.w	r2, r3, #1
 80053f2:	d00a      	beq.n	800540a <__swsetup_r+0x9a>
 80053f4:	2200      	movs	r2, #0
 80053f6:	60a2      	str	r2, [r4, #8]
 80053f8:	6962      	ldr	r2, [r4, #20]
 80053fa:	4252      	negs	r2, r2
 80053fc:	61a2      	str	r2, [r4, #24]
 80053fe:	6922      	ldr	r2, [r4, #16]
 8005400:	b942      	cbnz	r2, 8005414 <__swsetup_r+0xa4>
 8005402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005406:	d1c5      	bne.n	8005394 <__swsetup_r+0x24>
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	0799      	lsls	r1, r3, #30
 800540c:	bf58      	it	pl
 800540e:	6962      	ldrpl	r2, [r4, #20]
 8005410:	60a2      	str	r2, [r4, #8]
 8005412:	e7f4      	b.n	80053fe <__swsetup_r+0x8e>
 8005414:	2000      	movs	r0, #0
 8005416:	e7f7      	b.n	8005408 <__swsetup_r+0x98>
 8005418:	20000018 	.word	0x20000018

0800541c <_sbrk_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d06      	ldr	r5, [pc, #24]	@ (8005438 <_sbrk_r+0x1c>)
 8005420:	2300      	movs	r3, #0
 8005422:	4604      	mov	r4, r0
 8005424:	4608      	mov	r0, r1
 8005426:	602b      	str	r3, [r5, #0]
 8005428:	f7fb fcd8 	bl	8000ddc <_sbrk>
 800542c:	1c43      	adds	r3, r0, #1
 800542e:	d102      	bne.n	8005436 <_sbrk_r+0x1a>
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	b103      	cbz	r3, 8005436 <_sbrk_r+0x1a>
 8005434:	6023      	str	r3, [r4, #0]
 8005436:	bd38      	pop	{r3, r4, r5, pc}
 8005438:	20000300 	.word	0x20000300

0800543c <__swhatbuf_r>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	460c      	mov	r4, r1
 8005440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005444:	2900      	cmp	r1, #0
 8005446:	b096      	sub	sp, #88	@ 0x58
 8005448:	4615      	mov	r5, r2
 800544a:	461e      	mov	r6, r3
 800544c:	da0d      	bge.n	800546a <__swhatbuf_r+0x2e>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005454:	f04f 0100 	mov.w	r1, #0
 8005458:	bf14      	ite	ne
 800545a:	2340      	movne	r3, #64	@ 0x40
 800545c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005460:	2000      	movs	r0, #0
 8005462:	6031      	str	r1, [r6, #0]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	b016      	add	sp, #88	@ 0x58
 8005468:	bd70      	pop	{r4, r5, r6, pc}
 800546a:	466a      	mov	r2, sp
 800546c:	f000 f848 	bl	8005500 <_fstat_r>
 8005470:	2800      	cmp	r0, #0
 8005472:	dbec      	blt.n	800544e <__swhatbuf_r+0x12>
 8005474:	9901      	ldr	r1, [sp, #4]
 8005476:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800547a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800547e:	4259      	negs	r1, r3
 8005480:	4159      	adcs	r1, r3
 8005482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005486:	e7eb      	b.n	8005460 <__swhatbuf_r+0x24>

08005488 <__smakebuf_r>:
 8005488:	898b      	ldrh	r3, [r1, #12]
 800548a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800548c:	079d      	lsls	r5, r3, #30
 800548e:	4606      	mov	r6, r0
 8005490:	460c      	mov	r4, r1
 8005492:	d507      	bpl.n	80054a4 <__smakebuf_r+0x1c>
 8005494:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	6123      	str	r3, [r4, #16]
 800549c:	2301      	movs	r3, #1
 800549e:	6163      	str	r3, [r4, #20]
 80054a0:	b003      	add	sp, #12
 80054a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054a4:	ab01      	add	r3, sp, #4
 80054a6:	466a      	mov	r2, sp
 80054a8:	f7ff ffc8 	bl	800543c <__swhatbuf_r>
 80054ac:	9f00      	ldr	r7, [sp, #0]
 80054ae:	4605      	mov	r5, r0
 80054b0:	4639      	mov	r1, r7
 80054b2:	4630      	mov	r0, r6
 80054b4:	f7ff fb18 	bl	8004ae8 <_malloc_r>
 80054b8:	b948      	cbnz	r0, 80054ce <__smakebuf_r+0x46>
 80054ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054be:	059a      	lsls	r2, r3, #22
 80054c0:	d4ee      	bmi.n	80054a0 <__smakebuf_r+0x18>
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0302 	orr.w	r3, r3, #2
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	e7e2      	b.n	8005494 <__smakebuf_r+0xc>
 80054ce:	89a3      	ldrh	r3, [r4, #12]
 80054d0:	6020      	str	r0, [r4, #0]
 80054d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	9b01      	ldr	r3, [sp, #4]
 80054da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054de:	b15b      	cbz	r3, 80054f8 <__smakebuf_r+0x70>
 80054e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 f81d 	bl	8005524 <_isatty_r>
 80054ea:	b128      	cbz	r0, 80054f8 <__smakebuf_r+0x70>
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	f023 0303 	bic.w	r3, r3, #3
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	431d      	orrs	r5, r3
 80054fc:	81a5      	strh	r5, [r4, #12]
 80054fe:	e7cf      	b.n	80054a0 <__smakebuf_r+0x18>

08005500 <_fstat_r>:
 8005500:	b538      	push	{r3, r4, r5, lr}
 8005502:	4d07      	ldr	r5, [pc, #28]	@ (8005520 <_fstat_r+0x20>)
 8005504:	2300      	movs	r3, #0
 8005506:	4604      	mov	r4, r0
 8005508:	4608      	mov	r0, r1
 800550a:	4611      	mov	r1, r2
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	f7fb fc3d 	bl	8000d8c <_fstat>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	d102      	bne.n	800551c <_fstat_r+0x1c>
 8005516:	682b      	ldr	r3, [r5, #0]
 8005518:	b103      	cbz	r3, 800551c <_fstat_r+0x1c>
 800551a:	6023      	str	r3, [r4, #0]
 800551c:	bd38      	pop	{r3, r4, r5, pc}
 800551e:	bf00      	nop
 8005520:	20000300 	.word	0x20000300

08005524 <_isatty_r>:
 8005524:	b538      	push	{r3, r4, r5, lr}
 8005526:	4d06      	ldr	r5, [pc, #24]	@ (8005540 <_isatty_r+0x1c>)
 8005528:	2300      	movs	r3, #0
 800552a:	4604      	mov	r4, r0
 800552c:	4608      	mov	r0, r1
 800552e:	602b      	str	r3, [r5, #0]
 8005530:	f7fb fc3c 	bl	8000dac <_isatty>
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	d102      	bne.n	800553e <_isatty_r+0x1a>
 8005538:	682b      	ldr	r3, [r5, #0]
 800553a:	b103      	cbz	r3, 800553e <_isatty_r+0x1a>
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	bd38      	pop	{r3, r4, r5, pc}
 8005540:	20000300 	.word	0x20000300

08005544 <_init>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr

08005550 <_fini>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr
