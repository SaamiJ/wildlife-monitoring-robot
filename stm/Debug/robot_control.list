
robot_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e74  08004e74  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004e74  08004e74  00005e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e7c  08004e7c  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e7c  08004e7c  00005e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004e84  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  08004ee0  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004ee0  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000110d8  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002480  00000000  00000000  00017164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa0  00000000  00000000  000195e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c36  00000000  00000000  0001a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020fb5  00000000  00000000  0001b1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f3f  00000000  00000000  0003c173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c994a  00000000  00000000  0004e0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001179fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000439c  00000000  00000000  00117a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011bddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004d10 	.word	0x08004d10

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08004d10 	.word	0x08004d10

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb4f 	bl	8000b9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f820 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f968 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f936 	bl	8000778 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800050c:	f000 f87c 	bl	8000608 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	4809      	ldr	r0, [pc, #36]	@ (8000538 <main+0x40>)
 8000514:	f002 f926 	bl	8002764 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000518:	2104      	movs	r1, #4
 800051a:	4807      	ldr	r0, [pc, #28]	@ (8000538 <main+0x40>)
 800051c:	f002 f922 	bl	8002764 <HAL_TIM_PWM_Start>
  memset(rx_buffer, 0, sizeof(rx_buffer));
 8000520:	2205      	movs	r2, #5
 8000522:	2100      	movs	r1, #0
 8000524:	4805      	ldr	r0, [pc, #20]	@ (800053c <main+0x44>)
 8000526:	f004 fbc1 	bl	8004cac <memset>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, RX_BUFFER_SIZE);
 800052a:	2205      	movs	r2, #5
 800052c:	4903      	ldr	r1, [pc, #12]	@ (800053c <main+0x44>)
 800052e:	4804      	ldr	r0, [pc, #16]	@ (8000540 <main+0x48>)
 8000530:	f003 f8ae 	bl	8003690 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000534:	bf00      	nop
 8000536:	e7fd      	b.n	8000534 <main+0x3c>
 8000538:	20000078 	.word	0x20000078
 800053c:	2000014c 	.word	0x2000014c
 8000540:	200000c4 	.word	0x200000c4

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	@ 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f004 fbaa 	bl	8004cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056a:	f000 febd 	bl	80012e8 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 f9bc 	bl	80008f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000578:	f000 fe98 	bl	80012ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <SystemClock_Config+0xc0>)
 800057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000582:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <SystemClock_Config+0xc0>)
 8000584:	f023 0318 	bic.w	r3, r3, #24
 8000588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800058c:	2314      	movs	r3, #20
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059c:	2360      	movs	r3, #96	@ 0x60
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a4:	2301      	movs	r3, #1
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005ac:	2328      	movs	r3, #40	@ 0x28
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fee7 	bl	8001394 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005cc:	f000 f990 	bl	80008f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2303      	movs	r3, #3
 80005d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	2104      	movs	r1, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fae7 	bl	8001bbc <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005f4:	f000 f97c 	bl	80008f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f8:	f001 fefa 	bl	80023f0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09a      	sub	sp, #104	@ 0x68
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	222c      	movs	r2, #44	@ 0x2c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f004 fb32 	bl	8004cac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000648:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <MX_TIM1_Init+0x168>)
 800064a:	4a4a      	ldr	r2, [pc, #296]	@ (8000774 <MX_TIM1_Init+0x16c>)
 800064c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800064e:	4b48      	ldr	r3, [pc, #288]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000650:	224f      	movs	r2, #79	@ 0x4f
 8000652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b46      	ldr	r3, [pc, #280]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800065a:	4b45      	ldr	r3, [pc, #276]	@ (8000770 <MX_TIM1_Init+0x168>)
 800065c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b43      	ldr	r3, [pc, #268]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000668:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <MX_TIM1_Init+0x168>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000674:	483e      	ldr	r0, [pc, #248]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000676:	f001 ffbd 	bl	80025f4 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000680:	f000 f936 	bl	80008f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800068e:	4619      	mov	r1, r3
 8000690:	4837      	ldr	r0, [pc, #220]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000692:	f002 fa59 	bl	8002b48 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800069c:	f000 f928 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a0:	4833      	ldr	r0, [pc, #204]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006a2:	f001 fffe 	bl	80026a2 <HAL_TIM_PWM_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006ac:	f000 f920 	bl	80008f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c0:	4619      	mov	r1, r3
 80006c2:	482b      	ldr	r0, [pc, #172]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006c4:	f002 feb8 	bl	8003438 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ce:	f000 f90f 	bl	80008f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2360      	movs	r3, #96	@ 0x60
 80006d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	481e      	ldr	r0, [pc, #120]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006f8:	f002 f912 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000702:	f000 f8f5 	bl	80008f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000706:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070a:	2204      	movs	r2, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000710:	f002 f906 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800071a:	f000 f8e9 	bl	80008f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4807      	ldr	r0, [pc, #28]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000754:	f002 fed6 	bl	8003504 <HAL_TIMEx_ConfigBreakDeadTime>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800075e:	f000 f8c7 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000762:	4803      	ldr	r0, [pc, #12]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000764:	f000 f90e 	bl	8000984 <HAL_TIM_MspPostInit>

}
 8000768:	bf00      	nop
 800076a:	3768      	adds	r7, #104	@ 0x68
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000078 	.word	0x20000078
 8000774:	40012c00 	.word	0x40012c00

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	2204      	movs	r2, #4
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	f002 ff1a 	bl	80035f4 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f893 	bl	80008f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200000c4 	.word	0x200000c4
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xb8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_GPIO_Init+0xb8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	21f0      	movs	r1, #240	@ 0xf0
 800083a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083e:	f000 fd1d 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_GPIO_Init+0xbc>)
 8000848:	f000 fd18 	bl	800127c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800084c:	23f0      	movs	r3, #240	@ 0xf0
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f000 fb9f 	bl	8000fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0xbc>)
 8000882:	f000 fb91 	bl	8000fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // Ensure it's the correct UART instance
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a0c      	ldr	r2, [pc, #48]	@ (80008d8 <HAL_UART_RxCpltCallback+0x40>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d111      	bne.n	80008ce <HAL_UART_RxCpltCallback+0x36>
    {
        // Null-terminate the received string properly
    	rx_buffer[RX_BUFFER_SIZE - 1] = '\0';  // Ensure null termination
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_UART_RxCpltCallback+0x44>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]

        // Ensure the received command is of the correct format (e.g., "F700")
        direction = rx_buffer[0];
 80008b0:	4b0a      	ldr	r3, [pc, #40]	@ (80008dc <HAL_UART_RxCpltCallback+0x44>)
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_UART_RxCpltCallback+0x48>)
 80008b6:	701a      	strb	r2, [r3, #0]
        pwm_value = atoi((char*)&rx_buffer[1]);
 80008b8:	480a      	ldr	r0, [pc, #40]	@ (80008e4 <HAL_UART_RxCpltCallback+0x4c>)
 80008ba:	f004 f96f 	bl	8004b9c <atoi>
 80008be:	4603      	mov	r3, r0
 80008c0:	4a09      	ldr	r2, [pc, #36]	@ (80008e8 <HAL_UART_RxCpltCallback+0x50>)
 80008c2:	6013      	str	r3, [r2, #0]

        // Restart UART receive interrupt mode for continuous reception
        HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, RX_BUFFER_SIZE);
 80008c4:	2205      	movs	r2, #5
 80008c6:	4905      	ldr	r1, [pc, #20]	@ (80008dc <HAL_UART_RxCpltCallback+0x44>)
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <HAL_UART_RxCpltCallback+0x54>)
 80008ca:	f002 fee1 	bl	8003690 <HAL_UART_Receive_IT>
    }
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40004400 	.word	0x40004400
 80008dc:	2000014c 	.word	0x2000014c
 80008e0:	20000151 	.word	0x20000151
 80008e4:	2000014d 	.word	0x2000014d
 80008e8:	20000154 	.word	0x20000154
 80008ec:	200000c4 	.word	0x200000c4

080008f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f4:	b672      	cpsid	i
}
 80008f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <Error_Handler+0x8>

080008fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x44>)
 8000904:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000906:	4a0e      	ldr	r2, [pc, #56]	@ (8000940 <HAL_MspInit+0x44>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	6613      	str	r3, [r2, #96]	@ 0x60
 800090e:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <HAL_MspInit+0x44>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <HAL_MspInit+0x44>)
 800091c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800091e:	4a08      	ldr	r2, [pc, #32]	@ (8000940 <HAL_MspInit+0x44>)
 8000920:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000924:	6593      	str	r3, [r2, #88]	@ 0x58
 8000926:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_MspInit+0x44>)
 8000928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800092a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	370c      	adds	r7, #12
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000

08000944 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <HAL_TIM_Base_MspInit+0x38>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d10b      	bne.n	800096e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000956:	4b0a      	ldr	r3, [pc, #40]	@ (8000980 <HAL_TIM_Base_MspInit+0x3c>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800095a:	4a09      	ldr	r2, [pc, #36]	@ (8000980 <HAL_TIM_Base_MspInit+0x3c>)
 800095c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000960:	6613      	str	r3, [r2, #96]	@ 0x60
 8000962:	4b07      	ldr	r3, [pc, #28]	@ (8000980 <HAL_TIM_Base_MspInit+0x3c>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800096e:	bf00      	nop
 8000970:	3714      	adds	r7, #20
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40012c00 	.word	0x40012c00
 8000980:	40021000 	.word	0x40021000

08000984 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b088      	sub	sp, #32
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <HAL_TIM_MspPostInit+0x68>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d11d      	bne.n	80009e2 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	4b12      	ldr	r3, [pc, #72]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	4a11      	ldr	r2, [pc, #68]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_TIM_MspPostInit+0x6c>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60bb      	str	r3, [r7, #8]
 80009bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009d0:	2301      	movs	r3, #1
 80009d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f000 fae3 	bl	8000fa8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009e2:	bf00      	nop
 80009e4:	3720      	adds	r7, #32
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b09e      	sub	sp, #120	@ 0x78
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0c:	f107 0310 	add.w	r3, r7, #16
 8000a10:	2254      	movs	r2, #84	@ 0x54
 8000a12:	2100      	movs	r1, #0
 8000a14:	4618      	mov	r0, r3
 8000a16:	f004 f949 	bl	8004cac <memset>
  if(huart->Instance==USART2)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a23      	ldr	r2, [pc, #140]	@ (8000aac <HAL_UART_MspInit+0xb8>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d13e      	bne.n	8000aa2 <HAL_UART_MspInit+0xae>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fae7 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a3c:	f7ff ff58 	bl	80008f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a40:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a44:	4a1a      	ldr	r2, [pc, #104]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a54:	60fb      	str	r3, [r7, #12]
 8000a56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a58:	4b15      	ldr	r3, [pc, #84]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a5c:	4a14      	ldr	r2, [pc, #80]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a64:	4b12      	ldr	r3, [pc, #72]	@ (8000ab0 <HAL_UART_MspInit+0xbc>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a70:	230c      	movs	r3, #12
 8000a72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a80:	2307      	movs	r3, #7
 8000a82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a8e:	f000 fa8b 	bl	8000fa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2100      	movs	r1, #0
 8000a96:	2026      	movs	r0, #38	@ 0x26
 8000a98:	f000 f9d1 	bl	8000e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a9c:	2026      	movs	r0, #38	@ 0x26
 8000a9e:	f000 f9ea 	bl	8000e76 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa2:	bf00      	nop
 8000aa4:	3778      	adds	r7, #120	@ 0x78
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40004400 	.word	0x40004400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <NMI_Handler+0x4>

08000abc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac0:	bf00      	nop
 8000ac2:	e7fd      	b.n	8000ac0 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <MemManage_Handler+0x4>

08000acc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad0:	bf00      	nop
 8000ad2:	e7fd      	b.n	8000ad0 <BusFault_Handler+0x4>

08000ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <UsageFault_Handler+0x4>

08000adc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0a:	f000 f89d 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <USART2_IRQHandler+0x10>)
 8000b1a:	f002 fe05 	bl	8003728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000c4 	.word	0x200000c4

08000b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	@ (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b50:	f7ff ffea 	bl	8000b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b54:	480c      	ldr	r0, [pc, #48]	@ (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b56:	490d      	ldr	r1, [pc, #52]	@ (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b58:	4a0d      	ldr	r2, [pc, #52]	@ (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b5c:	e002      	b.n	8000b64 <LoopCopyDataInit>

08000b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b62:	3304      	adds	r3, #4

08000b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b68:	d3f9      	bcc.n	8000b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b70:	e001      	b.n	8000b76 <LoopFillZerobss>

08000b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b74:	3204      	adds	r2, #4

08000b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b78:	d3fb      	bcc.n	8000b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7a:	f004 f8a5 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7e:	f7ff fcbb 	bl	80004f8 <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b90:	08004e84 	.word	0x08004e84
  ldr r2, =_sbss
 8000b94:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b98:	20000294 	.word	0x20000294

08000b9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_IRQHandler>

08000b9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 f93d 	bl	8000e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f80e 	bl	8000bd0 <HAL_InitTick>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	e001      	b.n	8000bc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc0:	f7ff fe9c 	bl	80008fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
	...

08000bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_InitTick+0x6c>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d023      	beq.n	8000c2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <HAL_InitTick+0x70>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <HAL_InitTick+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	4619      	mov	r1, r3
 8000bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f949 	bl	8000e92 <HAL_SYSTICK_Config>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10f      	bne.n	8000c26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d809      	bhi.n	8000c20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f913 	bl	8000e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c18:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <HAL_InitTick+0x74>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
 8000c1e:	e007      	b.n	8000c30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e004      	b.n	8000c30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e001      	b.n	8000c30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	@ (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	@ (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000158 	.word	0x20000158

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	@ (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000158 	.word	0x20000158

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	@ (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	db0b      	blt.n	8000d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cfe:	79fb      	ldrb	r3, [r7, #7]
 8000d00:	f003 021f 	and.w	r2, r3, #31
 8000d04:	4907      	ldr	r1, [pc, #28]	@ (8000d24 <__NVIC_EnableIRQ+0x38>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	095b      	lsrs	r3, r3, #5
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	@ (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
	...

08000de4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3b01      	subs	r3, #1
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df4:	d301      	bcc.n	8000dfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000df6:	2301      	movs	r3, #1
 8000df8:	e00f      	b.n	8000e1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <SysTick_Config+0x40>)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e02:	210f      	movs	r1, #15
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	f7ff ff8e 	bl	8000d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e0c:	4b05      	ldr	r3, [pc, #20]	@ (8000e24 <SysTick_Config+0x40>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e12:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <SysTick_Config+0x40>)
 8000e14:	2207      	movs	r2, #7
 8000e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	e000e010 	.word	0xe000e010

08000e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff ff29 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	4603      	mov	r3, r0
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
 8000e4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e50:	f7ff ff3e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e56:	687a      	ldr	r2, [r7, #4]
 8000e58:	68b9      	ldr	r1, [r7, #8]
 8000e5a:	6978      	ldr	r0, [r7, #20]
 8000e5c:	f7ff ff8e 	bl	8000d7c <NVIC_EncodePriority>
 8000e60:	4602      	mov	r2, r0
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff5d 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e6e:	bf00      	nop
 8000e70:	3718      	adds	r7, #24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff31 	bl	8000cec <__NVIC_EnableIRQ>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ffa2 	bl	8000de4 <SysTick_Config>
 8000ea0:	4603      	mov	r3, r0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	b085      	sub	sp, #20
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d008      	beq.n	8000ed4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e022      	b.n	8000f1a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 020e 	bic.w	r2, r2, #14
 8000ee2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 0201 	bic.w	r2, r2, #1
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef8:	f003 021c 	and.w	r2, r3, #28
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f00:	2101      	movs	r1, #1
 8000f02:	fa01 f202 	lsl.w	r2, r1, r2
 8000f06:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b084      	sub	sp, #16
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d005      	beq.n	8000f4a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2204      	movs	r2, #4
 8000f42:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e029      	b.n	8000f9e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681a      	ldr	r2, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 020e 	bic.w	r2, r2, #14
 8000f58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 0201 	bic.w	r2, r2, #1
 8000f68:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f003 021c 	and.w	r2, r3, #28
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f76:	2101      	movs	r1, #1
 8000f78:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	4798      	blx	r3
    }
  }
  return status;
 8000f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b087      	sub	sp, #28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb6:	e148      	b.n	800124a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f000 813a 	beq.w	8001244 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d005      	beq.n	8000fe8 <HAL_GPIO_Init+0x40>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d130      	bne.n	800104a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	693a      	ldr	r2, [r7, #16]
 8001016:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800101e:	2201      	movs	r2, #1
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	091b      	lsrs	r3, r3, #4
 8001034:	f003 0201 	and.w	r2, r3, #1
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b03      	cmp	r3, #3
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	2203      	movs	r2, #3
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43db      	mvns	r3, r3
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4013      	ands	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	689a      	ldr	r2, [r3, #8]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d123      	bne.n	80010da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	08da      	lsrs	r2, r3, #3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3208      	adds	r2, #8
 800109a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	220f      	movs	r2, #15
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	691a      	ldr	r2, [r3, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	08da      	lsrs	r2, r3, #3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	3208      	adds	r2, #8
 80010d4:	6939      	ldr	r1, [r7, #16]
 80010d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 0203 	and.w	r2, r3, #3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001116:	2b00      	cmp	r3, #0
 8001118:	f000 8094 	beq.w	8001244 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111c:	4b52      	ldr	r3, [pc, #328]	@ (8001268 <HAL_GPIO_Init+0x2c0>)
 800111e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001120:	4a51      	ldr	r2, [pc, #324]	@ (8001268 <HAL_GPIO_Init+0x2c0>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6613      	str	r3, [r2, #96]	@ 0x60
 8001128:	4b4f      	ldr	r3, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x2c0>)
 800112a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001134:	4a4d      	ldr	r2, [pc, #308]	@ (800126c <HAL_GPIO_Init+0x2c4>)
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	220f      	movs	r2, #15
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4013      	ands	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800115e:	d00d      	beq.n	800117c <HAL_GPIO_Init+0x1d4>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a43      	ldr	r2, [pc, #268]	@ (8001270 <HAL_GPIO_Init+0x2c8>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d007      	beq.n	8001178 <HAL_GPIO_Init+0x1d0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a42      	ldr	r2, [pc, #264]	@ (8001274 <HAL_GPIO_Init+0x2cc>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d101      	bne.n	8001174 <HAL_GPIO_Init+0x1cc>
 8001170:	2302      	movs	r3, #2
 8001172:	e004      	b.n	800117e <HAL_GPIO_Init+0x1d6>
 8001174:	2307      	movs	r3, #7
 8001176:	e002      	b.n	800117e <HAL_GPIO_Init+0x1d6>
 8001178:	2301      	movs	r3, #1
 800117a:	e000      	b.n	800117e <HAL_GPIO_Init+0x1d6>
 800117c:	2300      	movs	r3, #0
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	f002 0203 	and.w	r2, r2, #3
 8001184:	0092      	lsls	r2, r2, #2
 8001186:	4093      	lsls	r3, r2
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118e:	4937      	ldr	r1, [pc, #220]	@ (800126c <HAL_GPIO_Init+0x2c4>)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	089b      	lsrs	r3, r3, #2
 8001194:	3302      	adds	r3, #2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800119c:	4b36      	ldr	r3, [pc, #216]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4013      	ands	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011ea:	4a23      	ldr	r2, [pc, #140]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001214:	4a18      	ldr	r2, [pc, #96]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123e:	4a0e      	ldr	r2, [pc, #56]	@ (8001278 <HAL_GPIO_Init+0x2d0>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3301      	adds	r3, #1
 8001248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa22 f303 	lsr.w	r3, r2, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	f47f aeaf 	bne.w	8000fb8 <HAL_GPIO_Init+0x10>
  }
}
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	371c      	adds	r7, #28
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	48000400 	.word	0x48000400
 8001274:	48000800 	.word	0x48000800
 8001278:	40010400 	.word	0x40010400

0800127c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	460b      	mov	r3, r1
 8001286:	807b      	strh	r3, [r7, #2]
 8001288:	4613      	mov	r3, r2
 800128a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800128c:	787b      	ldrb	r3, [r7, #1]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001292:	887a      	ldrh	r2, [r7, #2]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001298:	e002      	b.n	80012a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800129a:	887a      	ldrh	r2, [r7, #2]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012b0:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a04      	ldr	r2, [pc, #16]	@ (80012c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80012b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012ba:	6013      	str	r3, [r2, #0]
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	40007000 	.word	0x40007000

080012cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012d0:	4b04      	ldr	r3, [pc, #16]	@ (80012e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80012d8:	4618      	mov	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40007000 	.word	0x40007000

080012e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b085      	sub	sp, #20
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012f6:	d130      	bne.n	800135a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012f8:	4b23      	ldr	r3, [pc, #140]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001304:	d038      	beq.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800130e:	4a1e      	ldr	r2, [pc, #120]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001314:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001316:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2232      	movs	r2, #50	@ 0x32
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a1b      	ldr	r2, [pc, #108]	@ (8001390 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	0c9b      	lsrs	r3, r3, #18
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800132c:	e002      	b.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3b01      	subs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001334:	4b14      	ldr	r3, [pc, #80]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001340:	d102      	bne.n	8001348 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1f2      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	695b      	ldr	r3, [r3, #20]
 800134c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001354:	d110      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e00f      	b.n	800137a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800135a:	4b0b      	ldr	r3, [pc, #44]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001366:	d007      	beq.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001368:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001370:	4a05      	ldr	r2, [pc, #20]	@ (8001388 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001372:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001376:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	40007000 	.word	0x40007000
 800138c:	20000000 	.word	0x20000000
 8001390:	431bde83 	.word	0x431bde83

08001394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f000 bc02 	b.w	8001bac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4b96      	ldr	r3, [pc, #600]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 030c 	and.w	r3, r3, #12
 80013b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b2:	4b94      	ldr	r3, [pc, #592]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0310 	and.w	r3, r3, #16
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80e4 	beq.w	8001592 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d007      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4c>
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	f040 808b 	bne.w	80014ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	f040 8087 	bne.w	80014ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013e0:	4b88      	ldr	r3, [pc, #544]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <HAL_RCC_OscConfig+0x64>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d101      	bne.n	80013f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e3d9      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1a      	ldr	r2, [r3, #32]
 80013fc:	4b81      	ldr	r3, [pc, #516]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_RCC_OscConfig+0x7e>
 8001408:	4b7e      	ldr	r3, [pc, #504]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001410:	e005      	b.n	800141e <HAL_RCC_OscConfig+0x8a>
 8001412:	4b7c      	ldr	r3, [pc, #496]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001414:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001418:	091b      	lsrs	r3, r3, #4
 800141a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800141e:	4293      	cmp	r3, r2
 8001420:	d223      	bcs.n	800146a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a1b      	ldr	r3, [r3, #32]
 8001426:	4618      	mov	r0, r3
 8001428:	f000 fd8c 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e3ba      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001436:	4b73      	ldr	r3, [pc, #460]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a72      	ldr	r2, [pc, #456]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	496d      	ldr	r1, [pc, #436]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001454:	4b6b      	ldr	r3, [pc, #428]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	021b      	lsls	r3, r3, #8
 8001462:	4968      	ldr	r1, [pc, #416]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
 8001468:	e025      	b.n	80014b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800146a:	4b66      	ldr	r3, [pc, #408]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a65      	ldr	r2, [pc, #404]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4960      	ldr	r1, [pc, #384]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001484:	4313      	orrs	r3, r2
 8001486:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001488:	4b5e      	ldr	r3, [pc, #376]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	495b      	ldr	r1, [pc, #364]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d109      	bne.n	80014b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a1b      	ldr	r3, [r3, #32]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fd4c 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e37a      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b6:	f000 fc81 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 80014ba:	4602      	mov	r2, r0
 80014bc:	4b51      	ldr	r3, [pc, #324]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	4950      	ldr	r1, [pc, #320]	@ (8001608 <HAL_RCC_OscConfig+0x274>)
 80014c8:	5ccb      	ldrb	r3, [r1, r3]
 80014ca:	f003 031f 	and.w	r3, r3, #31
 80014ce:	fa22 f303 	lsr.w	r3, r2, r3
 80014d2:	4a4e      	ldr	r2, [pc, #312]	@ (800160c <HAL_RCC_OscConfig+0x278>)
 80014d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001610 <HAL_RCC_OscConfig+0x27c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fb78 	bl	8000bd0 <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e4:	7bfb      	ldrb	r3, [r7, #15]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d052      	beq.n	8001590 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ea:	7bfb      	ldrb	r3, [r7, #15]
 80014ec:	e35e      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d032      	beq.n	800155c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f6:	4b43      	ldr	r3, [pc, #268]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a42      	ldr	r2, [pc, #264]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001502:	f7ff fbb5 	bl	8000c70 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800150a:	f7ff fbb1 	bl	8000c70 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e347      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800151c:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001528:	4b36      	ldr	r3, [pc, #216]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a35      	ldr	r2, [pc, #212]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800152e:	f043 0308 	orr.w	r3, r3, #8
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4930      	ldr	r1, [pc, #192]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001542:	4313      	orrs	r3, r2
 8001544:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001546:	4b2f      	ldr	r3, [pc, #188]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	021b      	lsls	r3, r3, #8
 8001554:	492b      	ldr	r1, [pc, #172]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
 800155a:	e01a      	b.n	8001592 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800155c:	4b29      	ldr	r3, [pc, #164]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001562:	f023 0301 	bic.w	r3, r3, #1
 8001566:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb82 	bl	8000c70 <HAL_GetTick>
 800156c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156e:	e008      	b.n	8001582 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001570:	f7ff fb7e 	bl	8000c70 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e314      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001582:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x1dc>
 800158e:	e000      	b.n	8001592 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001590:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d073      	beq.n	8001686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x21c>
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b0c      	cmp	r3, #12
 80015a8:	d10e      	bne.n	80015c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d10b      	bne.n	80015c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d063      	beq.n	8001684 <HAL_RCC_OscConfig+0x2f0>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d15f      	bne.n	8001684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2f1      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015d0:	d106      	bne.n	80015e0 <HAL_RCC_OscConfig+0x24c>
 80015d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e025      	b.n	800162c <HAL_RCC_OscConfig+0x298>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015e8:	d114      	bne.n	8001614 <HAL_RCC_OscConfig+0x280>
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a05      	ldr	r2, [pc, #20]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	4b03      	ldr	r3, [pc, #12]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a02      	ldr	r2, [pc, #8]	@ (8001604 <HAL_RCC_OscConfig+0x270>)
 80015fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	e013      	b.n	800162c <HAL_RCC_OscConfig+0x298>
 8001604:	40021000 	.word	0x40021000
 8001608:	08004d28 	.word	0x08004d28
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004
 8001614:	4ba0      	ldr	r3, [pc, #640]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a9f      	ldr	r2, [pc, #636]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800161a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b9d      	ldr	r3, [pc, #628]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a9c      	ldr	r2, [pc, #624]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d013      	beq.n	800165c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fb1c 	bl	8000c70 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fb18 	bl	8000c70 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e2ae      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164e:	4b92      	ldr	r3, [pc, #584]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0f0      	beq.n	800163c <HAL_RCC_OscConfig+0x2a8>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165c:	f7ff fb08 	bl	8000c70 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001664:	f7ff fb04 	bl	8000c70 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b64      	cmp	r3, #100	@ 0x64
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e29a      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001676:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x2d0>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d060      	beq.n	8001754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b04      	cmp	r3, #4
 8001696:	d005      	beq.n	80016a4 <HAL_RCC_OscConfig+0x310>
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d116      	bne.n	80016d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a4:	4b7c      	ldr	r3, [pc, #496]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d005      	beq.n	80016bc <HAL_RCC_OscConfig+0x328>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e277      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b76      	ldr	r3, [pc, #472]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	4973      	ldr	r1, [pc, #460]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d0:	e040      	b.n	8001754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d023      	beq.n	8001722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016da:	4b6f      	ldr	r3, [pc, #444]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6e      	ldr	r2, [pc, #440]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e6:	f7ff fac3 	bl	8000c70 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ee:	f7ff fabf 	bl	8000c70 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e255      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001700:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170c:	4b62      	ldr	r3, [pc, #392]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	061b      	lsls	r3, r3, #24
 800171a:	495f      	ldr	r1, [pc, #380]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e018      	b.n	8001754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001722:	4b5d      	ldr	r3, [pc, #372]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a5c      	ldr	r2, [pc, #368]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800172c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172e:	f7ff fa9f 	bl	8000c70 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fa9b 	bl	8000c70 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e231      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	4b53      	ldr	r3, [pc, #332]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001750:	2b00      	cmp	r3, #0
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03c      	beq.n	80017da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	695b      	ldr	r3, [r3, #20]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001768:	4b4b      	ldr	r3, [pc, #300]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176e:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fa7a 	bl	8000c70 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fa76 	bl	8000c70 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e20c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001792:	4b41      	ldr	r3, [pc, #260]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x3ec>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017a8:	4a3b      	ldr	r2, [pc, #236]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa5d 	bl	8000c70 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ba:	f7ff fa59 	bl	8000c70 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e1ef      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017cc:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 80a6 	beq.w	8001934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d10d      	bne.n	8001814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fc:	4a26      	ldr	r2, [pc, #152]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001802:	6593      	str	r3, [r2, #88]	@ 0x58
 8001804:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001808:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001810:	2301      	movs	r3, #1
 8001812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001814:	4b21      	ldr	r3, [pc, #132]	@ (800189c <HAL_RCC_OscConfig+0x508>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181c:	2b00      	cmp	r3, #0
 800181e:	d118      	bne.n	8001852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <HAL_RCC_OscConfig+0x508>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_RCC_OscConfig+0x508>)
 8001826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800182a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800182c:	f7ff fa20 	bl	8000c70 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001834:	f7ff fa1c 	bl	8000c70 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1b2      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_RCC_OscConfig+0x508>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2b01      	cmp	r3, #1
 8001858:	d108      	bne.n	800186c <HAL_RCC_OscConfig+0x4d8>
 800185a:	4b0f      	ldr	r3, [pc, #60]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800185c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800186a:	e029      	b.n	80018c0 <HAL_RCC_OscConfig+0x52c>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b05      	cmp	r3, #5
 8001872:	d115      	bne.n	80018a0 <HAL_RCC_OscConfig+0x50c>
 8001874:	4b08      	ldr	r3, [pc, #32]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800187a:	4a07      	ldr	r2, [pc, #28]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 8001886:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800188a:	4a03      	ldr	r2, [pc, #12]	@ (8001898 <HAL_RCC_OscConfig+0x504>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001894:	e014      	b.n	80018c0 <HAL_RCC_OscConfig+0x52c>
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018a6:	4a99      	ldr	r2, [pc, #612]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018b0:	4b96      	ldr	r3, [pc, #600]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b6:	4a95      	ldr	r2, [pc, #596]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018b8:	f023 0304 	bic.w	r3, r3, #4
 80018bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d016      	beq.n	80018f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c8:	f7ff f9d2 	bl	8000c70 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d0:	f7ff f9ce 	bl	8000c70 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e162      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e6:	4b89      	ldr	r3, [pc, #548]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80018e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d0ed      	beq.n	80018d0 <HAL_RCC_OscConfig+0x53c>
 80018f4:	e015      	b.n	8001922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f9bb 	bl	8000c70 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018fc:	e00a      	b.n	8001914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff f9b7 	bl	8000c70 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800190c:	4293      	cmp	r3, r2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e14b      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001914:	4b7d      	ldr	r3, [pc, #500]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d1ed      	bne.n	80018fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	2b01      	cmp	r3, #1
 8001926:	d105      	bne.n	8001934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001928:	4b78      	ldr	r3, [pc, #480]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192c:	4a77      	ldr	r2, [pc, #476]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 800192e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001932:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0320 	and.w	r3, r3, #32
 800193c:	2b00      	cmp	r3, #0
 800193e:	d03c      	beq.n	80019ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d01c      	beq.n	8001982 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001948:	4b70      	ldr	r3, [pc, #448]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 800194a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800194e:	4a6f      	ldr	r2, [pc, #444]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f98a 	bl	8000c70 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001960:	f7ff f986 	bl	8000c70 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e11c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001972:	4b66      	ldr	r3, [pc, #408]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001974:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x5cc>
 8001980:	e01b      	b.n	80019ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001982:	4b62      	ldr	r3, [pc, #392]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001984:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001988:	4a60      	ldr	r2, [pc, #384]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff f96d 	bl	8000c70 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199a:	f7ff f969 	bl	8000c70 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e0ff      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019ac:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80019ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1ef      	bne.n	800199a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80f3 	beq.w	8001baa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 80c9 	bne.w	8001b60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ce:	4b4f      	ldr	r3, [pc, #316]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0203 	and.w	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	429a      	cmp	r2, r3
 80019e0:	d12c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ec:	3b01      	subs	r3, #1
 80019ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d123      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d11b      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d113      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	3b01      	subs	r3, #1
 8001a22:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	085b      	lsrs	r3, r3, #1
 8001a34:	3b01      	subs	r3, #1
 8001a36:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d06b      	beq.n	8001b14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	d062      	beq.n	8001b08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a42:	4b32      	ldr	r3, [pc, #200]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0ac      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a52:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a2d      	ldr	r2, [pc, #180]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5e:	f7ff f907 	bl	8000c70 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff f903 	bl	8000c70 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e099      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a78:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1f0      	bne.n	8001a66 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001a86:	68da      	ldr	r2, [r3, #12]
 8001a88:	4b21      	ldr	r3, [pc, #132]	@ (8001b10 <HAL_RCC_OscConfig+0x77c>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0112      	lsls	r2, r2, #4
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a9e:	0212      	lsls	r2, r2, #8
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001aa6:	0852      	lsrs	r2, r2, #1
 8001aa8:	3a01      	subs	r2, #1
 8001aaa:	0552      	lsls	r2, r2, #21
 8001aac:	4311      	orrs	r1, r2
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ab2:	0852      	lsrs	r2, r2, #1
 8001ab4:	3a01      	subs	r2, #1
 8001ab6:	0652      	lsls	r2, r2, #25
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001abe:	06d2      	lsls	r2, r2, #27
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4912      	ldr	r1, [pc, #72]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a0f      	ldr	r2, [pc, #60]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7ff f8c6 	bl	8000c70 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f8c2 	bl	8000c70 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e058      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <HAL_RCC_OscConfig+0x778>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b06:	e050      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04f      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b14:	4b27      	ldr	r3, [pc, #156]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d144      	bne.n	8001baa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a23      	ldr	r2, [pc, #140]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b2c:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	4a20      	ldr	r2, [pc, #128]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b38:	f7ff f89a 	bl	8000c70 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f896 	bl	8000c70 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e02c      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b18      	ldr	r3, [pc, #96]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x7ac>
 8001b5e:	e024      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	2b0c      	cmp	r3, #12
 8001b64:	d01f      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b66:	4b13      	ldr	r3, [pc, #76]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a12      	ldr	r2, [pc, #72]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b72:	f7ff f87d 	bl	8000c70 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b7a:	f7ff f879 	bl	8000c70 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e00f      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1f0      	bne.n	8001b7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4905      	ldr	r1, [pc, #20]	@ (8001bb4 <HAL_RCC_OscConfig+0x820>)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x824>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e001      	b.n	8001baa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	feeefffc 	.word	0xfeeefffc

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0e7      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b75      	ldr	r3, [pc, #468]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b72      	ldr	r3, [pc, #456]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4970      	ldr	r1, [pc, #448]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cf      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0a6      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e09a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c72:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e086      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b46      	ldr	r3, [pc, #280]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4943      	ldr	r1, [pc, #268]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7fe ffe4 	bl	8000c70 <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7fe ffe0 	bl	8000c70 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e06e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	492b      	ldr	r1, [pc, #172]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d02:	4b29      	ldr	r3, [pc, #164]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d210      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0207 	bic.w	r2, r3, #7
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e036      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4918      	ldr	r1, [pc, #96]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4910      	ldr	r1, [pc, #64]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 f824 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	490b      	ldr	r1, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ff1b 	bl	8000bd0 <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004d28 	.word	0x08004d28
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d11e      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e18:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e004      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d134      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xac>
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	617b      	str	r3, [r7, #20]
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0e5b      	lsrs	r3, r3, #25
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08004d40 	.word	0x08004d40
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004d38 	.word	0x08004d38

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f1c:	f7ff ffda 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004d38 	.word	0x08004d38

08001f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f9b6 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
 8001f62:	e014      	b.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f9a6 	bl	80012cc <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f94:	d10b      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d919      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fa0:	d902      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e010      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d902      	bls.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	@ 0x80
 8001fbe:	d102      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	@ 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4909      	ldr	r1, [pc, #36]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800200c:	2300      	movs	r3, #0
 800200e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d031      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002028:	d01a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800202a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800202e:	d814      	bhi.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002030:	2b00      	cmp	r3, #0
 8002032:	d009      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002034:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002038:	d10f      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800203a:	4b5d      	ldr	r3, [pc, #372]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	4a5c      	ldr	r2, [pc, #368]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002044:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002046:	e00c      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3304      	adds	r3, #4
 800204c:	2100      	movs	r1, #0
 800204e:	4618      	mov	r0, r3
 8002050:	f000 f9de 	bl	8002410 <RCCEx_PLLSAI1_Config>
 8002054:	4603      	mov	r3, r0
 8002056:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002058:	e003      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	74fb      	strb	r3, [r7, #19]
      break;
 800205e:	e000      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002060:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002062:	7cfb      	ldrb	r3, [r7, #19]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10b      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002068:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	494e      	ldr	r1, [pc, #312]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800207e:	e001      	b.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002080:	7cfb      	ldrb	r3, [r7, #19]
 8002082:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 809e 	beq.w	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020a6:	2300      	movs	r3, #0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ac:	4b40      	ldr	r3, [pc, #256]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020b0:	4a3f      	ldr	r2, [pc, #252]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80020b8:	4b3d      	ldr	r3, [pc, #244]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b3a      	ldr	r3, [pc, #232]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a39      	ldr	r2, [pc, #228]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fdcc 	bl	8000c70 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020da:	e009      	b.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020dc:	f7fe fdc8 	bl	8000c70 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d902      	bls.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	74fb      	strb	r3, [r7, #19]
        break;
 80020ee:	e005      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f0:	4b30      	ldr	r3, [pc, #192]	@ (80021b4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0ef      	beq.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020fc:	7cfb      	ldrb	r3, [r7, #19]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d15a      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002102:	4b2b      	ldr	r3, [pc, #172]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002108:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01e      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	429a      	cmp	r2, r3
 800211c:	d019      	beq.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800211e:	4b24      	ldr	r3, [pc, #144]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002128:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800212a:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	4a1f      	ldr	r2, [pc, #124]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002132:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002136:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800213a:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800213c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002140:	4a1b      	ldr	r2, [pc, #108]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002146:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800214a:	4a19      	ldr	r2, [pc, #100]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d016      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fd88 	bl	8000c70 <HAL_GetTick>
 8002160:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002162:	e00b      	b.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe fd84 	bl	8000c70 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d902      	bls.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	74fb      	strb	r3, [r7, #19]
            break;
 800217a:	e006      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217c:	4b0c      	ldr	r3, [pc, #48]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ec      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10b      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002190:	4b07      	ldr	r3, [pc, #28]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002196:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800219e:	4904      	ldr	r1, [pc, #16]	@ (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80021a6:	e009      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021a8:	7cfb      	ldrb	r3, [r7, #19]
 80021aa:	74bb      	strb	r3, [r7, #18]
 80021ac:	e006      	b.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021b8:	7cfb      	ldrb	r3, [r7, #19]
 80021ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021bc:	7c7b      	ldrb	r3, [r7, #17]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d105      	bne.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c2:	4b8a      	ldr	r3, [pc, #552]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	4a89      	ldr	r2, [pc, #548]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021cc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d00a      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021da:	4b84      	ldr	r3, [pc, #528]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e0:	f023 0203 	bic.w	r2, r3, #3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4980      	ldr	r1, [pc, #512]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d00a      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021fc:	4b7b      	ldr	r3, [pc, #492]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002202:	f023 020c 	bic.w	r2, r3, #12
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220a:	4978      	ldr	r1, [pc, #480]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	4313      	orrs	r3, r2
 800220e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0320 	and.w	r3, r3, #32
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00a      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800221e:	4b73      	ldr	r3, [pc, #460]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002224:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800222c:	496f      	ldr	r1, [pc, #444]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00a      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002240:	4b6a      	ldr	r3, [pc, #424]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002246:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800224e:	4967      	ldr	r1, [pc, #412]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002250:	4313      	orrs	r3, r2
 8002252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00a      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002262:	4b62      	ldr	r3, [pc, #392]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002270:	495e      	ldr	r1, [pc, #376]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002284:	4b59      	ldr	r3, [pc, #356]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	4956      	ldr	r1, [pc, #344]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002294:	4313      	orrs	r3, r2
 8002296:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022a6:	4b51      	ldr	r3, [pc, #324]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b4:	494d      	ldr	r1, [pc, #308]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d028      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c8:	4b48      	ldr	r3, [pc, #288]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d6:	4945      	ldr	r1, [pc, #276]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022e6:	d106      	bne.n	80022f6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e8:	4b40      	ldr	r3, [pc, #256]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	4a3f      	ldr	r2, [pc, #252]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022f2:	60d3      	str	r3, [r2, #12]
 80022f4:	e011      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022fe:	d10c      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	2101      	movs	r1, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f882 	bl	8002410 <RCCEx_PLLSAI1_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d028      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002326:	4b31      	ldr	r3, [pc, #196]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	492d      	ldr	r1, [pc, #180]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002344:	d106      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002346:	4b29      	ldr	r3, [pc, #164]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a28      	ldr	r2, [pc, #160]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002350:	60d3      	str	r3, [r2, #12]
 8002352:	e011      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002358:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800235c:	d10c      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3304      	adds	r3, #4
 8002362:	2101      	movs	r1, #1
 8002364:	4618      	mov	r0, r3
 8002366:	f000 f853 	bl	8002410 <RCCEx_PLLSAI1_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800236e:	7cfb      	ldrb	r3, [r7, #19]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002374:	7cfb      	ldrb	r3, [r7, #19]
 8002376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01c      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002384:	4b19      	ldr	r3, [pc, #100]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002392:	4916      	ldr	r1, [pc, #88]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800239e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80023a2:	d10c      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	3304      	adds	r3, #4
 80023a8:	2102      	movs	r1, #2
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 f830 	bl	8002410 <RCCEx_PLLSAI1_Config>
 80023b0:	4603      	mov	r3, r0
 80023b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00a      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023ca:	4b08      	ldr	r3, [pc, #32]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023d8:	4904      	ldr	r1, [pc, #16]	@ (80023ec <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023e0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80023f4:	4b05      	ldr	r3, [pc, #20]	@ (800240c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80023fa:	f043 0304 	orr.w	r3, r3, #4
 80023fe:	6013      	str	r3, [r2, #0]
}
 8002400:	bf00      	nop
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000

08002410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800241e:	4b74      	ldr	r3, [pc, #464]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d018      	beq.n	800245c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800242a:	4b71      	ldr	r3, [pc, #452]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f003 0203 	and.w	r2, r3, #3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d10d      	bne.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
       ||
 800243e:	2b00      	cmp	r3, #0
 8002440:	d009      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002442:	4b6b      	ldr	r3, [pc, #428]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	f003 0307 	and.w	r3, r3, #7
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
       ||
 8002452:	429a      	cmp	r2, r3
 8002454:	d047      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	73fb      	strb	r3, [r7, #15]
 800245a:	e044      	b.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b03      	cmp	r3, #3
 8002462:	d018      	beq.n	8002496 <RCCEx_PLLSAI1_Config+0x86>
 8002464:	2b03      	cmp	r3, #3
 8002466:	d825      	bhi.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002468:	2b01      	cmp	r3, #1
 800246a:	d002      	beq.n	8002472 <RCCEx_PLLSAI1_Config+0x62>
 800246c:	2b02      	cmp	r3, #2
 800246e:	d009      	beq.n	8002484 <RCCEx_PLLSAI1_Config+0x74>
 8002470:	e020      	b.n	80024b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002472:	4b5f      	ldr	r3, [pc, #380]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d11d      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002482:	e01a      	b.n	80024ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002484:	4b5a      	ldr	r3, [pc, #360]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d116      	bne.n	80024be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002494:	e013      	b.n	80024be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002496:	4b56      	ldr	r3, [pc, #344]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10f      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024a2:	4b53      	ldr	r3, [pc, #332]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024b2:	e006      	b.n	80024c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
      break;
 80024b8:	e004      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ba:	bf00      	nop
 80024bc:	e002      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024be:	bf00      	nop
 80024c0:	e000      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024ca:	4b49      	ldr	r3, [pc, #292]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024cc:	68db      	ldr	r3, [r3, #12]
 80024ce:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6819      	ldr	r1, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	3b01      	subs	r3, #1
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	430b      	orrs	r3, r1
 80024e0:	4943      	ldr	r1, [pc, #268]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d17c      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3f      	ldr	r2, [pc, #252]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80024f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024f8:	f7fe fbba 	bl	8000c70 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024fe:	e009      	b.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002500:	f7fe fbb6 	bl	8000c70 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d902      	bls.n	8002514 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	73fb      	strb	r3, [r7, #15]
        break;
 8002512:	e005      	b.n	8002520 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ef      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002520:	7bfb      	ldrb	r3, [r7, #15]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d15f      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d110      	bne.n	800254e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002534:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6892      	ldr	r2, [r2, #8]
 800253c:	0211      	lsls	r1, r2, #8
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68d2      	ldr	r2, [r2, #12]
 8002542:	06d2      	lsls	r2, r2, #27
 8002544:	430a      	orrs	r2, r1
 8002546:	492a      	ldr	r1, [pc, #168]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002548:	4313      	orrs	r3, r2
 800254a:	610b      	str	r3, [r1, #16]
 800254c:	e027      	b.n	800259e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d112      	bne.n	800257a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002554:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800255c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6892      	ldr	r2, [r2, #8]
 8002564:	0211      	lsls	r1, r2, #8
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6912      	ldr	r2, [r2, #16]
 800256a:	0852      	lsrs	r2, r2, #1
 800256c:	3a01      	subs	r2, #1
 800256e:	0552      	lsls	r2, r2, #21
 8002570:	430a      	orrs	r2, r1
 8002572:	491f      	ldr	r1, [pc, #124]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002574:	4313      	orrs	r3, r2
 8002576:	610b      	str	r3, [r1, #16]
 8002578:	e011      	b.n	800259e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002582:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6892      	ldr	r2, [r2, #8]
 800258a:	0211      	lsls	r1, r2, #8
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6952      	ldr	r2, [r2, #20]
 8002590:	0852      	lsrs	r2, r2, #1
 8002592:	3a01      	subs	r2, #1
 8002594:	0652      	lsls	r2, r2, #25
 8002596:	430a      	orrs	r2, r1
 8002598:	4915      	ldr	r1, [pc, #84]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259a:	4313      	orrs	r3, r2
 800259c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800259e:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025aa:	f7fe fb61 	bl	8000c70 <HAL_GetTick>
 80025ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025b0:	e009      	b.n	80025c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b2:	f7fe fb5d 	bl	8000c70 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d902      	bls.n	80025c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	73fb      	strb	r3, [r7, #15]
          break;
 80025c4:	e005      	b.n	80025d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c6:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ef      	beq.n	80025b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025d2:	7bfb      	ldrb	r3, [r7, #15]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d106      	bne.n	80025e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025d8:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025da:	691a      	ldr	r2, [r3, #16]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4903      	ldr	r1, [pc, #12]	@ (80025f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e049      	b.n	800269a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe f992 	bl	8000944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f000 fb52 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e049      	b.n	8002748 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d106      	bne.n	80026ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f841 	bl	8002750 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2202      	movs	r2, #2
 80026d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4610      	mov	r0, r2
 80026e2:	f000 fafb 	bl	8002cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2201      	movs	r2, #1
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2201      	movs	r2, #1
 800273a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3708      	adds	r7, #8
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d109      	bne.n	8002788 <HAL_TIM_PWM_Start+0x24>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b01      	cmp	r3, #1
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	e03c      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b04      	cmp	r3, #4
 800278c:	d109      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x3e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	bf14      	ite	ne
 800279a:	2301      	movne	r3, #1
 800279c:	2300      	moveq	r3, #0
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	e02f      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	2b08      	cmp	r3, #8
 80027a6:	d109      	bne.n	80027bc <HAL_TIM_PWM_Start+0x58>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e022      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b0c      	cmp	r3, #12
 80027c0:	d109      	bne.n	80027d6 <HAL_TIM_PWM_Start+0x72>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	e015      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b10      	cmp	r3, #16
 80027da:	d109      	bne.n	80027f0 <HAL_TIM_PWM_Start+0x8c>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	e008      	b.n	8002802 <HAL_TIM_PWM_Start+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	bf14      	ite	ne
 80027fc:	2301      	movne	r3, #1
 80027fe:	2300      	moveq	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e07e      	b.n	8002908 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_TIM_PWM_Start+0xb6>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002818:	e023      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d104      	bne.n	800282a <HAL_TIM_PWM_Start+0xc6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002828:	e01b      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d104      	bne.n	800283a <HAL_TIM_PWM_Start+0xd6>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002838:	e013      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d104      	bne.n	800284a <HAL_TIM_PWM_Start+0xe6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002848:	e00b      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b10      	cmp	r3, #16
 800284e:	d104      	bne.n	800285a <HAL_TIM_PWM_Start+0xf6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2202      	movs	r2, #2
 8002854:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002858:	e003      	b.n	8002862 <HAL_TIM_PWM_Start+0xfe>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2201      	movs	r2, #1
 8002868:	6839      	ldr	r1, [r7, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fdbe 	bl	80033ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a26      	ldr	r2, [pc, #152]	@ (8002910 <HAL_TIM_PWM_Start+0x1ac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d009      	beq.n	800288e <HAL_TIM_PWM_Start+0x12a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a25      	ldr	r2, [pc, #148]	@ (8002914 <HAL_TIM_PWM_Start+0x1b0>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_TIM_PWM_Start+0x12a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a23      	ldr	r2, [pc, #140]	@ (8002918 <HAL_TIM_PWM_Start+0x1b4>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d101      	bne.n	8002892 <HAL_TIM_PWM_Start+0x12e>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <HAL_TIM_PWM_Start+0x130>
 8002892:	2300      	movs	r3, #0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d007      	beq.n	80028a8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80028a6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a18      	ldr	r2, [pc, #96]	@ (8002910 <HAL_TIM_PWM_Start+0x1ac>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <HAL_TIM_PWM_Start+0x162>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028ba:	d004      	beq.n	80028c6 <HAL_TIM_PWM_Start+0x162>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a14      	ldr	r2, [pc, #80]	@ (8002914 <HAL_TIM_PWM_Start+0x1b0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d115      	bne.n	80028f2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	4b13      	ldr	r3, [pc, #76]	@ (800291c <HAL_TIM_PWM_Start+0x1b8>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b06      	cmp	r3, #6
 80028d6:	d015      	beq.n	8002904 <HAL_TIM_PWM_Start+0x1a0>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028de:	d011      	beq.n	8002904 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028f0:	e008      	b.n	8002904 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e000      	b.n	8002906 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002904:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40012c00 	.word	0x40012c00
 8002914:	40014000 	.word	0x40014000
 8002918:	40014400 	.word	0x40014400
 800291c:	00010007 	.word	0x00010007

08002920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0ff      	b.n	8002b3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b14      	cmp	r3, #20
 800294a:	f200 80f0 	bhi.w	8002b2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800294e:	a201      	add	r2, pc, #4	@ (adr r2, 8002954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	080029a9 	.word	0x080029a9
 8002958:	08002b2f 	.word	0x08002b2f
 800295c:	08002b2f 	.word	0x08002b2f
 8002960:	08002b2f 	.word	0x08002b2f
 8002964:	080029e9 	.word	0x080029e9
 8002968:	08002b2f 	.word	0x08002b2f
 800296c:	08002b2f 	.word	0x08002b2f
 8002970:	08002b2f 	.word	0x08002b2f
 8002974:	08002a2b 	.word	0x08002a2b
 8002978:	08002b2f 	.word	0x08002b2f
 800297c:	08002b2f 	.word	0x08002b2f
 8002980:	08002b2f 	.word	0x08002b2f
 8002984:	08002a6b 	.word	0x08002a6b
 8002988:	08002b2f 	.word	0x08002b2f
 800298c:	08002b2f 	.word	0x08002b2f
 8002990:	08002b2f 	.word	0x08002b2f
 8002994:	08002aad 	.word	0x08002aad
 8002998:	08002b2f 	.word	0x08002b2f
 800299c:	08002b2f 	.word	0x08002b2f
 80029a0:	08002b2f 	.word	0x08002b2f
 80029a4:	08002aed 	.word	0x08002aed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fa04 	bl	8002dbc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	699a      	ldr	r2, [r3, #24]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0208 	orr.w	r2, r2, #8
 80029c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0204 	bic.w	r2, r2, #4
 80029d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6999      	ldr	r1, [r3, #24]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
      break;
 80029e6:	e0a5      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f000 fa60 	bl	8002eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699a      	ldr	r2, [r3, #24]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6999      	ldr	r1, [r3, #24]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	021a      	lsls	r2, r3, #8
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
      break;
 8002a28:	e084      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f000 fab9 	bl	8002fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0208 	orr.w	r2, r2, #8
 8002a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0204 	bic.w	r2, r2, #4
 8002a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69d9      	ldr	r1, [r3, #28]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	61da      	str	r2, [r3, #28]
      break;
 8002a68:	e064      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68b9      	ldr	r1, [r7, #8]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f000 fb11 	bl	8003098 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69da      	ldr	r2, [r3, #28]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69d9      	ldr	r1, [r3, #28]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	021a      	lsls	r2, r3, #8
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	61da      	str	r2, [r3, #28]
      break;
 8002aaa:	e043      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fb4e 	bl	8003154 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0208 	orr.w	r2, r2, #8
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0204 	bic.w	r2, r2, #4
 8002ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691a      	ldr	r2, [r3, #16]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002aea:	e023      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68b9      	ldr	r1, [r7, #8]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 fb86 	bl	8003204 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	691b      	ldr	r3, [r3, #16]
 8002b22:	021a      	lsls	r2, r3, #8
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002b2c:	e002      	b.n	8002b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	75fb      	strb	r3, [r7, #23]
      break;
 8002b32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop

08002b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIM_ConfigClockSource+0x1c>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e0b6      	b.n	8002cd2 <HAL_TIM_ConfigClockSource+0x18a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba0:	d03e      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0xd8>
 8002ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ba6:	f200 8087 	bhi.w	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bae:	f000 8086 	beq.w	8002cbe <HAL_TIM_ConfigClockSource+0x176>
 8002bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bb6:	d87f      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002bb8:	2b70      	cmp	r3, #112	@ 0x70
 8002bba:	d01a      	beq.n	8002bf2 <HAL_TIM_ConfigClockSource+0xaa>
 8002bbc:	2b70      	cmp	r3, #112	@ 0x70
 8002bbe:	d87b      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002bc0:	2b60      	cmp	r3, #96	@ 0x60
 8002bc2:	d050      	beq.n	8002c66 <HAL_TIM_ConfigClockSource+0x11e>
 8002bc4:	2b60      	cmp	r3, #96	@ 0x60
 8002bc6:	d877      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002bc8:	2b50      	cmp	r3, #80	@ 0x50
 8002bca:	d03c      	beq.n	8002c46 <HAL_TIM_ConfigClockSource+0xfe>
 8002bcc:	2b50      	cmp	r3, #80	@ 0x50
 8002bce:	d873      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002bd0:	2b40      	cmp	r3, #64	@ 0x40
 8002bd2:	d058      	beq.n	8002c86 <HAL_TIM_ConfigClockSource+0x13e>
 8002bd4:	2b40      	cmp	r3, #64	@ 0x40
 8002bd6:	d86f      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002bd8:	2b30      	cmp	r3, #48	@ 0x30
 8002bda:	d064      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x15e>
 8002bdc:	2b30      	cmp	r3, #48	@ 0x30
 8002bde:	d86b      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d060      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x15e>
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d867      	bhi.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d05c      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x15e>
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d05a      	beq.n	8002ca6 <HAL_TIM_ConfigClockSource+0x15e>
 8002bf0:	e062      	b.n	8002cb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c02:	f000 fbd3 	bl	80033ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	609a      	str	r2, [r3, #8]
      break;
 8002c1e:	e04f      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c30:	f000 fbbc 	bl	80033ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689a      	ldr	r2, [r3, #8]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c42:	609a      	str	r2, [r3, #8]
      break;
 8002c44:	e03c      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c52:	461a      	mov	r2, r3
 8002c54:	f000 fb30 	bl	80032b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2150      	movs	r1, #80	@ 0x50
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb89 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002c64:	e02c      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c72:	461a      	mov	r2, r3
 8002c74:	f000 fb4f 	bl	8003316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2160      	movs	r1, #96	@ 0x60
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fb79 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002c84:	e01c      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c92:	461a      	mov	r2, r3
 8002c94:	f000 fb10 	bl	80032b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2140      	movs	r1, #64	@ 0x40
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 fb69 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002ca4:	e00c      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4610      	mov	r0, r2
 8002cb2:	f000 fb60 	bl	8003376 <TIM_ITRx_SetConfig>
      break;
 8002cb6:	e003      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      break;
 8002cbc:	e000      	b.n	8002cc0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3710      	adds	r7, #16
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a30      	ldr	r2, [pc, #192]	@ (8002db0 <TIM_Base_SetConfig+0xd4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d003      	beq.n	8002cfc <TIM_Base_SetConfig+0x20>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfa:	d108      	bne.n	8002d0e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a27      	ldr	r2, [pc, #156]	@ (8002db0 <TIM_Base_SetConfig+0xd4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a24      	ldr	r2, [pc, #144]	@ (8002db4 <TIM_Base_SetConfig+0xd8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x52>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a23      	ldr	r2, [pc, #140]	@ (8002db8 <TIM_Base_SetConfig+0xdc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d108      	bne.n	8002d40 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a12      	ldr	r2, [pc, #72]	@ (8002db0 <TIM_Base_SetConfig+0xd4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <TIM_Base_SetConfig+0xa0>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a11      	ldr	r2, [pc, #68]	@ (8002db4 <TIM_Base_SetConfig+0xd8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d003      	beq.n	8002d7c <TIM_Base_SetConfig+0xa0>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4a10      	ldr	r2, [pc, #64]	@ (8002db8 <TIM_Base_SetConfig+0xdc>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d103      	bne.n	8002d84 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	691a      	ldr	r2, [r3, #16]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d105      	bne.n	8002da2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f023 0201 	bic.w	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	611a      	str	r2, [r3, #16]
  }
}
 8002da2:	bf00      	nop
 8002da4:	3714      	adds	r7, #20
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40012c00 	.word	0x40012c00
 8002db4:	40014000 	.word	0x40014000
 8002db8:	40014400 	.word	0x40014400

08002dbc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	f023 0201 	bic.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f023 0302 	bic.w	r3, r3, #2
 8002e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a24      	ldr	r2, [pc, #144]	@ (8002ea8 <TIM_OC1_SetConfig+0xec>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d007      	beq.n	8002e2c <TIM_OC1_SetConfig+0x70>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a23      	ldr	r2, [pc, #140]	@ (8002eac <TIM_OC1_SetConfig+0xf0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d003      	beq.n	8002e2c <TIM_OC1_SetConfig+0x70>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a22      	ldr	r2, [pc, #136]	@ (8002eb0 <TIM_OC1_SetConfig+0xf4>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d10c      	bne.n	8002e46 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	f023 0308 	bic.w	r3, r3, #8
 8002e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f023 0304 	bic.w	r3, r3, #4
 8002e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a17      	ldr	r2, [pc, #92]	@ (8002ea8 <TIM_OC1_SetConfig+0xec>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d007      	beq.n	8002e5e <TIM_OC1_SetConfig+0xa2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a16      	ldr	r2, [pc, #88]	@ (8002eac <TIM_OC1_SetConfig+0xf0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d003      	beq.n	8002e5e <TIM_OC1_SetConfig+0xa2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <TIM_OC1_SetConfig+0xf4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d111      	bne.n	8002e82 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	621a      	str	r2, [r3, #32]
}
 8002e9c:	bf00      	nop
 8002e9e:	371c      	adds	r7, #28
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	40012c00 	.word	0x40012c00
 8002eac:	40014000 	.word	0x40014000
 8002eb0:	40014400 	.word	0x40014400

08002eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a1b      	ldr	r3, [r3, #32]
 8002ec8:	f023 0210 	bic.w	r2, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ee2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	021b      	lsls	r3, r3, #8
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	f023 0320 	bic.w	r3, r3, #32
 8002f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a22      	ldr	r2, [pc, #136]	@ (8002f9c <TIM_OC2_SetConfig+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d10d      	bne.n	8002f34 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a19      	ldr	r2, [pc, #100]	@ (8002f9c <TIM_OC2_SetConfig+0xe8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <TIM_OC2_SetConfig+0x98>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <TIM_OC2_SetConfig+0xec>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_OC2_SetConfig+0x98>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a17      	ldr	r2, [pc, #92]	@ (8002fa4 <TIM_OC2_SetConfig+0xf0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d113      	bne.n	8002f74 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f52:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	621a      	str	r2, [r3, #32]
}
 8002f8e:	bf00      	nop
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f023 0303 	bic.w	r3, r3, #3
 8002fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a21      	ldr	r2, [pc, #132]	@ (800308c <TIM_OC3_SetConfig+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d10d      	bne.n	8003026 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003010:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	021b      	lsls	r3, r3, #8
 8003018:	697a      	ldr	r2, [r7, #20]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a18      	ldr	r2, [pc, #96]	@ (800308c <TIM_OC3_SetConfig+0xe4>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <TIM_OC3_SetConfig+0x96>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <TIM_OC3_SetConfig+0xe8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d003      	beq.n	800303e <TIM_OC3_SetConfig+0x96>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <TIM_OC3_SetConfig+0xec>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d113      	bne.n	8003066 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800304c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40012c00 	.word	0x40012c00
 8003090:	40014000 	.word	0x40014000
 8003094:	40014400 	.word	0x40014400

08003098 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80030ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	031b      	lsls	r3, r3, #12
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a14      	ldr	r2, [pc, #80]	@ (8003148 <TIM_OC4_SetConfig+0xb0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d007      	beq.n	800310c <TIM_OC4_SetConfig+0x74>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a13      	ldr	r2, [pc, #76]	@ (800314c <TIM_OC4_SetConfig+0xb4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d003      	beq.n	800310c <TIM_OC4_SetConfig+0x74>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <TIM_OC4_SetConfig+0xb8>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d109      	bne.n	8003120 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4313      	orrs	r3, r2
 800311e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40014000 	.word	0x40014000
 8003150:	40014400 	.word	0x40014400

08003154 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003198:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	041b      	lsls	r3, r3, #16
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a13      	ldr	r2, [pc, #76]	@ (80031f8 <TIM_OC5_SetConfig+0xa4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d007      	beq.n	80031be <TIM_OC5_SetConfig+0x6a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a12      	ldr	r2, [pc, #72]	@ (80031fc <TIM_OC5_SetConfig+0xa8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d003      	beq.n	80031be <TIM_OC5_SetConfig+0x6a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a11      	ldr	r2, [pc, #68]	@ (8003200 <TIM_OC5_SetConfig+0xac>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d109      	bne.n	80031d2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	621a      	str	r2, [r3, #32]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40014000 	.word	0x40014000
 8003200:	40014400 	.word	0x40014400

08003204 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003232:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	021b      	lsls	r3, r3, #8
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	4313      	orrs	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800324a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	051b      	lsls	r3, r3, #20
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a14      	ldr	r2, [pc, #80]	@ (80032ac <TIM_OC6_SetConfig+0xa8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_OC6_SetConfig+0x6c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a13      	ldr	r2, [pc, #76]	@ (80032b0 <TIM_OC6_SetConfig+0xac>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_OC6_SetConfig+0x6c>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a12      	ldr	r2, [pc, #72]	@ (80032b4 <TIM_OC6_SetConfig+0xb0>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d109      	bne.n	8003284 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003276:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	029b      	lsls	r3, r3, #10
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68fa      	ldr	r2, [r7, #12]
 800328e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	621a      	str	r2, [r3, #32]
}
 800329e:	bf00      	nop
 80032a0:	371c      	adds	r7, #28
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40014000 	.word	0x40014000
 80032b4:	40014400 	.word	0x40014400

080032b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0201 	bic.w	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 030a 	bic.w	r3, r3, #10
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	621a      	str	r2, [r3, #32]
}
 800330a:	bf00      	nop
 800330c:	371c      	adds	r7, #28
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003316:	b480      	push	{r7}
 8003318:	b087      	sub	sp, #28
 800331a:	af00      	add	r7, sp, #0
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	60b9      	str	r1, [r7, #8]
 8003320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	f023 0210 	bic.w	r2, r3, #16
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	011b      	lsls	r3, r3, #4
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
 800337e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4313      	orrs	r3, r2
 8003394:	f043 0307 	orr.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	609a      	str	r2, [r3, #8]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b087      	sub	sp, #28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
 80033b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80033c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	021a      	lsls	r2, r3, #8
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	431a      	orrs	r2, r3
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f003 031f 	and.w	r3, r3, #31
 80033fe:	2201      	movs	r2, #1
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a1a      	ldr	r2, [r3, #32]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	43db      	mvns	r3, r3
 800340e:	401a      	ands	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a1a      	ldr	r2, [r3, #32]
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	fa01 f303 	lsl.w	r3, r1, r3
 8003424:	431a      	orrs	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003448:	2b01      	cmp	r3, #1
 800344a:	d101      	bne.n	8003450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800344c:	2302      	movs	r3, #2
 800344e:	e04f      	b.n	80034f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a21      	ldr	r2, [pc, #132]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003480:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68fa      	ldr	r2, [r7, #12]
 800349a:	4313      	orrs	r3, r2
 800349c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b8:	d004      	beq.n	80034c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a10      	ldr	r2, [pc, #64]	@ (8003500 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d10c      	bne.n	80034de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	68ba      	ldr	r2, [r7, #8]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40012c00 	.word	0x40012c00
 8003500:	40014000 	.word	0x40014000

08003504 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800351c:	2302      	movs	r3, #2
 800351e:	e060      	b.n	80035e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	4313      	orrs	r3, r2
 800357a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003586:	4313      	orrs	r3, r2
 8003588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	4313      	orrs	r3, r2
 8003598:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a14      	ldr	r2, [pc, #80]	@ (80035f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d115      	bne.n	80035d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	051b      	lsls	r3, r3, #20
 80035b0:	4313      	orrs	r3, r2
 80035b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e040      	b.n	8003688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd f9ec 	bl	80009f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	@ 0x24
 8003620:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 fdc6 	bl	80041cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 fb97 	bl	8003d74 <UART_SetConfig>
 8003646:	4603      	mov	r3, r0
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01b      	b.n	8003688 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800365e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800366e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fe45 	bl	8004310 <UART_CheckIdleState>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	@ 0x28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d137      	bne.n	8003718 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Receive_IT+0x24>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e030      	b.n	800371a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <HAL_UART_Receive_IT+0x94>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d01f      	beq.n	8003708 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d018      	beq.n	8003708 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	e853 3f00 	ldrex	r3, [r3]
 80036e2:	613b      	str	r3, [r7, #16]
   return(result);
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f8:	69f9      	ldr	r1, [r7, #28]
 80036fa:	6a3a      	ldr	r2, [r7, #32]
 80036fc:	e841 2300 	strex	r3, r2, [r1]
 8003700:	61bb      	str	r3, [r7, #24]
   return(result);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1e6      	bne.n	80036d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	461a      	mov	r2, r3
 800370c:	68b9      	ldr	r1, [r7, #8]
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 ff14 	bl	800453c <UART_Start_Receive_IT>
 8003714:	4603      	mov	r3, r0
 8003716:	e000      	b.n	800371a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3728      	adds	r7, #40	@ 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40008000 	.word	0x40008000

08003728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b0ba      	sub	sp, #232	@ 0xe8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800374e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003752:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003756:	4013      	ands	r3, r2
 8003758:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800375c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003760:	2b00      	cmp	r3, #0
 8003762:	d115      	bne.n	8003790 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003768:	f003 0320 	and.w	r3, r3, #32
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00f      	beq.n	8003790 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d009      	beq.n	8003790 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 82ca 	beq.w	8003d1a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	4798      	blx	r3
      }
      return;
 800378e:	e2c4      	b.n	8003d1a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003790:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003794:	2b00      	cmp	r3, #0
 8003796:	f000 8117 	beq.w	80039c8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800379a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d106      	bne.n	80037b4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80037a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80037aa:	4b85      	ldr	r3, [pc, #532]	@ (80039c0 <HAL_UART_IRQHandler+0x298>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 810a 	beq.w	80039c8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d011      	beq.n	80037e4 <HAL_UART_IRQHandler+0xbc>
 80037c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00b      	beq.n	80037e4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d011      	beq.n	8003814 <HAL_UART_IRQHandler+0xec>
 80037f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00b      	beq.n	8003814 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2202      	movs	r2, #2
 8003802:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800380a:	f043 0204 	orr.w	r2, r3, #4
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d011      	beq.n	8003844 <HAL_UART_IRQHandler+0x11c>
 8003820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00b      	beq.n	8003844 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2204      	movs	r2, #4
 8003832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d017      	beq.n	8003880 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800385c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003860:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003864:	2b00      	cmp	r3, #0
 8003866:	d00b      	beq.n	8003880 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2208      	movs	r2, #8
 800386e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003876:	f043 0208 	orr.w	r2, r3, #8
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <HAL_UART_IRQHandler+0x18a>
 800388c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003890:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038a8:	f043 0220 	orr.w	r2, r3, #32
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8230 	beq.w	8003d1e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80038be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00d      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80038ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fa:	2b40      	cmp	r3, #64	@ 0x40
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80038fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003902:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003906:	2b00      	cmp	r3, #0
 8003908:	d04f      	beq.n	80039aa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fedc 	bl	80046c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b40      	cmp	r3, #64	@ 0x40
 800391c:	d141      	bne.n	80039a2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	3308      	adds	r3, #8
 8003924:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800392c:	e853 3f00 	ldrex	r3, [r3]
 8003930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003934:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003938:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800393c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3308      	adds	r3, #8
 8003946:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800394a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800394e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003952:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003956:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003962:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1d9      	bne.n	800391e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396e:	2b00      	cmp	r3, #0
 8003970:	d013      	beq.n	800399a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003976:	4a13      	ldr	r2, [pc, #76]	@ (80039c4 <HAL_UART_IRQHandler+0x29c>)
 8003978:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800397e:	4618      	mov	r0, r3
 8003980:	f7fd fad1 	bl	8000f26 <HAL_DMA_Abort_IT>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d017      	beq.n	80039ba <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003994:	4610      	mov	r0, r2
 8003996:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003998:	e00f      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 f9d4 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a0:	e00b      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 f9d0 	bl	8003d48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	e007      	b.n	80039ba <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f9cc 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80039b8:	e1b1      	b.n	8003d1e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ba:	bf00      	nop
    return;
 80039bc:	e1af      	b.n	8003d1e <HAL_UART_IRQHandler+0x5f6>
 80039be:	bf00      	nop
 80039c0:	04000120 	.word	0x04000120
 80039c4:	08004791 	.word	0x08004791

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 816a 	bne.w	8003ca6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039d6:	f003 0310 	and.w	r3, r3, #16
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 8163 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80039e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039e4:	f003 0310 	and.w	r3, r3, #16
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 815c 	beq.w	8003ca6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a00:	2b40      	cmp	r3, #64	@ 0x40
 8003a02:	f040 80d4 	bne.w	8003bae <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80ad 	beq.w	8003b76 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003a22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a26:	429a      	cmp	r2, r3
 8003a28:	f080 80a5 	bcs.w	8003b76 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0320 	and.w	r3, r3, #32
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f040 8086 	bne.w	8003b54 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003a72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a76:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a82:	e841 2300 	strex	r3, r2, [r1]
 8003a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1da      	bne.n	8003a48 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3308      	adds	r3, #8
 8003a98:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a9c:	e853 3f00 	ldrex	r3, [r3]
 8003aa0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003aa2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ab6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003aba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003abe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ac2:	e841 2300 	strex	r3, r2, [r1]
 8003ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ac8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1e1      	bne.n	8003a92 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3308      	adds	r3, #8
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ad8:	e853 3f00 	ldrex	r3, [r3]
 8003adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ade:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ae0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ae4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3308      	adds	r3, #8
 8003aee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003af2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003af4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003af8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e3      	bne.n	8003ace <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b24:	f023 0310 	bic.w	r3, r3, #16
 8003b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b36:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b38:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e4      	bne.n	8003b14 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7fd f9ab 	bl	8000eaa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2202      	movs	r2, #2
 8003b58:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f8f4 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b74:	e0d5      	b.n	8003d22 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003b7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 80ce 	bne.w	8003d22 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b20      	cmp	r3, #32
 8003b94:	f040 80c5 	bne.w	8003d22 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8d8 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
      return;
 8003bac:	e0b9      	b.n	8003d22 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 80ab 	beq.w	8003d26 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003bd0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 80a6 	beq.w	8003d26 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003be8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bea:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003bfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bfe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e4      	bne.n	8003bda <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3308      	adds	r3, #8
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	e853 3f00 	ldrex	r3, [r3]
 8003c1e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c34:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c3c:	e841 2300 	strex	r3, r2, [r1]
 8003c40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d1e3      	bne.n	8003c10 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	461a      	mov	r2, r3
 8003c7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	e841 2300 	strex	r3, r2, [r1]
 8003c8a:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e4      	bne.n	8003c5c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f85c 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ca4:	e03f      	b.n	8003d26 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003caa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x5a8>
 8003cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003cc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 ff5d 	bl	8004b88 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cce:	e02d      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00e      	beq.n	8003cfa <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d008      	beq.n	8003cfa <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01c      	beq.n	8003d2a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	4798      	blx	r3
    }
    return;
 8003cf8:	e017      	b.n	8003d2a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d012      	beq.n	8003d2c <HAL_UART_IRQHandler+0x604>
 8003d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00c      	beq.n	8003d2c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f000 fd52 	bl	80047bc <UART_EndTransmit_IT>
    return;
 8003d18:	e008      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
      return;
 8003d1a:	bf00      	nop
 8003d1c:	e006      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
    return;
 8003d1e:	bf00      	nop
 8003d20:	e004      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
      return;
 8003d22:	bf00      	nop
 8003d24:	e002      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
      return;
 8003d26:	bf00      	nop
 8003d28:	e000      	b.n	8003d2c <HAL_UART_IRQHandler+0x604>
    return;
 8003d2a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003d2c:	37e8      	adds	r7, #232	@ 0xe8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop

08003d34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	460b      	mov	r3, r1
 8003d66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr

08003d74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d78:	b08a      	sub	sp, #40	@ 0x28
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4bb4      	ldr	r3, [pc, #720]	@ (8004074 <UART_SetConfig+0x300>)
 8003da4:	4013      	ands	r3, r2
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	6812      	ldr	r2, [r2, #0]
 8003daa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4aa9      	ldr	r2, [pc, #676]	@ (8004078 <UART_SetConfig+0x304>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d004      	beq.n	8003de0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df0:	430a      	orrs	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4aa0      	ldr	r2, [pc, #640]	@ (800407c <UART_SetConfig+0x308>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d126      	bne.n	8003e4c <UART_SetConfig+0xd8>
 8003dfe:	4ba0      	ldr	r3, [pc, #640]	@ (8004080 <UART_SetConfig+0x30c>)
 8003e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e04:	f003 0303 	and.w	r3, r3, #3
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d81b      	bhi.n	8003e44 <UART_SetConfig+0xd0>
 8003e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <UART_SetConfig+0xa0>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	08003e2d 	.word	0x08003e2d
 8003e20:	08003e3d 	.word	0x08003e3d
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e2a:	e080      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e32:	e07c      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003e34:	2304      	movs	r3, #4
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e3a:	e078      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003e3c:	2308      	movs	r3, #8
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e42:	e074      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003e44:	2310      	movs	r3, #16
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003e4a:	e070      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a8c      	ldr	r2, [pc, #560]	@ (8004084 <UART_SetConfig+0x310>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d138      	bne.n	8003ec8 <UART_SetConfig+0x154>
 8003e56:	4b8a      	ldr	r3, [pc, #552]	@ (8004080 <UART_SetConfig+0x30c>)
 8003e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5c:	f003 030c 	and.w	r3, r3, #12
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d82d      	bhi.n	8003ec0 <UART_SetConfig+0x14c>
 8003e64:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <UART_SetConfig+0xf8>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003ec1 	.word	0x08003ec1
 8003e74:	08003ec1 	.word	0x08003ec1
 8003e78:	08003ec1 	.word	0x08003ec1
 8003e7c:	08003eb1 	.word	0x08003eb1
 8003e80:	08003ec1 	.word	0x08003ec1
 8003e84:	08003ec1 	.word	0x08003ec1
 8003e88:	08003ec1 	.word	0x08003ec1
 8003e8c:	08003ea9 	.word	0x08003ea9
 8003e90:	08003ec1 	.word	0x08003ec1
 8003e94:	08003ec1 	.word	0x08003ec1
 8003e98:	08003ec1 	.word	0x08003ec1
 8003e9c:	08003eb9 	.word	0x08003eb9
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ea6:	e042      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eae:	e03e      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003eb0:	2304      	movs	r3, #4
 8003eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eb6:	e03a      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003eb8:	2308      	movs	r3, #8
 8003eba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ebe:	e036      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003ec0:	2310      	movs	r3, #16
 8003ec2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ec6:	e032      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6a      	ldr	r2, [pc, #424]	@ (8004078 <UART_SetConfig+0x304>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d12a      	bne.n	8003f28 <UART_SetConfig+0x1b4>
 8003ed2:	4b6b      	ldr	r3, [pc, #428]	@ (8004080 <UART_SetConfig+0x30c>)
 8003ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003edc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee0:	d01a      	beq.n	8003f18 <UART_SetConfig+0x1a4>
 8003ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ee6:	d81b      	bhi.n	8003f20 <UART_SetConfig+0x1ac>
 8003ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003eec:	d00c      	beq.n	8003f08 <UART_SetConfig+0x194>
 8003eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ef2:	d815      	bhi.n	8003f20 <UART_SetConfig+0x1ac>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <UART_SetConfig+0x18c>
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003efc:	d008      	beq.n	8003f10 <UART_SetConfig+0x19c>
 8003efe:	e00f      	b.n	8003f20 <UART_SetConfig+0x1ac>
 8003f00:	2300      	movs	r3, #0
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f06:	e012      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f0e:	e00e      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003f10:	2304      	movs	r3, #4
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f16:	e00a      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003f18:	2308      	movs	r3, #8
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f1e:	e006      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003f20:	2310      	movs	r3, #16
 8003f22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f26:	e002      	b.n	8003f2e <UART_SetConfig+0x1ba>
 8003f28:	2310      	movs	r3, #16
 8003f2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a51      	ldr	r2, [pc, #324]	@ (8004078 <UART_SetConfig+0x304>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d17a      	bne.n	800402e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d824      	bhi.n	8003f8a <UART_SetConfig+0x216>
 8003f40:	a201      	add	r2, pc, #4	@ (adr r2, 8003f48 <UART_SetConfig+0x1d4>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f8b 	.word	0x08003f8b
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f8b 	.word	0x08003f8b
 8003f58:	08003f7b 	.word	0x08003f7b
 8003f5c:	08003f8b 	.word	0x08003f8b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f8b 	.word	0x08003f8b
 8003f68:	08003f83 	.word	0x08003f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7fd ffbe 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8003f70:	61f8      	str	r0, [r7, #28]
        break;
 8003f72:	e010      	b.n	8003f96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f74:	4b44      	ldr	r3, [pc, #272]	@ (8004088 <UART_SetConfig+0x314>)
 8003f76:	61fb      	str	r3, [r7, #28]
        break;
 8003f78:	e00d      	b.n	8003f96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7a:	f7fd ff1f 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003f7e:	61f8      	str	r0, [r7, #28]
        break;
 8003f80:	e009      	b.n	8003f96 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f86:	61fb      	str	r3, [r7, #28]
        break;
 8003f88:	e005      	b.n	8003f96 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003f94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8107 	beq.w	80041ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	69fa      	ldr	r2, [r7, #28]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d305      	bcc.n	8003fba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d903      	bls.n	8003fc2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003fc0:	e0f4      	b.n	80041ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	461c      	mov	r4, r3
 8003fc8:	4615      	mov	r5, r2
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	022b      	lsls	r3, r5, #8
 8003fd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fd8:	0222      	lsls	r2, r4, #8
 8003fda:	68f9      	ldr	r1, [r7, #12]
 8003fdc:	6849      	ldr	r1, [r1, #4]
 8003fde:	0849      	lsrs	r1, r1, #1
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	4688      	mov	r8, r1
 8003fe4:	4681      	mov	r9, r0
 8003fe6:	eb12 0a08 	adds.w	sl, r2, r8
 8003fea:	eb43 0b09 	adc.w	fp, r3, r9
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	607a      	str	r2, [r7, #4]
 8003ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ffc:	4650      	mov	r0, sl
 8003ffe:	4659      	mov	r1, fp
 8004000:	f7fc f8e4 	bl	80001cc <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004012:	d308      	bcc.n	8004026 <UART_SetConfig+0x2b2>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800401a:	d204      	bcs.n	8004026 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	60da      	str	r2, [r3, #12]
 8004024:	e0c2      	b.n	80041ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800402c:	e0be      	b.n	80041ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004036:	d16a      	bne.n	800410e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004038:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800403c:	2b08      	cmp	r3, #8
 800403e:	d834      	bhi.n	80040aa <UART_SetConfig+0x336>
 8004040:	a201      	add	r2, pc, #4	@ (adr r2, 8004048 <UART_SetConfig+0x2d4>)
 8004042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004046:	bf00      	nop
 8004048:	0800406d 	.word	0x0800406d
 800404c:	0800408d 	.word	0x0800408d
 8004050:	08004095 	.word	0x08004095
 8004054:	080040ab 	.word	0x080040ab
 8004058:	0800409b 	.word	0x0800409b
 800405c:	080040ab 	.word	0x080040ab
 8004060:	080040ab 	.word	0x080040ab
 8004064:	080040ab 	.word	0x080040ab
 8004068:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7fd ff3e 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e020      	b.n	80040b6 <UART_SetConfig+0x342>
 8004074:	efff69f3 	.word	0xefff69f3
 8004078:	40008000 	.word	0x40008000
 800407c:	40013800 	.word	0x40013800
 8004080:	40021000 	.word	0x40021000
 8004084:	40004400 	.word	0x40004400
 8004088:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fd ff44 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8004090:	61f8      	str	r0, [r7, #28]
        break;
 8004092:	e010      	b.n	80040b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004094:	4b4c      	ldr	r3, [pc, #304]	@ (80041c8 <UART_SetConfig+0x454>)
 8004096:	61fb      	str	r3, [r7, #28]
        break;
 8004098:	e00d      	b.n	80040b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fd fe8f 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 800409e:	61f8      	str	r0, [r7, #28]
        break;
 80040a0:	e009      	b.n	80040b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040a6:	61fb      	str	r3, [r7, #28]
        break;
 80040a8:	e005      	b.n	80040b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80040b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d077      	beq.n	80041ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	005a      	lsls	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	085b      	lsrs	r3, r3, #1
 80040c6:	441a      	add	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b0f      	cmp	r3, #15
 80040d6:	d916      	bls.n	8004106 <UART_SetConfig+0x392>
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040de:	d212      	bcs.n	8004106 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f023 030f 	bic.w	r3, r3, #15
 80040e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	8afb      	ldrh	r3, [r7, #22]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	8afa      	ldrh	r2, [r7, #22]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	e052      	b.n	80041ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800410c:	e04e      	b.n	80041ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800410e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004112:	2b08      	cmp	r3, #8
 8004114:	d827      	bhi.n	8004166 <UART_SetConfig+0x3f2>
 8004116:	a201      	add	r2, pc, #4	@ (adr r2, 800411c <UART_SetConfig+0x3a8>)
 8004118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411c:	08004141 	.word	0x08004141
 8004120:	08004149 	.word	0x08004149
 8004124:	08004151 	.word	0x08004151
 8004128:	08004167 	.word	0x08004167
 800412c:	08004157 	.word	0x08004157
 8004130:	08004167 	.word	0x08004167
 8004134:	08004167 	.word	0x08004167
 8004138:	08004167 	.word	0x08004167
 800413c:	0800415f 	.word	0x0800415f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004140:	f7fd fed4 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 8004144:	61f8      	str	r0, [r7, #28]
        break;
 8004146:	e014      	b.n	8004172 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004148:	f7fd fee6 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 800414c:	61f8      	str	r0, [r7, #28]
        break;
 800414e:	e010      	b.n	8004172 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004150:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <UART_SetConfig+0x454>)
 8004152:	61fb      	str	r3, [r7, #28]
        break;
 8004154:	e00d      	b.n	8004172 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004156:	f7fd fe31 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 800415a:	61f8      	str	r0, [r7, #28]
        break;
 800415c:	e009      	b.n	8004172 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800415e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004162:	61fb      	str	r3, [r7, #28]
        break;
 8004164:	e005      	b.n	8004172 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004170:	bf00      	nop
    }

    if (pclk != 0U)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d019      	beq.n	80041ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	085a      	lsrs	r2, r3, #1
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	441a      	add	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	fbb2 f3f3 	udiv	r3, r2, r3
 800418a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	2b0f      	cmp	r3, #15
 8004190:	d909      	bls.n	80041a6 <UART_SetConfig+0x432>
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004198:	d205      	bcs.n	80041a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60da      	str	r2, [r3, #12]
 80041a4:	e002      	b.n	80041ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80041b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3728      	adds	r7, #40	@ 0x28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	00f42400 	.word	0x00f42400

080041cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	430a      	orrs	r2, r1
 80041f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	430a      	orrs	r2, r1
 800427c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f003 0320 	and.w	r3, r3, #32
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d01a      	beq.n	80042e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042ca:	d10a      	bne.n	80042e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00a      	beq.n	8004304 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	605a      	str	r2, [r3, #4]
  }
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b098      	sub	sp, #96	@ 0x60
 8004314:	af02      	add	r7, sp, #8
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004320:	f7fc fca6 	bl	8000c70 <HAL_GetTick>
 8004324:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b08      	cmp	r3, #8
 8004332:	d12e      	bne.n	8004392 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 f88c 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d021      	beq.n	8004392 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800435c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800435e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004362:	653b      	str	r3, [r7, #80]	@ 0x50
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	461a      	mov	r2, r3
 800436a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800436c:	647b      	str	r3, [r7, #68]	@ 0x44
 800436e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004372:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800437a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e6      	bne.n	800434e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e062      	b.n	8004458 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b04      	cmp	r3, #4
 800439e:	d149      	bne.n	8004434 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043a8:	2200      	movs	r2, #0
 80043aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 f856 	bl	8004460 <UART_WaitOnFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d03c      	beq.n	8004434 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	623b      	str	r3, [r7, #32]
   return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3308      	adds	r3, #8
 80043f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0301 	bic.w	r3, r3, #1
 8004402:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800440c:	61fa      	str	r2, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e5      	bne.n	80043ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2220      	movs	r2, #32
 8004424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e011      	b.n	8004458 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2220      	movs	r2, #32
 8004438:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3758      	adds	r7, #88	@ 0x58
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004470:	e04f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d04b      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447a:	f7fc fbf9 	bl	8000c70 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	429a      	cmp	r2, r3
 8004488:	d302      	bcc.n	8004490 <UART_WaitOnFlagUntilTimeout+0x30>
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e04e      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d037      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b80      	cmp	r3, #128	@ 0x80
 80044a6:	d034      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b40      	cmp	r3, #64	@ 0x40
 80044ac:	d031      	beq.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d110      	bne.n	80044de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2208      	movs	r2, #8
 80044c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f8ff 	bl	80046c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2208      	movs	r2, #8
 80044ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e029      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69db      	ldr	r3, [r3, #28]
 80044e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ec:	d111      	bne.n	8004512 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80044f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 f8e5 	bl	80046c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2220      	movs	r2, #32
 8004502:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e00f      	b.n	8004532 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	69da      	ldr	r2, [r3, #28]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	4013      	ands	r3, r2
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	429a      	cmp	r2, r3
 8004520:	bf0c      	ite	eq
 8004522:	2301      	moveq	r3, #1
 8004524:	2300      	movne	r3, #0
 8004526:	b2db      	uxtb	r3, r3
 8004528:	461a      	mov	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	429a      	cmp	r2, r3
 800452e:	d0a0      	beq.n	8004472 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800453c:	b480      	push	{r7}
 800453e:	b097      	sub	sp, #92	@ 0x5c
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	4613      	mov	r3, r2
 8004548:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	68ba      	ldr	r2, [r7, #8]
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	88fa      	ldrh	r2, [r7, #6]
 800455c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800456e:	d10e      	bne.n	800458e <UART_Start_Receive_IT+0x52>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <UART_Start_Receive_IT+0x48>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800457e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004582:	e02d      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	22ff      	movs	r2, #255	@ 0xff
 8004588:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800458c:	e028      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10d      	bne.n	80045b2 <UART_Start_Receive_IT+0x76>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <UART_Start_Receive_IT+0x6c>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	@ 0xff
 80045a2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045a6:	e01b      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	227f      	movs	r2, #127	@ 0x7f
 80045ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045b0:	e016      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80045ba:	d10d      	bne.n	80045d8 <UART_Start_Receive_IT+0x9c>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <UART_Start_Receive_IT+0x92>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	227f      	movs	r2, #127	@ 0x7f
 80045c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045cc:	e008      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	223f      	movs	r2, #63	@ 0x3f
 80045d2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045d6:	e003      	b.n	80045e0 <UART_Start_Receive_IT+0xa4>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2222      	movs	r2, #34	@ 0x22
 80045ec:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3308      	adds	r3, #8
 80045f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	657b      	str	r3, [r7, #84]	@ 0x54
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3308      	adds	r3, #8
 800460e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004610:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004612:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800461e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800462c:	d107      	bne.n	800463e <UART_Start_Receive_IT+0x102>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d103      	bne.n	800463e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <UART_Start_Receive_IT+0x184>)
 800463a:	669a      	str	r2, [r3, #104]	@ 0x68
 800463c:	e002      	b.n	8004644 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4a20      	ldr	r2, [pc, #128]	@ (80046c4 <UART_Start_Receive_IT+0x188>)
 8004642:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d019      	beq.n	8004680 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	e853 3f00 	ldrex	r3, [r3]
 8004658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800466a:	637b      	str	r3, [r7, #52]	@ 0x34
 800466c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004670:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004672:	e841 2300 	strex	r3, r2, [r1]
 8004676:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1e6      	bne.n	800464c <UART_Start_Receive_IT+0x110>
 800467e:	e018      	b.n	80046b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	e853 3f00 	ldrex	r3, [r3]
 800468c:	613b      	str	r3, [r7, #16]
   return(result);
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f043 0320 	orr.w	r3, r3, #32
 8004694:	653b      	str	r3, [r7, #80]	@ 0x50
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800469e:	623b      	str	r3, [r7, #32]
 80046a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a2:	69f9      	ldr	r1, [r7, #28]
 80046a4:	6a3a      	ldr	r2, [r7, #32]
 80046a6:	e841 2300 	strex	r3, r2, [r1]
 80046aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1e6      	bne.n	8004680 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	375c      	adds	r7, #92	@ 0x5c
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	080049cd 	.word	0x080049cd
 80046c4:	08004811 	.word	0x08004811

080046c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b095      	sub	sp, #84	@ 0x54
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d8:	e853 3f00 	ldrex	r3, [r3]
 80046dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80046de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80046f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80046f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80046f6:	e841 2300 	strex	r3, r2, [r1]
 80046fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1e6      	bne.n	80046d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3308      	adds	r3, #8
 8004708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	e853 3f00 	ldrex	r3, [r3]
 8004710:	61fb      	str	r3, [r7, #28]
   return(result);
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	f023 0301 	bic.w	r3, r3, #1
 8004718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	3308      	adds	r3, #8
 8004720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800472a:	e841 2300 	strex	r3, r2, [r1]
 800472e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004732:	2b00      	cmp	r3, #0
 8004734:	d1e5      	bne.n	8004702 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800473a:	2b01      	cmp	r3, #1
 800473c:	d118      	bne.n	8004770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	e853 3f00 	ldrex	r3, [r3]
 800474a:	60bb      	str	r3, [r7, #8]
   return(result);
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f023 0310 	bic.w	r3, r3, #16
 8004752:	647b      	str	r3, [r7, #68]	@ 0x44
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	461a      	mov	r2, r3
 800475a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800475c:	61bb      	str	r3, [r7, #24]
 800475e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	e841 2300 	strex	r3, r2, [r1]
 8004768:	613b      	str	r3, [r7, #16]
   return(result);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1e6      	bne.n	800473e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2220      	movs	r2, #32
 8004774:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004784:	bf00      	nop
 8004786:	3754      	adds	r7, #84	@ 0x54
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800479c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80047ae:	68f8      	ldr	r0, [r7, #12]
 80047b0:	f7ff faca 	bl	8003d48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	e853 3f00 	ldrex	r3, [r3]
 80047d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e6:	6979      	ldr	r1, [r7, #20]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	e841 2300 	strex	r3, r2, [r1]
 80047ee:	613b      	str	r3, [r7, #16]
   return(result);
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1e6      	bne.n	80047c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff fa96 	bl	8003d34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004808:	bf00      	nop
 800480a:	3720      	adds	r7, #32
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b09c      	sub	sp, #112	@ 0x70
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800481e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004828:	2b22      	cmp	r3, #34	@ 0x22
 800482a:	f040 80be 	bne.w	80049aa <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004834:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004838:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800483c:	b2d9      	uxtb	r1, r3
 800483e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004842:	b2da      	uxtb	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004848:	400a      	ands	r2, r1
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004870:	b29b      	uxth	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	f040 80a3 	bne.w	80049be <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004880:	e853 3f00 	ldrex	r3, [r3]
 8004884:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004886:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004888:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800488c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	461a      	mov	r2, r3
 8004894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004896:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004898:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800489c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800489e:	e841 2300 	strex	r3, r2, [r1]
 80048a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1e6      	bne.n	8004878 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048b4:	e853 3f00 	ldrex	r3, [r3]
 80048b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	3308      	adds	r3, #8
 80048c8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80048ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80048cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d2:	e841 2300 	strex	r3, r2, [r1]
 80048d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1e5      	bne.n	80048aa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a34      	ldr	r2, [pc, #208]	@ (80049c8 <UART_RxISR_8BIT+0x1b8>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d01f      	beq.n	800493c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d018      	beq.n	800493c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004912:	e853 3f00 	ldrex	r3, [r3]
 8004916:	623b      	str	r3, [r7, #32]
   return(result);
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800491e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	461a      	mov	r2, r3
 8004926:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004928:	633b      	str	r3, [r7, #48]	@ 0x30
 800492a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800492e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1e6      	bne.n	800490a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004940:	2b01      	cmp	r3, #1
 8004942:	d12e      	bne.n	80049a2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	60fb      	str	r3, [r7, #12]
   return(result);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004968:	61fb      	str	r3, [r7, #28]
 800496a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	69b9      	ldr	r1, [r7, #24]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	617b      	str	r3, [r7, #20]
   return(result);
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b10      	cmp	r3, #16
 8004988:	d103      	bne.n	8004992 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2210      	movs	r2, #16
 8004990:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004998:	4619      	mov	r1, r3
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff f9de 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049a0:	e00d      	b.n	80049be <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f7fb ff78 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 80049a8:	e009      	b.n	80049be <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	8b1b      	ldrh	r3, [r3, #24]
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0208 	orr.w	r2, r2, #8
 80049ba:	b292      	uxth	r2, r2
 80049bc:	831a      	strh	r2, [r3, #24]
}
 80049be:	bf00      	nop
 80049c0:	3770      	adds	r7, #112	@ 0x70
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40008000 	.word	0x40008000

080049cc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b09c      	sub	sp, #112	@ 0x70
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80049da:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	f040 80be 	bne.w	8004b66 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80049f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80049fa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80049fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004a02:	4013      	ands	r3, r2
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	1c9a      	adds	r2, r3, #2
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f040 80a3 	bne.w	8004b7a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a3c:	e853 3f00 	ldrex	r3, [r3]
 8004a40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a48:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a52:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004a58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e6      	bne.n	8004a34 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	3308      	adds	r3, #8
 8004a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a86:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a34      	ldr	r2, [pc, #208]	@ (8004b84 <UART_RxISR_16BIT+0x1b8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d01f      	beq.n	8004af8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d018      	beq.n	8004af8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a3b      	ldr	r3, [r7, #32]
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ada:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e6      	bne.n	8004ac6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d12e      	bne.n	8004b5e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	e853 3f00 	ldrex	r3, [r3]
 8004b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	f023 0310 	bic.w	r3, r3, #16
 8004b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	461a      	mov	r2, r3
 8004b22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	613b      	str	r3, [r7, #16]
   return(result);
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e6      	bne.n	8004b06 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 0310 	and.w	r3, r3, #16
 8004b42:	2b10      	cmp	r3, #16
 8004b44:	d103      	bne.n	8004b4e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2210      	movs	r2, #16
 8004b4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b54:	4619      	mov	r1, r3
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff f900 	bl	8003d5c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b5c:	e00d      	b.n	8004b7a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7fb fe9a 	bl	8000898 <HAL_UART_RxCpltCallback>
}
 8004b64:	e009      	b.n	8004b7a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	8b1b      	ldrh	r3, [r3, #24]
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0208 	orr.w	r2, r2, #8
 8004b76:	b292      	uxth	r2, r2
 8004b78:	831a      	strh	r2, [r3, #24]
}
 8004b7a:	bf00      	nop
 8004b7c:	3770      	adds	r7, #112	@ 0x70
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40008000 	.word	0x40008000

08004b88 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <atoi>:
 8004b9c:	220a      	movs	r2, #10
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	f000 b87a 	b.w	8004c98 <strtol>

08004ba4 <_strtol_l.isra.0>:
 8004ba4:	2b24      	cmp	r3, #36	@ 0x24
 8004ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004baa:	4686      	mov	lr, r0
 8004bac:	4690      	mov	r8, r2
 8004bae:	d801      	bhi.n	8004bb4 <_strtol_l.isra.0+0x10>
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d106      	bne.n	8004bc2 <_strtol_l.isra.0+0x1e>
 8004bb4:	f000 f882 	bl	8004cbc <__errno>
 8004bb8:	2316      	movs	r3, #22
 8004bba:	6003      	str	r3, [r0, #0]
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	4834      	ldr	r0, [pc, #208]	@ (8004c94 <_strtol_l.isra.0+0xf0>)
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	462a      	mov	r2, r5
 8004bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bcc:	5d06      	ldrb	r6, [r0, r4]
 8004bce:	f016 0608 	ands.w	r6, r6, #8
 8004bd2:	d1f8      	bne.n	8004bc6 <_strtol_l.isra.0+0x22>
 8004bd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8004bd6:	d110      	bne.n	8004bfa <_strtol_l.isra.0+0x56>
 8004bd8:	782c      	ldrb	r4, [r5, #0]
 8004bda:	2601      	movs	r6, #1
 8004bdc:	1c95      	adds	r5, r2, #2
 8004bde:	f033 0210 	bics.w	r2, r3, #16
 8004be2:	d115      	bne.n	8004c10 <_strtol_l.isra.0+0x6c>
 8004be4:	2c30      	cmp	r4, #48	@ 0x30
 8004be6:	d10d      	bne.n	8004c04 <_strtol_l.isra.0+0x60>
 8004be8:	782a      	ldrb	r2, [r5, #0]
 8004bea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004bee:	2a58      	cmp	r2, #88	@ 0x58
 8004bf0:	d108      	bne.n	8004c04 <_strtol_l.isra.0+0x60>
 8004bf2:	786c      	ldrb	r4, [r5, #1]
 8004bf4:	3502      	adds	r5, #2
 8004bf6:	2310      	movs	r3, #16
 8004bf8:	e00a      	b.n	8004c10 <_strtol_l.isra.0+0x6c>
 8004bfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8004bfc:	bf04      	itt	eq
 8004bfe:	782c      	ldrbeq	r4, [r5, #0]
 8004c00:	1c95      	addeq	r5, r2, #2
 8004c02:	e7ec      	b.n	8004bde <_strtol_l.isra.0+0x3a>
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f6      	bne.n	8004bf6 <_strtol_l.isra.0+0x52>
 8004c08:	2c30      	cmp	r4, #48	@ 0x30
 8004c0a:	bf14      	ite	ne
 8004c0c:	230a      	movne	r3, #10
 8004c0e:	2308      	moveq	r3, #8
 8004c10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004c18:	2200      	movs	r2, #0
 8004c1a:	fbbc f9f3 	udiv	r9, ip, r3
 8004c1e:	4610      	mov	r0, r2
 8004c20:	fb03 ca19 	mls	sl, r3, r9, ip
 8004c24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004c28:	2f09      	cmp	r7, #9
 8004c2a:	d80f      	bhi.n	8004c4c <_strtol_l.isra.0+0xa8>
 8004c2c:	463c      	mov	r4, r7
 8004c2e:	42a3      	cmp	r3, r4
 8004c30:	dd1b      	ble.n	8004c6a <_strtol_l.isra.0+0xc6>
 8004c32:	1c57      	adds	r7, r2, #1
 8004c34:	d007      	beq.n	8004c46 <_strtol_l.isra.0+0xa2>
 8004c36:	4581      	cmp	r9, r0
 8004c38:	d314      	bcc.n	8004c64 <_strtol_l.isra.0+0xc0>
 8004c3a:	d101      	bne.n	8004c40 <_strtol_l.isra.0+0x9c>
 8004c3c:	45a2      	cmp	sl, r4
 8004c3e:	db11      	blt.n	8004c64 <_strtol_l.isra.0+0xc0>
 8004c40:	fb00 4003 	mla	r0, r0, r3, r4
 8004c44:	2201      	movs	r2, #1
 8004c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c4a:	e7eb      	b.n	8004c24 <_strtol_l.isra.0+0x80>
 8004c4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004c50:	2f19      	cmp	r7, #25
 8004c52:	d801      	bhi.n	8004c58 <_strtol_l.isra.0+0xb4>
 8004c54:	3c37      	subs	r4, #55	@ 0x37
 8004c56:	e7ea      	b.n	8004c2e <_strtol_l.isra.0+0x8a>
 8004c58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004c5c:	2f19      	cmp	r7, #25
 8004c5e:	d804      	bhi.n	8004c6a <_strtol_l.isra.0+0xc6>
 8004c60:	3c57      	subs	r4, #87	@ 0x57
 8004c62:	e7e4      	b.n	8004c2e <_strtol_l.isra.0+0x8a>
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	e7ed      	b.n	8004c46 <_strtol_l.isra.0+0xa2>
 8004c6a:	1c53      	adds	r3, r2, #1
 8004c6c:	d108      	bne.n	8004c80 <_strtol_l.isra.0+0xdc>
 8004c6e:	2322      	movs	r3, #34	@ 0x22
 8004c70:	f8ce 3000 	str.w	r3, [lr]
 8004c74:	4660      	mov	r0, ip
 8004c76:	f1b8 0f00 	cmp.w	r8, #0
 8004c7a:	d0a0      	beq.n	8004bbe <_strtol_l.isra.0+0x1a>
 8004c7c:	1e69      	subs	r1, r5, #1
 8004c7e:	e006      	b.n	8004c8e <_strtol_l.isra.0+0xea>
 8004c80:	b106      	cbz	r6, 8004c84 <_strtol_l.isra.0+0xe0>
 8004c82:	4240      	negs	r0, r0
 8004c84:	f1b8 0f00 	cmp.w	r8, #0
 8004c88:	d099      	beq.n	8004bbe <_strtol_l.isra.0+0x1a>
 8004c8a:	2a00      	cmp	r2, #0
 8004c8c:	d1f6      	bne.n	8004c7c <_strtol_l.isra.0+0xd8>
 8004c8e:	f8c8 1000 	str.w	r1, [r8]
 8004c92:	e794      	b.n	8004bbe <_strtol_l.isra.0+0x1a>
 8004c94:	08004d71 	.word	0x08004d71

08004c98 <strtol>:
 8004c98:	4613      	mov	r3, r2
 8004c9a:	460a      	mov	r2, r1
 8004c9c:	4601      	mov	r1, r0
 8004c9e:	4802      	ldr	r0, [pc, #8]	@ (8004ca8 <strtol+0x10>)
 8004ca0:	6800      	ldr	r0, [r0, #0]
 8004ca2:	f7ff bf7f 	b.w	8004ba4 <_strtol_l.isra.0>
 8004ca6:	bf00      	nop
 8004ca8:	2000000c 	.word	0x2000000c

08004cac <memset>:
 8004cac:	4402      	add	r2, r0
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d100      	bne.n	8004cb6 <memset+0xa>
 8004cb4:	4770      	bx	lr
 8004cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cba:	e7f9      	b.n	8004cb0 <memset+0x4>

08004cbc <__errno>:
 8004cbc:	4b01      	ldr	r3, [pc, #4]	@ (8004cc4 <__errno+0x8>)
 8004cbe:	6818      	ldr	r0, [r3, #0]
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	@ (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	@ (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 f818 	bl	8004d10 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004e7c 	.word	0x08004e7c
 8004d04:	08004e7c 	.word	0x08004e7c
 8004d08:	08004e7c 	.word	0x08004e7c
 8004d0c:	08004e80 	.word	0x08004e80

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
