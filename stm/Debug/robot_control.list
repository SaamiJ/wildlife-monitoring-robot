
robot_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d14  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ee8  08003ee8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003ee8  08003ee8  00004ee8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ef0  08003ef0  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ef0  08003ef0  00004ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ef4  08003ef4  00004ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ef8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08003f04  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08003f04  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000faac  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002008  00000000  00000000  00014ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00016af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b79  00000000  00000000  000179a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002006d  00000000  00000000  00018519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010889  00000000  00000000  00038586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5c47  00000000  00000000  00048e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010ea56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d90  00000000  00000000  0010ea9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0011282c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003e88 	.word	0x08003e88

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003e88 	.word	0x08003e88

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb5d 	bl	8000bba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f820 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f968 	bl	80007d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000508:	f000 f936 	bl	8000778 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800050c:	f000 f87c 	bl	8000608 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	480a      	ldr	r0, [pc, #40]	@ (800053c <main+0x44>)
 8000514:	f002 f8ae 	bl	8002674 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	setSpeed(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800051c:	f000 f9c2 	bl	80008a4 <setSpeed>
	HAL_Delay(5000);
 8000520:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000524:	f000 fbbe 	bl	8000ca4 <HAL_Delay>
	setSpeed(-500);
 8000528:	4805      	ldr	r0, [pc, #20]	@ (8000540 <main+0x48>)
 800052a:	f000 f9bb 	bl	80008a4 <setSpeed>
	HAL_Delay(5000);
 800052e:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000532:	f000 fbb7 	bl	8000ca4 <HAL_Delay>
	setSpeed(500);
 8000536:	bf00      	nop
 8000538:	e7ee      	b.n	8000518 <main+0x20>
 800053a:	bf00      	nop
 800053c:	20000028 	.word	0x20000028
 8000540:	fffffe0c 	.word	0xfffffe0c

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	@ 0x58
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0314 	add.w	r3, r7, #20
 800054e:	2244      	movs	r2, #68	@ 0x44
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f003 fc6b 	bl	8003e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	463b      	mov	r3, r7
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000566:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800056a:	f000 fe45 	bl	80011f8 <HAL_PWREx_ControlVoltageScaling>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000574:	f000 f990 	bl	8000898 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000578:	f000 fe20 	bl	80011bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800057c:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <SystemClock_Config+0xc0>)
 800057e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000582:	4a20      	ldr	r2, [pc, #128]	@ (8000604 <SystemClock_Config+0xc0>)
 8000584:	f023 0318 	bic.w	r3, r3, #24
 8000588:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800058c:	2314      	movs	r3, #20
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800059c:	2360      	movs	r3, #96	@ 0x60
 800059e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a0:	2302      	movs	r3, #2
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005a4:	2301      	movs	r3, #1
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005ac:	2328      	movs	r3, #40	@ 0x28
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b8:	2302      	movs	r3, #2
 80005ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fe6f 	bl	80012a4 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005cc:	f000 f964 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2303      	movs	r3, #3
 80005d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	2104      	movs	r1, #4
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fa6f 	bl	8001acc <HAL_RCC_ClockConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005f4:	f000 f950 	bl	8000898 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005f8:	f001 fe82 	bl	8002300 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000

08000608 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b09a      	sub	sp, #104	@ 0x68
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800060e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800061c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000628:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
 8000638:	615a      	str	r2, [r3, #20]
 800063a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	222c      	movs	r2, #44	@ 0x2c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 fbf3 	bl	8003e2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000648:	4b49      	ldr	r3, [pc, #292]	@ (8000770 <MX_TIM1_Init+0x168>)
 800064a:	4a4a      	ldr	r2, [pc, #296]	@ (8000774 <MX_TIM1_Init+0x16c>)
 800064c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800064e:	4b48      	ldr	r3, [pc, #288]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000650:	224f      	movs	r2, #79	@ 0x4f
 8000652:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b46      	ldr	r3, [pc, #280]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800065a:	4b45      	ldr	r3, [pc, #276]	@ (8000770 <MX_TIM1_Init+0x168>)
 800065c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000660:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b43      	ldr	r3, [pc, #268]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000668:	4b41      	ldr	r3, [pc, #260]	@ (8000770 <MX_TIM1_Init+0x168>)
 800066a:	2200      	movs	r2, #0
 800066c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800066e:	4b40      	ldr	r3, [pc, #256]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000670:	2280      	movs	r2, #128	@ 0x80
 8000672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000674:	483e      	ldr	r0, [pc, #248]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000676:	f001 ff45 	bl	8002504 <HAL_TIM_Base_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000680:	f000 f90a 	bl	8000898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000688:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800068a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800068e:	4619      	mov	r1, r3
 8000690:	4837      	ldr	r0, [pc, #220]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000692:	f002 f9e1 	bl	8002a58 <HAL_TIM_ConfigClockSource>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800069c:	f000 f8fc 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006a0:	4833      	ldr	r0, [pc, #204]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006a2:	f001 ff86 	bl	80025b2 <HAL_TIM_PWM_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80006ac:	f000 f8f4 	bl	8000898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006b4:	2300      	movs	r3, #0
 80006b6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006bc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006c0:	4619      	mov	r1, r3
 80006c2:	482b      	ldr	r0, [pc, #172]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006c4:	f002 fe40 	bl	8003348 <HAL_TIMEx_MasterConfigSynchronization>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ce:	f000 f8e3 	bl	8000898 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006d2:	2360      	movs	r3, #96	@ 0x60
 80006d4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006da:	2300      	movs	r3, #0
 80006dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006de:	2300      	movs	r3, #0
 80006e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006e2:	2300      	movs	r3, #0
 80006e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006e6:	2300      	movs	r3, #0
 80006e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006ea:	2300      	movs	r3, #0
 80006ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006f2:	2200      	movs	r2, #0
 80006f4:	4619      	mov	r1, r3
 80006f6:	481e      	ldr	r0, [pc, #120]	@ (8000770 <MX_TIM1_Init+0x168>)
 80006f8:	f002 f89a 	bl	8002830 <HAL_TIM_PWM_ConfigChannel>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000702:	f000 f8c9 	bl	8000898 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000706:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800070a:	2204      	movs	r2, #4
 800070c:	4619      	mov	r1, r3
 800070e:	4818      	ldr	r0, [pc, #96]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000710:	f002 f88e 	bl	8002830 <HAL_TIM_PWM_ConfigChannel>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800071a:	f000 f8bd 	bl	8000898 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000732:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000736:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800073c:	2300      	movs	r3, #0
 800073e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4807      	ldr	r0, [pc, #28]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000754:	f002 fe5e 	bl	8003414 <HAL_TIMEx_ConfigBreakDeadTime>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800075e:	f000 f89b 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000762:	4803      	ldr	r0, [pc, #12]	@ (8000770 <MX_TIM1_Init+0x168>)
 8000764:	f000 f91c 	bl	80009a0 <HAL_TIM_MspPostInit>

}
 8000768:	bf00      	nop
 800076a:	3768      	adds	r7, #104	@ 0x68
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000028 	.word	0x20000028
 8000774:	40012c00 	.word	0x40012c00

08000778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <MX_USART2_UART_Init+0x5c>)
 8000780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000782:	4b13      	ldr	r3, [pc, #76]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000784:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 800079e:	220c      	movs	r2, #12
 80007a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x58>)
 80007bc:	f002 fea2 	bl	8003504 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007c6:	f000 f867 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000074 	.word	0x20000074
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b088      	sub	sp, #32
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	4b28      	ldr	r3, [pc, #160]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a27      	ldr	r2, [pc, #156]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b25      	ldr	r3, [pc, #148]	@ (8000890 <MX_GPIO_Init+0xb8>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a21      	ldr	r2, [pc, #132]	@ (8000890 <MX_GPIO_Init+0xb8>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a1b      	ldr	r2, [pc, #108]	@ (8000890 <MX_GPIO_Init+0xb8>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_GPIO_Init+0xb8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2130      	movs	r1, #48	@ 0x30
 800083a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083e:	f000 fca5 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2108      	movs	r1, #8
 8000846:	4813      	ldr	r0, [pc, #76]	@ (8000894 <MX_GPIO_Init+0xbc>)
 8000848:	f000 fca0 	bl	800118c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800084c:	2330      	movs	r3, #48	@ 0x30
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000866:	f000 fb27 	bl	8000eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800086a:	2308      	movs	r3, #8
 800086c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086e:	2301      	movs	r3, #1
 8000870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 030c 	add.w	r3, r7, #12
 800087e:	4619      	mov	r1, r3
 8000880:	4804      	ldr	r0, [pc, #16]	@ (8000894 <MX_GPIO_Init+0xbc>)
 8000882:	f000 fb19 	bl	8000eb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000886:	bf00      	nop
 8000888:	3720      	adds	r7, #32
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40021000 	.word	0x40021000
 8000894:	48000400 	.word	0x48000400

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <setSpeed>:
 */

#include "motor_control.h"

void setSpeed(int16_t speed)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	if (speed >= 0)
 80008ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	db0c      	blt.n	80008d0 <setSpeed+0x2c>
	{
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_LEFT_IN1_PIN, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2110      	movs	r1, #16
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 fc65 	bl	800118c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_LEFT_IN2_PIN, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2120      	movs	r1, #32
 80008c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ca:	f000 fc5f 	bl	800118c <HAL_GPIO_WritePin>
 80008ce:	e00f      	b.n	80008f0 <setSpeed+0x4c>
	}
	else
	{
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_LEFT_IN1_PIN, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d8:	f000 fc58 	bl	800118c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MOTOR_GPIO_PORT, MOTOR_LEFT_IN2_PIN, GPIO_PIN_SET);
 80008dc:	2201      	movs	r2, #1
 80008de:	2120      	movs	r1, #32
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e4:	f000 fc52 	bl	800118c <HAL_GPIO_WritePin>
        speed = -speed;
 80008e8:	88fb      	ldrh	r3, [r7, #6]
 80008ea:	425b      	negs	r3, r3
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	80fb      	strh	r3, [r7, #6]
	}

    if (speed > 1000) { speed = 1000; }
 80008f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80008f8:	dd02      	ble.n	8000900 <setSpeed+0x5c>
 80008fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008fe:	80fb      	strh	r3, [r7, #6]

    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 8000900:	4b04      	ldr	r3, [pc, #16]	@ (8000914 <setSpeed+0x70>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000908:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000028 	.word	0x20000028

08000918 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	@ (800095c <HAL_MspInit+0x44>)
 8000920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000922:	4a0e      	ldr	r2, [pc, #56]	@ (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6613      	str	r3, [r2, #96]	@ 0x60
 800092a:	4b0c      	ldr	r3, [pc, #48]	@ (800095c <HAL_MspInit+0x44>)
 800092c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	@ (800095c <HAL_MspInit+0x44>)
 8000938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800093a:	4a08      	ldr	r2, [pc, #32]	@ (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000940:	6593      	str	r3, [r2, #88]	@ 0x58
 8000942:	4b06      	ldr	r3, [pc, #24]	@ (800095c <HAL_MspInit+0x44>)
 8000944:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000946:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0a      	ldr	r2, [pc, #40]	@ (8000998 <HAL_TIM_Base_MspInit+0x38>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d10b      	bne.n	800098a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000972:	4b0a      	ldr	r3, [pc, #40]	@ (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000976:	4a09      	ldr	r2, [pc, #36]	@ (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000978:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800097c:	6613      	str	r3, [r2, #96]	@ 0x60
 800097e:	4b07      	ldr	r3, [pc, #28]	@ (800099c <HAL_TIM_Base_MspInit+0x3c>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800098a:	bf00      	nop
 800098c:	3714      	adds	r7, #20
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40012c00 	.word	0x40012c00
 800099c:	40021000 	.word	0x40021000

080009a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b088      	sub	sp, #32
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <HAL_TIM_MspPostInit+0x68>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d11d      	bne.n	80009fe <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c2:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c6:	4a11      	ldr	r2, [pc, #68]	@ (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <HAL_TIM_MspPostInit+0x6c>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009da:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80009de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80009ec:	2301      	movs	r3, #1
 80009ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009fa:	f000 fa5d 	bl	8000eb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009fe:	bf00      	nop
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40012c00 	.word	0x40012c00
 8000a0c:	40021000 	.word	0x40021000

08000a10 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	@ 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	@ 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 f9fc 	bl	8003e2e <memset>
  if(huart->Instance==USART2)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a28      	ldr	r2, [pc, #160]	@ (8000adc <HAL_UART_MspInit+0xcc>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d148      	bne.n	8000ad2 <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a40:	2302      	movs	r3, #2
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fa61 	bl	8001f14 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ff1e 	bl	8000898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a60:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a66:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a80:	4b17      	ldr	r3, [pc, #92]	@ (8000ae0 <HAL_UART_MspInit+0xd0>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000a8c:	2304      	movs	r3, #4
 8000a8e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000aa0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aaa:	f000 fa05 	bl	8000eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000aae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ab2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000ac0:	2303      	movs	r3, #3
 8000ac2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ace:	f000 f9f3 	bl	8000eb8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3778      	adds	r7, #120	@ 0x78
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f893 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <SystemInit+0x20>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <SystemInit+0x20>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b6c:	f7ff ffea 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	@ (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	@ (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b96:	f003 f953 	bl	8003e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9a:	f7ff fcad 	bl	80004f8 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba0:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bac:	08003ef8 	.word	0x08003ef8
  ldr r2, =_sbss
 8000bb0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bb4:	20000100 	.word	0x20000100

08000bb8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC1_IRQHandler>

08000bba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 f943 	bl	8000e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f000 f80e 	bl	8000bec <HAL_InitTick>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	e001      	b.n	8000be0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bdc:	f7ff fe9c 	bl	8000918 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be0:	79fb      	ldrb	r3, [r7, #7]
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bf8:	4b17      	ldr	r3, [pc, #92]	@ (8000c58 <HAL_InitTick+0x6c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d023      	beq.n	8000c48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c00:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <HAL_InitTick+0x70>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b14      	ldr	r3, [pc, #80]	@ (8000c58 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f941 	bl	8000e9e <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10f      	bne.n	8000c42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d809      	bhi.n	8000c3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f919 	bl	8000e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c34:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <HAL_InitTick+0x74>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e007      	b.n	8000c4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	e004      	b.n	8000c4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	e001      	b.n	8000c4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000008 	.word	0x20000008
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <HAL_IncTick+0x20>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <HAL_IncTick+0x24>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200000fc 	.word	0x200000fc

08000c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b03      	ldr	r3, [pc, #12]	@ (8000ca0 <HAL_GetTick+0x14>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	200000fc 	.word	0x200000fc

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff ffee 	bl	8000c8c <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffde 	bl	8000c8c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000008 	.word	0x20000008

08000cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d08:	4013      	ands	r3, r2
 8000d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d1e:	4a04      	ldr	r2, [pc, #16]	@ (8000d30 <__NVIC_SetPriorityGrouping+0x44>)
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	60d3      	str	r3, [r2, #12]
}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d38:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <__NVIC_GetPriorityGrouping+0x18>)
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	0a1b      	lsrs	r3, r3, #8
 8000d3e:	f003 0307 	and.w	r3, r3, #7
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	db0a      	blt.n	8000d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <__NVIC_SetPriority+0x4c>)
 8000d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	b2d2      	uxtb	r2, r2
 8000d72:	440b      	add	r3, r1
 8000d74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d78:	e00a      	b.n	8000d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4908      	ldr	r1, [pc, #32]	@ (8000da0 <__NVIC_SetPriority+0x50>)
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	f003 030f 	and.w	r3, r3, #15
 8000d86:	3b04      	subs	r3, #4
 8000d88:	0112      	lsls	r2, r2, #4
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	440b      	add	r3, r1
 8000d8e:	761a      	strb	r2, [r3, #24]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b089      	sub	sp, #36	@ 0x24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	f1c3 0307 	rsb	r3, r3, #7
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	bf28      	it	cs
 8000dc2:	2304      	movcs	r3, #4
 8000dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d902      	bls.n	8000dd4 <NVIC_EncodePriority+0x30>
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3b03      	subs	r3, #3
 8000dd2:	e000      	b.n	8000dd6 <NVIC_EncodePriority+0x32>
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43da      	mvns	r2, r3
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	401a      	ands	r2, r3
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	43d9      	mvns	r1, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	4313      	orrs	r3, r2
         );
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e1c:	d301      	bcc.n	8000e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e00f      	b.n	8000e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e22:	4a0a      	ldr	r2, [pc, #40]	@ (8000e4c <SysTick_Config+0x40>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e30:	f7ff ff8e 	bl	8000d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e34:	4b05      	ldr	r3, [pc, #20]	@ (8000e4c <SysTick_Config+0x40>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3a:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <SysTick_Config+0x40>)
 8000e3c:	2207      	movs	r2, #7
 8000e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	e000e010 	.word	0xe000e010

08000e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff ff47 	bl	8000cec <__NVIC_SetPriorityGrouping>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
 8000e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e78:	f7ff ff5c 	bl	8000d34 <__NVIC_GetPriorityGrouping>
 8000e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	6978      	ldr	r0, [r7, #20]
 8000e84:	f7ff ff8e 	bl	8000da4 <NVIC_EncodePriority>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8e:	4611      	mov	r1, r2
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff ff5d 	bl	8000d50 <__NVIC_SetPriority>
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b082      	sub	sp, #8
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea6:	6878      	ldr	r0, [r7, #4]
 8000ea8:	f7ff ffb0 	bl	8000e0c <SysTick_Config>
 8000eac:	4603      	mov	r3, r0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec6:	e148      	b.n	800115a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f000 813a 	beq.w	8001154 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0303 	and.w	r3, r3, #3
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d005      	beq.n	8000ef8 <HAL_GPIO_Init+0x40>
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d130      	bne.n	8000f5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f2e:	2201      	movs	r2, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	091b      	lsrs	r3, r3, #4
 8000f44:	f003 0201 	and.w	r2, r3, #1
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d017      	beq.n	8000f96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d123      	bne.n	8000fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691a      	ldr	r2, [r3, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f003 0307 	and.w	r3, r3, #7
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	08da      	lsrs	r2, r3, #3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3208      	adds	r2, #8
 8000fe4:	6939      	ldr	r1, [r7, #16]
 8000fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 0203 	and.w	r2, r3, #3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001026:	2b00      	cmp	r3, #0
 8001028:	f000 8094 	beq.w	8001154 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102c:	4b52      	ldr	r3, [pc, #328]	@ (8001178 <HAL_GPIO_Init+0x2c0>)
 800102e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001030:	4a51      	ldr	r2, [pc, #324]	@ (8001178 <HAL_GPIO_Init+0x2c0>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6613      	str	r3, [r2, #96]	@ 0x60
 8001038:	4b4f      	ldr	r3, [pc, #316]	@ (8001178 <HAL_GPIO_Init+0x2c0>)
 800103a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001044:	4a4d      	ldr	r2, [pc, #308]	@ (800117c <HAL_GPIO_Init+0x2c4>)
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	089b      	lsrs	r3, r3, #2
 800104a:	3302      	adds	r3, #2
 800104c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800106e:	d00d      	beq.n	800108c <HAL_GPIO_Init+0x1d4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a43      	ldr	r2, [pc, #268]	@ (8001180 <HAL_GPIO_Init+0x2c8>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d007      	beq.n	8001088 <HAL_GPIO_Init+0x1d0>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a42      	ldr	r2, [pc, #264]	@ (8001184 <HAL_GPIO_Init+0x2cc>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d101      	bne.n	8001084 <HAL_GPIO_Init+0x1cc>
 8001080:	2302      	movs	r3, #2
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 8001084:	2307      	movs	r3, #7
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x1d6>
 800108c:	2300      	movs	r3, #0
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	4937      	ldr	r1, [pc, #220]	@ (800117c <HAL_GPIO_Init+0x2c4>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ac:	4b36      	ldr	r3, [pc, #216]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d0:	4a2d      	ldr	r2, [pc, #180]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fa:	4a23      	ldr	r2, [pc, #140]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001100:	4b21      	ldr	r3, [pc, #132]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001124:	4a18      	ldr	r2, [pc, #96]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800112a:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800114e:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_GPIO_Init+0x2d0>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f aeaf 	bne.w	8000ec8 <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
 8001198:	4613      	mov	r3, r2
 800119a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800119c:	787b      	ldrb	r3, [r7, #1]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011a2:	887a      	ldrh	r2, [r7, #2]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a8:	e002      	b.n	80011b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011aa:	887a      	ldrh	r2, [r7, #2]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c0:	4b05      	ldr	r3, [pc, #20]	@ (80011d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40007000 	.word	0x40007000

080011dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011e0:	4b04      	ldr	r3, [pc, #16]	@ (80011f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40007000 	.word	0x40007000

080011f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001206:	d130      	bne.n	800126a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001208:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001214:	d038      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001216:	4b20      	ldr	r3, [pc, #128]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800121e:	4a1e      	ldr	r2, [pc, #120]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001220:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001224:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001226:	4b1d      	ldr	r3, [pc, #116]	@ (800129c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2232      	movs	r2, #50	@ 0x32
 800122c:	fb02 f303 	mul.w	r3, r2, r3
 8001230:	4a1b      	ldr	r2, [pc, #108]	@ (80012a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	0c9b      	lsrs	r3, r3, #18
 8001238:	3301      	adds	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	e002      	b.n	8001244 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3b01      	subs	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001244:	4b14      	ldr	r3, [pc, #80]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800124c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001250:	d102      	bne.n	8001258 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f2      	bne.n	800123e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001258:	4b0f      	ldr	r3, [pc, #60]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001264:	d110      	bne.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e00f      	b.n	800128a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800126a:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001276:	d007      	beq.n	8001288 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001278:	4b07      	ldr	r3, [pc, #28]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001280:	4a05      	ldr	r2, [pc, #20]	@ (8001298 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001286:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000
 800129c:	20000000 	.word	0x20000000
 80012a0:	431bde83 	.word	0x431bde83

080012a4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d102      	bne.n	80012b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f000 bc02 	b.w	8001abc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b8:	4b96      	ldr	r3, [pc, #600]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c2:	4b94      	ldr	r3, [pc, #592]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	f003 0303 	and.w	r3, r3, #3
 80012ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80e4 	beq.w	80014a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d007      	beq.n	80012f0 <HAL_RCC_OscConfig+0x4c>
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b0c      	cmp	r3, #12
 80012e4:	f040 808b 	bne.w	80013fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	f040 8087 	bne.w	80013fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012f0:	4b88      	ldr	r3, [pc, #544]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x64>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	699b      	ldr	r3, [r3, #24]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d101      	bne.n	8001308 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e3d9      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	4b81      	ldr	r3, [pc, #516]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0308 	and.w	r3, r3, #8
 8001314:	2b00      	cmp	r3, #0
 8001316:	d004      	beq.n	8001322 <HAL_RCC_OscConfig+0x7e>
 8001318:	4b7e      	ldr	r3, [pc, #504]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001320:	e005      	b.n	800132e <HAL_RCC_OscConfig+0x8a>
 8001322:	4b7c      	ldr	r3, [pc, #496]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800132e:	4293      	cmp	r3, r2
 8001330:	d223      	bcs.n	800137a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fd8c 	bl	8001e54 <RCC_SetFlashLatencyFromMSIRange>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e3ba      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001346:	4b73      	ldr	r3, [pc, #460]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a72      	ldr	r2, [pc, #456]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b70      	ldr	r3, [pc, #448]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a1b      	ldr	r3, [r3, #32]
 800135e:	496d      	ldr	r1, [pc, #436]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001360:	4313      	orrs	r3, r2
 8001362:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001364:	4b6b      	ldr	r3, [pc, #428]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69db      	ldr	r3, [r3, #28]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	4968      	ldr	r1, [pc, #416]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001374:	4313      	orrs	r3, r2
 8001376:	604b      	str	r3, [r1, #4]
 8001378:	e025      	b.n	80013c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800137a:	4b66      	ldr	r3, [pc, #408]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a65      	ldr	r2, [pc, #404]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001380:	f043 0308 	orr.w	r3, r3, #8
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	4b63      	ldr	r3, [pc, #396]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a1b      	ldr	r3, [r3, #32]
 8001392:	4960      	ldr	r1, [pc, #384]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001394:	4313      	orrs	r3, r2
 8001396:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001398:	4b5e      	ldr	r3, [pc, #376]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	495b      	ldr	r1, [pc, #364]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 fd4c 	bl	8001e54 <RCC_SetFlashLatencyFromMSIRange>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e37a      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013c6:	f000 fc81 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80013ca:	4602      	mov	r2, r0
 80013cc:	4b51      	ldr	r3, [pc, #324]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	4950      	ldr	r1, [pc, #320]	@ (8001518 <HAL_RCC_OscConfig+0x274>)
 80013d8:	5ccb      	ldrb	r3, [r1, r3]
 80013da:	f003 031f 	and.w	r3, r3, #31
 80013de:	fa22 f303 	lsr.w	r3, r2, r3
 80013e2:	4a4e      	ldr	r2, [pc, #312]	@ (800151c <HAL_RCC_OscConfig+0x278>)
 80013e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001520 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fbfe 	bl	8000bec <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d052      	beq.n	80014a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	e35e      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d032      	beq.n	800146c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001406:	4b43      	ldr	r3, [pc, #268]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a42      	ldr	r2, [pc, #264]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001412:	f7ff fc3b 	bl	8000c8c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800141a:	f7ff fc37 	bl	8000c8c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e347      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0302 	and.w	r3, r3, #2
 8001434:	2b00      	cmp	r3, #0
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001438:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a35      	ldr	r2, [pc, #212]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800143e:	f043 0308 	orr.w	r3, r3, #8
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a1b      	ldr	r3, [r3, #32]
 8001450:	4930      	ldr	r1, [pc, #192]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001452:	4313      	orrs	r3, r2
 8001454:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001456:	4b2f      	ldr	r3, [pc, #188]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	492b      	ldr	r1, [pc, #172]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001466:	4313      	orrs	r3, r2
 8001468:	604b      	str	r3, [r1, #4]
 800146a:	e01a      	b.n	80014a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800146c:	4b29      	ldr	r3, [pc, #164]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a28      	ldr	r2, [pc, #160]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001478:	f7ff fc08 	bl	8000c8c <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800147e:	e008      	b.n	8001492 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001480:	f7ff fc04 	bl	8000c8c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d901      	bls.n	8001492 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e314      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x1dc>
 800149e:	e000      	b.n	80014a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d073      	beq.n	8001596 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2b08      	cmp	r3, #8
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x21c>
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	2b0c      	cmp	r3, #12
 80014b8:	d10e      	bne.n	80014d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	2b03      	cmp	r3, #3
 80014be:	d10b      	bne.n	80014d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d063      	beq.n	8001594 <HAL_RCC_OscConfig+0x2f0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d15f      	bne.n	8001594 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e2f1      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_OscConfig+0x24c>
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80014e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	e025      	b.n	800153c <HAL_RCC_OscConfig+0x298>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014f8:	d114      	bne.n	8001524 <HAL_RCC_OscConfig+0x280>
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a05      	ldr	r2, [pc, #20]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a02      	ldr	r2, [pc, #8]	@ (8001514 <HAL_RCC_OscConfig+0x270>)
 800150c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	e013      	b.n	800153c <HAL_RCC_OscConfig+0x298>
 8001514:	40021000 	.word	0x40021000
 8001518:	08003ea0 	.word	0x08003ea0
 800151c:	20000000 	.word	0x20000000
 8001520:	20000004 	.word	0x20000004
 8001524:	4ba0      	ldr	r3, [pc, #640]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a9f      	ldr	r2, [pc, #636]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800152a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b9d      	ldr	r3, [pc, #628]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a9c      	ldr	r2, [pc, #624]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001536:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800153a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d013      	beq.n	800156c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fba2 	bl	8000c8c <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fb9e 	bl	8000c8c <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e2ae      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800155e:	4b92      	ldr	r3, [pc, #584]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d0f0      	beq.n	800154c <HAL_RCC_OscConfig+0x2a8>
 800156a:	e014      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fb8e 	bl	8000c8c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001574:	f7ff fb8a 	bl	8000c8c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	@ 0x64
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e29a      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001586:	4b88      	ldr	r3, [pc, #544]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x2d0>
 8001592:	e000      	b.n	8001596 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d060      	beq.n	8001664 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x310>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d119      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d116      	bne.n	80015e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015b4:	4b7c      	ldr	r3, [pc, #496]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_OscConfig+0x328>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e277      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015cc:	4b76      	ldr	r3, [pc, #472]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	061b      	lsls	r3, r3, #24
 80015da:	4973      	ldr	r1, [pc, #460]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015dc:	4313      	orrs	r3, r2
 80015de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015e0:	e040      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d023      	beq.n	8001632 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ea:	4b6f      	ldr	r3, [pc, #444]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a6e      	ldr	r2, [pc, #440]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80015f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f6:	f7ff fb49 	bl	8000c8c <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb45 	bl	8000c8c <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e255      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001610:	4b65      	ldr	r3, [pc, #404]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f0      	beq.n	80015fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161c:	4b62      	ldr	r3, [pc, #392]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	495f      	ldr	r1, [pc, #380]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800162c:	4313      	orrs	r3, r2
 800162e:	604b      	str	r3, [r1, #4]
 8001630:	e018      	b.n	8001664 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001632:	4b5d      	ldr	r3, [pc, #372]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a5c      	ldr	r2, [pc, #368]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fb25 	bl	8000c8c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fb21 	bl	8000c8c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e231      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001658:	4b53      	ldr	r3, [pc, #332]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d03c      	beq.n	80016ea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	695b      	ldr	r3, [r3, #20]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01c      	beq.n	80016b2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001678:	4b4b      	ldr	r3, [pc, #300]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800167e:	4a4a      	ldr	r2, [pc, #296]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fb00 	bl	8000c8c <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fafc 	bl	8000c8c <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e20c      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a2:	4b41      	ldr	r3, [pc, #260]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0ef      	beq.n	8001690 <HAL_RCC_OscConfig+0x3ec>
 80016b0:	e01b      	b.n	80016ea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b2:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016b8:	4a3b      	ldr	r2, [pc, #236]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016ba:	f023 0301 	bic.w	r3, r3, #1
 80016be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c2:	f7ff fae3 	bl	8000c8c <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ca:	f7ff fadf 	bl	8000c8c <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e1ef      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ef      	bne.n	80016ca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 80a6 	beq.w	8001844 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016fc:	4b2a      	ldr	r3, [pc, #168]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 80016fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d10d      	bne.n	8001724 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	4b27      	ldr	r3, [pc, #156]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800170a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800170c:	4a26      	ldr	r2, [pc, #152]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800170e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001712:	6593      	str	r3, [r2, #88]	@ 0x58
 8001714:	4b24      	ldr	r3, [pc, #144]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001720:	2301      	movs	r3, #1
 8001722:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001724:	4b21      	ldr	r3, [pc, #132]	@ (80017ac <HAL_RCC_OscConfig+0x508>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d118      	bne.n	8001762 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001730:	4b1e      	ldr	r3, [pc, #120]	@ (80017ac <HAL_RCC_OscConfig+0x508>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a1d      	ldr	r2, [pc, #116]	@ (80017ac <HAL_RCC_OscConfig+0x508>)
 8001736:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800173c:	f7ff faa6 	bl	8000c8c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001744:	f7ff faa2 	bl	8000c8c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e1b2      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_RCC_OscConfig+0x508>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d108      	bne.n	800177c <HAL_RCC_OscConfig+0x4d8>
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800176c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001770:	4a0d      	ldr	r2, [pc, #52]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800177a:	e029      	b.n	80017d0 <HAL_RCC_OscConfig+0x52c>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b05      	cmp	r3, #5
 8001782:	d115      	bne.n	80017b0 <HAL_RCC_OscConfig+0x50c>
 8001784:	4b08      	ldr	r3, [pc, #32]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800178a:	4a07      	ldr	r2, [pc, #28]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0304 	orr.w	r3, r3, #4
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a03      	ldr	r2, [pc, #12]	@ (80017a8 <HAL_RCC_OscConfig+0x504>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	e014      	b.n	80017d0 <HAL_RCC_OscConfig+0x52c>
 80017a6:	bf00      	nop
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
 80017b0:	4b9a      	ldr	r3, [pc, #616]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017b6:	4a99      	ldr	r2, [pc, #612]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017c0:	4b96      	ldr	r3, [pc, #600]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80017c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017c6:	4a95      	ldr	r2, [pc, #596]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80017c8:	f023 0304 	bic.w	r3, r3, #4
 80017cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d016      	beq.n	8001806 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d8:	f7ff fa58 	bl	8000c8c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e0:	f7ff fa54 	bl	8000c8c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e162      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017f6:	4b89      	ldr	r3, [pc, #548]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80017f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fc:	f003 0302 	and.w	r3, r3, #2
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0ed      	beq.n	80017e0 <HAL_RCC_OscConfig+0x53c>
 8001804:	e015      	b.n	8001832 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001806:	f7ff fa41 	bl	8000c8c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800180c:	e00a      	b.n	8001824 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180e:	f7ff fa3d 	bl	8000c8c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181c:	4293      	cmp	r3, r2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e14b      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001824:	4b7d      	ldr	r3, [pc, #500]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001826:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1ed      	bne.n	800180e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001832:	7ffb      	ldrb	r3, [r7, #31]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001838:	4b78      	ldr	r3, [pc, #480]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 800183a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800183c:	4a77      	ldr	r2, [pc, #476]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 800183e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001842:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b00      	cmp	r3, #0
 800184e:	d03c      	beq.n	80018ca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01c      	beq.n	8001892 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001858:	4b70      	ldr	r3, [pc, #448]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 800185a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800185e:	4a6f      	ldr	r2, [pc, #444]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001868:	f7ff fa10 	bl	8000c8c <HAL_GetTick>
 800186c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001870:	f7ff fa0c 	bl	8000c8c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e11c      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001882:	4b66      	ldr	r3, [pc, #408]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001884:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0ef      	beq.n	8001870 <HAL_RCC_OscConfig+0x5cc>
 8001890:	e01b      	b.n	80018ca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001892:	4b62      	ldr	r3, [pc, #392]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001894:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001898:	4a60      	ldr	r2, [pc, #384]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a2:	f7ff f9f3 	bl	8000c8c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018aa:	f7ff f9ef 	bl	8000c8c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e0ff      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018bc:	4b57      	ldr	r3, [pc, #348]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80018be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ef      	bne.n	80018aa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 80f3 	beq.w	8001aba <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018d8:	2b02      	cmp	r3, #2
 80018da:	f040 80c9 	bne.w	8001a70 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018de:	4b4f      	ldr	r3, [pc, #316]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f003 0203 	and.w	r2, r3, #3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d12c      	bne.n	800194c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fc:	3b01      	subs	r3, #1
 80018fe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d123      	bne.n	800194c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800190e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d11b      	bne.n	800194c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800191e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001920:	429a      	cmp	r2, r3
 8001922:	d113      	bne.n	800194c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800192e:	085b      	lsrs	r3, r3, #1
 8001930:	3b01      	subs	r3, #1
 8001932:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d109      	bne.n	800194c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	3b01      	subs	r3, #1
 8001946:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d06b      	beq.n	8001a24 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b0c      	cmp	r3, #12
 8001950:	d062      	beq.n	8001a18 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001952:	4b32      	ldr	r3, [pc, #200]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0ac      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001962:	4b2e      	ldr	r3, [pc, #184]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a2d      	ldr	r2, [pc, #180]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001968:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800196c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800196e:	f7ff f98d 	bl	8000c8c <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f989 	bl	8000c8c <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e099      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001994:	4b21      	ldr	r3, [pc, #132]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_RCC_OscConfig+0x77c>)
 800199a:	4013      	ands	r3, r2
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80019a4:	3a01      	subs	r2, #1
 80019a6:	0112      	lsls	r2, r2, #4
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80019ae:	0212      	lsls	r2, r2, #8
 80019b0:	4311      	orrs	r1, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019b6:	0852      	lsrs	r2, r2, #1
 80019b8:	3a01      	subs	r2, #1
 80019ba:	0552      	lsls	r2, r2, #21
 80019bc:	4311      	orrs	r1, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80019c2:	0852      	lsrs	r2, r2, #1
 80019c4:	3a01      	subs	r2, #1
 80019c6:	0652      	lsls	r2, r2, #25
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019ce:	06d2      	lsls	r2, r2, #27
 80019d0:	430a      	orrs	r2, r1
 80019d2:	4912      	ldr	r1, [pc, #72]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d8:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019e4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019f0:	f7ff f94c 	bl	8000c8c <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f8:	f7ff f948 	bl	8000c8c <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e058      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a0a:	4b04      	ldr	r3, [pc, #16]	@ (8001a1c <HAL_RCC_OscConfig+0x778>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a16:	e050      	b.n	8001aba <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e04f      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d144      	bne.n	8001aba <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a23      	ldr	r2, [pc, #140]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4a20      	ldr	r2, [pc, #128]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a48:	f7ff f920 	bl	8000c8c <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff f91c 	bl	8000c8c <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e02c      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x7ac>
 8001a6e:	e024      	b.n	8001aba <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d01f      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a7c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a82:	f7ff f903 	bl	8000c8c <HAL_GetTick>
 8001a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a88:	e008      	b.n	8001a9c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8a:	f7ff f8ff 	bl	8000c8c <HAL_GetTick>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e00f      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f0      	bne.n	8001a8a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	4905      	ldr	r1, [pc, #20]	@ (8001ac4 <HAL_RCC_OscConfig+0x820>)
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x824>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60cb      	str	r3, [r1, #12]
 8001ab4:	e001      	b.n	8001aba <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e000      	b.n	8001abc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3720      	adds	r7, #32
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	feeefffc 	.word	0xfeeefffc

08001acc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e0e7      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ae0:	4b75      	ldr	r3, [pc, #468]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d910      	bls.n	8001b10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aee:	4b72      	ldr	r3, [pc, #456]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 0207 	bic.w	r2, r3, #7
 8001af6:	4970      	ldr	r1, [pc, #448]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b6e      	ldr	r3, [pc, #440]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e0cf      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d010      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	4b66      	ldr	r3, [pc, #408]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d908      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b2c:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	4960      	ldr	r1, [pc, #384]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d04c      	beq.n	8001be4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	d107      	bne.n	8001b62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b52:	4b5a      	ldr	r3, [pc, #360]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d121      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0a6      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d107      	bne.n	8001b7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	4b54      	ldr	r3, [pc, #336]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d115      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e09a      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b82:	4b4e      	ldr	r3, [pc, #312]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d109      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e08e      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b92:	4b4a      	ldr	r3, [pc, #296]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e086      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ba2:	4b46      	ldr	r3, [pc, #280]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0203 	bic.w	r2, r3, #3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4943      	ldr	r1, [pc, #268]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bb4:	f7ff f86a 	bl	8000c8c <HAL_GetTick>
 8001bb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbc:	f7ff f866 	bl	8000c8c <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e06e      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 020c 	and.w	r2, r3, #12
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d1eb      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0302 	and.w	r3, r3, #2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d010      	beq.n	8001c12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	4b31      	ldr	r3, [pc, #196]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d208      	bcs.n	8001c12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c00:	4b2e      	ldr	r3, [pc, #184]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	492b      	ldr	r1, [pc, #172]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c12:	4b29      	ldr	r3, [pc, #164]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d210      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c20:	4b25      	ldr	r3, [pc, #148]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f023 0207 	bic.w	r2, r3, #7
 8001c28:	4923      	ldr	r1, [pc, #140]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e036      	b.n	8001cb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	4918      	ldr	r1, [pc, #96]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d009      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c6c:	4b13      	ldr	r3, [pc, #76]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4910      	ldr	r1, [pc, #64]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c80:	f000 f824 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b0d      	ldr	r3, [pc, #52]	@ (8001cbc <HAL_RCC_ClockConfig+0x1f0>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	490b      	ldr	r1, [pc, #44]	@ (8001cc0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9c:	4a09      	ldr	r2, [pc, #36]	@ (8001cc4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_ClockConfig+0x1fc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7fe ffa1 	bl	8000bec <HAL_InitTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cae:	7afb      	ldrb	r3, [r7, #11]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3710      	adds	r7, #16
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40022000 	.word	0x40022000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	08003ea0 	.word	0x08003ea0
 8001cc4:	20000000 	.word	0x20000000
 8001cc8:	20000004 	.word	0x20000004

08001ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61fb      	str	r3, [r7, #28]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce4:	4b3b      	ldr	r3, [pc, #236]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d005      	beq.n	8001d00 <HAL_RCC_GetSysClockFreq+0x34>
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	2b0c      	cmp	r3, #12
 8001cf8:	d121      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d11e      	bne.n	8001d3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d00:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0308 	and.w	r3, r3, #8
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d0c:	4b31      	ldr	r3, [pc, #196]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	e005      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	091b      	lsrs	r3, r3, #4
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d28:	4a2b      	ldr	r2, [pc, #172]	@ (8001dd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10d      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d102      	bne.n	8001d4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d44:	4b25      	ldr	r3, [pc, #148]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d46:	61bb      	str	r3, [r7, #24]
 8001d48:	e004      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b08      	cmp	r3, #8
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d50:	4b23      	ldr	r3, [pc, #140]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d134      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d003      	beq.n	8001d72 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2b03      	cmp	r3, #3
 8001d6e:	d003      	beq.n	8001d78 <HAL_RCC_GetSysClockFreq+0xac>
 8001d70:	e005      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d74:	617b      	str	r3, [r7, #20]
      break;
 8001d76:	e005      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d78:	4b19      	ldr	r3, [pc, #100]	@ (8001de0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d7a:	617b      	str	r3, [r7, #20]
      break;
 8001d7c:	e002      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	617b      	str	r3, [r7, #20]
      break;
 8001d82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d84:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	3301      	adds	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	fb03 f202 	mul.w	r2, r3, r2
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	0e5b      	lsrs	r3, r3, #25
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	3301      	adds	r3, #1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	08003eb8 	.word	0x08003eb8
 8001ddc:	00f42400 	.word	0x00f42400
 8001de0:	007a1200 	.word	0x007a1200

08001de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de8:	4b03      	ldr	r3, [pc, #12]	@ (8001df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	20000000 	.word	0x20000000

08001dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e00:	f7ff fff0 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e04:	4602      	mov	r2, r0
 8001e06:	4b06      	ldr	r3, [pc, #24]	@ (8001e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	0a1b      	lsrs	r3, r3, #8
 8001e0c:	f003 0307 	and.w	r3, r3, #7
 8001e10:	4904      	ldr	r1, [pc, #16]	@ (8001e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e12:	5ccb      	ldrb	r3, [r1, r3]
 8001e14:	f003 031f 	and.w	r3, r3, #31
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	08003eb0 	.word	0x08003eb0

08001e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e2c:	f7ff ffda 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001e30:	4602      	mov	r2, r0
 8001e32:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	0adb      	lsrs	r3, r3, #11
 8001e38:	f003 0307 	and.w	r3, r3, #7
 8001e3c:	4904      	ldr	r1, [pc, #16]	@ (8001e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e3e:	5ccb      	ldrb	r3, [r1, r3]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	08003eb0 	.word	0x08003eb0

08001e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e60:	4b2a      	ldr	r3, [pc, #168]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e6c:	f7ff f9b6 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001e70:	6178      	str	r0, [r7, #20]
 8001e72:	e014      	b.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e74:	4b25      	ldr	r3, [pc, #148]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e78:	4a24      	ldr	r2, [pc, #144]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e80:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e8c:	f7ff f9a6 	bl	80011dc <HAL_PWREx_GetVoltageRange>
 8001e90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b1e      	ldr	r3, [pc, #120]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	4a1d      	ldr	r2, [pc, #116]	@ (8001f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea4:	d10b      	bne.n	8001ebe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b80      	cmp	r3, #128	@ 0x80
 8001eaa:	d919      	bls.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2ba0      	cmp	r3, #160	@ 0xa0
 8001eb0:	d902      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	e013      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb8:	2301      	movs	r3, #1
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	e010      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b80      	cmp	r3, #128	@ 0x80
 8001ec2:	d902      	bls.n	8001eca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	e00a      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b80      	cmp	r3, #128	@ 0x80
 8001ece:	d102      	bne.n	8001ed6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	e004      	b.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b70      	cmp	r3, #112	@ 0x70
 8001eda:	d101      	bne.n	8001ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001edc:	2301      	movs	r3, #1
 8001ede:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 0207 	bic.w	r2, r3, #7
 8001ee8:	4909      	ldr	r1, [pc, #36]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ef0:	4b07      	ldr	r3, [pc, #28]	@ (8001f10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d001      	beq.n	8001f02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e000      	b.n	8001f04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40022000 	.word	0x40022000

08001f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f20:	2300      	movs	r3, #0
 8001f22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d031      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f38:	d01a      	beq.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f3e:	d814      	bhi.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f48:	d10f      	bne.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4a5c      	ldr	r2, [pc, #368]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f54:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f56:	e00c      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3304      	adds	r3, #4
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f000 f9de 	bl	8002320 <RCCEx_PLLSAI1_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f68:	e003      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8001f6e:	e000      	b.n	8001f72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f72:	7cfb      	ldrb	r3, [r7, #19]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10b      	bne.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f78:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f7e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f86:	494e      	ldr	r1, [pc, #312]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f8e:	e001      	b.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f90:	7cfb      	ldrb	r3, [r7, #19]
 8001f92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 809e 	beq.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fa6:	4b46      	ldr	r3, [pc, #280]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e000      	b.n	8001fb8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00d      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbc:	4b40      	ldr	r3, [pc, #256]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc0:	4a3f      	ldr	r2, [pc, #252]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd8:	4b3a      	ldr	r3, [pc, #232]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a39      	ldr	r2, [pc, #228]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fe52 	bl	8000c8c <HAL_GetTick>
 8001fe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fea:	e009      	b.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fec:	f7fe fe4e 	bl	8000c8c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d902      	bls.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8001ffe:	e005      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002000:	4b30      	ldr	r3, [pc, #192]	@ (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ef      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800200c:	7cfb      	ldrb	r3, [r7, #19]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d15a      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002012:	4b2b      	ldr	r3, [pc, #172]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002018:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800201c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d01e      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002028:	697a      	ldr	r2, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d019      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800202e:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002038:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800203a:	4b21      	ldr	r3, [pc, #132]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002040:	4a1f      	ldr	r2, [pc, #124]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002042:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800204a:	4b1d      	ldr	r3, [pc, #116]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002056:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800205a:	4a19      	ldr	r2, [pc, #100]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	2b00      	cmp	r3, #0
 800206a:	d016      	beq.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206c:	f7fe fe0e 	bl	8000c8c <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002072:	e00b      	b.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002074:	f7fe fe0a 	bl	8000c8c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d902      	bls.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	74fb      	strb	r3, [r7, #19]
            break;
 800208a:	e006      	b.n	800209a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ec      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800209a:	7cfb      	ldrb	r3, [r7, #19]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d10b      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a0:	4b07      	ldr	r3, [pc, #28]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ae:	4904      	ldr	r1, [pc, #16]	@ (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80020b6:	e009      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	74bb      	strb	r3, [r7, #18]
 80020bc:	e006      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020be:	bf00      	nop
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4b8a      	ldr	r3, [pc, #552]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	4a89      	ldr	r2, [pc, #548]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ea:	4b84      	ldr	r3, [pc, #528]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f0:	f023 0203 	bic.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4980      	ldr	r1, [pc, #512]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210c:	4b7b      	ldr	r3, [pc, #492]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	f023 020c 	bic.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	4978      	ldr	r1, [pc, #480]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800212e:	4b73      	ldr	r3, [pc, #460]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002134:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	496f      	ldr	r1, [pc, #444]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002156:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800215e:	4967      	ldr	r1, [pc, #412]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002172:	4b62      	ldr	r3, [pc, #392]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002178:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002180:	495e      	ldr	r1, [pc, #376]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002194:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a2:	4956      	ldr	r1, [pc, #344]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021b6:	4b51      	ldr	r3, [pc, #324]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	494d      	ldr	r1, [pc, #308]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d028      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021d8:	4b48      	ldr	r3, [pc, #288]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e6:	4945      	ldr	r1, [pc, #276]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021f6:	d106      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021f8:	4b40      	ldr	r3, [pc, #256]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	4a3f      	ldr	r2, [pc, #252]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002202:	60d3      	str	r3, [r2, #12]
 8002204:	e011      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800220e:	d10c      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3304      	adds	r3, #4
 8002214:	2101      	movs	r1, #1
 8002216:	4618      	mov	r0, r3
 8002218:	f000 f882 	bl	8002320 <RCCEx_PLLSAI1_Config>
 800221c:	4603      	mov	r3, r0
 800221e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002226:	7cfb      	ldrb	r3, [r7, #19]
 8002228:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d028      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002236:	4b31      	ldr	r3, [pc, #196]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800223c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	492d      	ldr	r1, [pc, #180]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002250:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002254:	d106      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002256:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	4a28      	ldr	r2, [pc, #160]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002260:	60d3      	str	r3, [r2, #12]
 8002262:	e011      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002268:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800226c:	d10c      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	2101      	movs	r1, #1
 8002274:	4618      	mov	r0, r3
 8002276:	f000 f853 	bl	8002320 <RCCEx_PLLSAI1_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800227e:	7cfb      	ldrb	r3, [r7, #19]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01c      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800229a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a2:	4916      	ldr	r1, [pc, #88]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022b2:	d10c      	bne.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3304      	adds	r3, #4
 80022b8:	2102      	movs	r1, #2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f000 f830 	bl	8002320 <RCCEx_PLLSAI1_Config>
 80022c0:	4603      	mov	r3, r0
 80022c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022c4:	7cfb      	ldrb	r3, [r7, #19]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022da:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e8:	4904      	ldr	r1, [pc, #16]	@ (80022fc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3718      	adds	r7, #24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a04      	ldr	r2, [pc, #16]	@ (800231c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6013      	str	r3, [r2, #0]
}
 8002310:	bf00      	nop
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000

08002320 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800232e:	4b74      	ldr	r3, [pc, #464]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	f003 0303 	and.w	r3, r3, #3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d018      	beq.n	800236c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800233a:	4b71      	ldr	r3, [pc, #452]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0203 	and.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d10d      	bne.n	8002366 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
       ||
 800234e:	2b00      	cmp	r3, #0
 8002350:	d009      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002352:	4b6b      	ldr	r3, [pc, #428]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	1c5a      	adds	r2, r3, #1
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
       ||
 8002362:	429a      	cmp	r2, r3
 8002364:	d047      	beq.n	80023f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	e044      	b.n	80023f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b03      	cmp	r3, #3
 8002372:	d018      	beq.n	80023a6 <RCCEx_PLLSAI1_Config+0x86>
 8002374:	2b03      	cmp	r3, #3
 8002376:	d825      	bhi.n	80023c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002378:	2b01      	cmp	r3, #1
 800237a:	d002      	beq.n	8002382 <RCCEx_PLLSAI1_Config+0x62>
 800237c:	2b02      	cmp	r3, #2
 800237e:	d009      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x74>
 8002380:	e020      	b.n	80023c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002382:	4b5f      	ldr	r3, [pc, #380]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d11d      	bne.n	80023ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002392:	e01a      	b.n	80023ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002394:	4b5a      	ldr	r3, [pc, #360]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239c:	2b00      	cmp	r3, #0
 800239e:	d116      	bne.n	80023ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e013      	b.n	80023ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023a6:	4b56      	ldr	r3, [pc, #344]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10f      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023b2:	4b53      	ldr	r3, [pc, #332]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023c2:	e006      	b.n	80023d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	73fb      	strb	r3, [r7, #15]
      break;
 80023c8:	e004      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ca:	bf00      	nop
 80023cc:	e002      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ce:	bf00      	nop
 80023d0:	e000      	b.n	80023d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80023d4:	7bfb      	ldrb	r3, [r7, #15]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10d      	bne.n	80023f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023da:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	430b      	orrs	r3, r1
 80023f0:	4943      	ldr	r1, [pc, #268]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023f6:	7bfb      	ldrb	r3, [r7, #15]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d17c      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023fc:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a3f      	ldr	r2, [pc, #252]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002402:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002406:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002408:	f7fe fc40 	bl	8000c8c <HAL_GetTick>
 800240c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800240e:	e009      	b.n	8002424 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002410:	f7fe fc3c 	bl	8000c8c <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d902      	bls.n	8002424 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	73fb      	strb	r3, [r7, #15]
        break;
 8002422:	e005      	b.n	8002430 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002424:	4b36      	ldr	r3, [pc, #216]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1ef      	bne.n	8002410 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d15f      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d110      	bne.n	800245e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800243c:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8002444:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6892      	ldr	r2, [r2, #8]
 800244c:	0211      	lsls	r1, r2, #8
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68d2      	ldr	r2, [r2, #12]
 8002452:	06d2      	lsls	r2, r2, #27
 8002454:	430a      	orrs	r2, r1
 8002456:	492a      	ldr	r1, [pc, #168]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002458:	4313      	orrs	r3, r2
 800245a:	610b      	str	r3, [r1, #16]
 800245c:	e027      	b.n	80024ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d112      	bne.n	800248a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002464:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800246c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6892      	ldr	r2, [r2, #8]
 8002474:	0211      	lsls	r1, r2, #8
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6912      	ldr	r2, [r2, #16]
 800247a:	0852      	lsrs	r2, r2, #1
 800247c:	3a01      	subs	r2, #1
 800247e:	0552      	lsls	r2, r2, #21
 8002480:	430a      	orrs	r2, r1
 8002482:	491f      	ldr	r1, [pc, #124]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002484:	4313      	orrs	r3, r2
 8002486:	610b      	str	r3, [r1, #16]
 8002488:	e011      	b.n	80024ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800248a:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002492:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6892      	ldr	r2, [r2, #8]
 800249a:	0211      	lsls	r1, r2, #8
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6952      	ldr	r2, [r2, #20]
 80024a0:	0852      	lsrs	r2, r2, #1
 80024a2:	3a01      	subs	r2, #1
 80024a4:	0652      	lsls	r2, r2, #25
 80024a6:	430a      	orrs	r2, r1
 80024a8:	4915      	ldr	r1, [pc, #84]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024ae:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a13      	ldr	r2, [pc, #76]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80024b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ba:	f7fe fbe7 	bl	8000c8c <HAL_GetTick>
 80024be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024c0:	e009      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c2:	f7fe fbe3 	bl	8000c8c <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d902      	bls.n	80024d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	73fb      	strb	r3, [r7, #15]
          break;
 80024d4:	e005      	b.n	80024e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0ef      	beq.n	80024c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d106      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024e8:	4b05      	ldr	r3, [pc, #20]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	4903      	ldr	r1, [pc, #12]	@ (8002500 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40021000 	.word	0x40021000

08002504 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e049      	b.n	80025aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d106      	bne.n	8002530 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7fe fa18 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3304      	adds	r3, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4610      	mov	r0, r2
 8002544:	f000 fb52 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e049      	b.n	8002658 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d106      	bne.n	80025de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f841 	bl	8002660 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4610      	mov	r0, r2
 80025f2:	f000 fafb 	bl	8002bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2201      	movs	r2, #1
 8002652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_TIM_PWM_Start+0x24>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2b01      	cmp	r3, #1
 800268e:	bf14      	ite	ne
 8002690:	2301      	movne	r3, #1
 8002692:	2300      	moveq	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e03c      	b.n	8002712 <HAL_TIM_PWM_Start+0x9e>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d109      	bne.n	80026b2 <HAL_TIM_PWM_Start+0x3e>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	bf14      	ite	ne
 80026aa:	2301      	movne	r3, #1
 80026ac:	2300      	moveq	r3, #0
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	e02f      	b.n	8002712 <HAL_TIM_PWM_Start+0x9e>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d109      	bne.n	80026cc <HAL_TIM_PWM_Start+0x58>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	e022      	b.n	8002712 <HAL_TIM_PWM_Start+0x9e>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d109      	bne.n	80026e6 <HAL_TIM_PWM_Start+0x72>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	bf14      	ite	ne
 80026de:	2301      	movne	r3, #1
 80026e0:	2300      	moveq	r3, #0
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	e015      	b.n	8002712 <HAL_TIM_PWM_Start+0x9e>
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d109      	bne.n	8002700 <HAL_TIM_PWM_Start+0x8c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	bf14      	ite	ne
 80026f8:	2301      	movne	r3, #1
 80026fa:	2300      	moveq	r3, #0
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	e008      	b.n	8002712 <HAL_TIM_PWM_Start+0x9e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b01      	cmp	r3, #1
 800270a:	bf14      	ite	ne
 800270c:	2301      	movne	r3, #1
 800270e:	2300      	moveq	r3, #0
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e07e      	b.n	8002818 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_TIM_PWM_Start+0xb6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002728:	e023      	b.n	8002772 <HAL_TIM_PWM_Start+0xfe>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d104      	bne.n	800273a <HAL_TIM_PWM_Start+0xc6>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2202      	movs	r2, #2
 8002734:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002738:	e01b      	b.n	8002772 <HAL_TIM_PWM_Start+0xfe>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d104      	bne.n	800274a <HAL_TIM_PWM_Start+0xd6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002748:	e013      	b.n	8002772 <HAL_TIM_PWM_Start+0xfe>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	2b0c      	cmp	r3, #12
 800274e:	d104      	bne.n	800275a <HAL_TIM_PWM_Start+0xe6>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002758:	e00b      	b.n	8002772 <HAL_TIM_PWM_Start+0xfe>
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	2b10      	cmp	r3, #16
 800275e:	d104      	bne.n	800276a <HAL_TIM_PWM_Start+0xf6>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2202      	movs	r2, #2
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002768:	e003      	b.n	8002772 <HAL_TIM_PWM_Start+0xfe>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2202      	movs	r2, #2
 800276e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2201      	movs	r2, #1
 8002778:	6839      	ldr	r1, [r7, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 fdbe 	bl	80032fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a26      	ldr	r2, [pc, #152]	@ (8002820 <HAL_TIM_PWM_Start+0x1ac>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d009      	beq.n	800279e <HAL_TIM_PWM_Start+0x12a>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_TIM_PWM_Start+0x1b0>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIM_PWM_Start+0x12a>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a23      	ldr	r2, [pc, #140]	@ (8002828 <HAL_TIM_PWM_Start+0x1b4>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d101      	bne.n	80027a2 <HAL_TIM_PWM_Start+0x12e>
 800279e:	2301      	movs	r3, #1
 80027a0:	e000      	b.n	80027a4 <HAL_TIM_PWM_Start+0x130>
 80027a2:	2300      	movs	r3, #0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d007      	beq.n	80027b8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	@ (8002820 <HAL_TIM_PWM_Start+0x1ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d009      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x162>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ca:	d004      	beq.n	80027d6 <HAL_TIM_PWM_Start+0x162>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a14      	ldr	r2, [pc, #80]	@ (8002824 <HAL_TIM_PWM_Start+0x1b0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d115      	bne.n	8002802 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_TIM_PWM_Start+0x1b8>)
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b06      	cmp	r3, #6
 80027e6:	d015      	beq.n	8002814 <HAL_TIM_PWM_Start+0x1a0>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ee:	d011      	beq.n	8002814 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 0201 	orr.w	r2, r2, #1
 80027fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002800:	e008      	b.n	8002814 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0201 	orr.w	r2, r2, #1
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	e000      	b.n	8002816 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002814:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40012c00 	.word	0x40012c00
 8002824:	40014000 	.word	0x40014000
 8002828:	40014400 	.word	0x40014400
 800282c:	00010007 	.word	0x00010007

08002830 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800284a:	2302      	movs	r3, #2
 800284c:	e0ff      	b.n	8002a4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b14      	cmp	r3, #20
 800285a:	f200 80f0 	bhi.w	8002a3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800285e:	a201      	add	r2, pc, #4	@ (adr r2, 8002864 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002864:	080028b9 	.word	0x080028b9
 8002868:	08002a3f 	.word	0x08002a3f
 800286c:	08002a3f 	.word	0x08002a3f
 8002870:	08002a3f 	.word	0x08002a3f
 8002874:	080028f9 	.word	0x080028f9
 8002878:	08002a3f 	.word	0x08002a3f
 800287c:	08002a3f 	.word	0x08002a3f
 8002880:	08002a3f 	.word	0x08002a3f
 8002884:	0800293b 	.word	0x0800293b
 8002888:	08002a3f 	.word	0x08002a3f
 800288c:	08002a3f 	.word	0x08002a3f
 8002890:	08002a3f 	.word	0x08002a3f
 8002894:	0800297b 	.word	0x0800297b
 8002898:	08002a3f 	.word	0x08002a3f
 800289c:	08002a3f 	.word	0x08002a3f
 80028a0:	08002a3f 	.word	0x08002a3f
 80028a4:	080029bd 	.word	0x080029bd
 80028a8:	08002a3f 	.word	0x08002a3f
 80028ac:	08002a3f 	.word	0x08002a3f
 80028b0:	08002a3f 	.word	0x08002a3f
 80028b4:	080029fd 	.word	0x080029fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68b9      	ldr	r1, [r7, #8]
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 fa04 	bl	8002ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0208 	orr.w	r2, r2, #8
 80028d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6999      	ldr	r1, [r3, #24]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	619a      	str	r2, [r3, #24]
      break;
 80028f6:	e0a5      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68b9      	ldr	r1, [r7, #8]
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fa60 	bl	8002dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6999      	ldr	r1, [r3, #24]
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	021a      	lsls	r2, r3, #8
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
      break;
 8002938:	e084      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fab9 	bl	8002eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	69da      	ldr	r2, [r3, #28]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0208 	orr.w	r2, r2, #8
 8002954:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69da      	ldr	r2, [r3, #28]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0204 	bic.w	r2, r2, #4
 8002964:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	691a      	ldr	r2, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	61da      	str	r2, [r3, #28]
      break;
 8002978:	e064      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68b9      	ldr	r1, [r7, #8]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 fb11 	bl	8002fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	69da      	ldr	r2, [r3, #28]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69da      	ldr	r2, [r3, #28]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69d9      	ldr	r1, [r3, #28]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	021a      	lsls	r2, r3, #8
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	61da      	str	r2, [r3, #28]
      break;
 80029ba:	e043      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fb4e 	bl	8003064 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f042 0208 	orr.w	r2, r2, #8
 80029d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80029fa:	e023      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fb86 	bl	8003114 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a16:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a26:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	021a      	lsls	r2, r3, #8
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002a3c:	e002      	b.n	8002a44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	75fb      	strb	r3, [r7, #23]
      break;
 8002a42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop

08002a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIM_ConfigClockSource+0x1c>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e0b6      	b.n	8002be2 <HAL_TIM_ConfigClockSource+0x18a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a92:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a9e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68ba      	ldr	r2, [r7, #8]
 8002aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ab0:	d03e      	beq.n	8002b30 <HAL_TIM_ConfigClockSource+0xd8>
 8002ab2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ab6:	f200 8087 	bhi.w	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002aba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002abe:	f000 8086 	beq.w	8002bce <HAL_TIM_ConfigClockSource+0x176>
 8002ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ac6:	d87f      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ac8:	2b70      	cmp	r3, #112	@ 0x70
 8002aca:	d01a      	beq.n	8002b02 <HAL_TIM_ConfigClockSource+0xaa>
 8002acc:	2b70      	cmp	r3, #112	@ 0x70
 8002ace:	d87b      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ad0:	2b60      	cmp	r3, #96	@ 0x60
 8002ad2:	d050      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x11e>
 8002ad4:	2b60      	cmp	r3, #96	@ 0x60
 8002ad6:	d877      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ad8:	2b50      	cmp	r3, #80	@ 0x50
 8002ada:	d03c      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0xfe>
 8002adc:	2b50      	cmp	r3, #80	@ 0x50
 8002ade:	d873      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ae0:	2b40      	cmp	r3, #64	@ 0x40
 8002ae2:	d058      	beq.n	8002b96 <HAL_TIM_ConfigClockSource+0x13e>
 8002ae4:	2b40      	cmp	r3, #64	@ 0x40
 8002ae6:	d86f      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002ae8:	2b30      	cmp	r3, #48	@ 0x30
 8002aea:	d064      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002aec:	2b30      	cmp	r3, #48	@ 0x30
 8002aee:	d86b      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002af0:	2b20      	cmp	r3, #32
 8002af2:	d060      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d867      	bhi.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d05c      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d05a      	beq.n	8002bb6 <HAL_TIM_ConfigClockSource+0x15e>
 8002b00:	e062      	b.n	8002bc8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	f000 fbd3 	bl	80032bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002b24:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	609a      	str	r2, [r3, #8]
      break;
 8002b2e:	e04f      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	f000 fbbc 	bl	80032bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689a      	ldr	r2, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b52:	609a      	str	r2, [r3, #8]
      break;
 8002b54:	e03c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 fb30 	bl	80031c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2150      	movs	r1, #80	@ 0x50
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 fb89 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e02c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b82:	461a      	mov	r2, r3
 8002b84:	f000 fb4f 	bl	8003226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2160      	movs	r1, #96	@ 0x60
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fb79 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002b94:	e01c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	f000 fb10 	bl	80031c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2140      	movs	r1, #64	@ 0x40
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fb69 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002bb4:	e00c      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	f000 fb60 	bl	8003286 <TIM_ITRx_SetConfig>
      break;
 8002bc6:	e003      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      break;
 8002bcc:	e000      	b.n	8002bd0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002bce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a30      	ldr	r2, [pc, #192]	@ (8002cc0 <TIM_Base_SetConfig+0xd4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d003      	beq.n	8002c0c <TIM_Base_SetConfig+0x20>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c0a:	d108      	bne.n	8002c1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a27      	ldr	r2, [pc, #156]	@ (8002cc0 <TIM_Base_SetConfig+0xd4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <TIM_Base_SetConfig+0x52>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c2c:	d007      	beq.n	8002c3e <TIM_Base_SetConfig+0x52>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a24      	ldr	r2, [pc, #144]	@ (8002cc4 <TIM_Base_SetConfig+0xd8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <TIM_Base_SetConfig+0x52>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a23      	ldr	r2, [pc, #140]	@ (8002cc8 <TIM_Base_SetConfig+0xdc>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d108      	bne.n	8002c50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a12      	ldr	r2, [pc, #72]	@ (8002cc0 <TIM_Base_SetConfig+0xd4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d007      	beq.n	8002c8c <TIM_Base_SetConfig+0xa0>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a11      	ldr	r2, [pc, #68]	@ (8002cc4 <TIM_Base_SetConfig+0xd8>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d003      	beq.n	8002c8c <TIM_Base_SetConfig+0xa0>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	4a10      	ldr	r2, [pc, #64]	@ (8002cc8 <TIM_Base_SetConfig+0xdc>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d103      	bne.n	8002c94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f023 0201 	bic.w	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	611a      	str	r2, [r3, #16]
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40014000 	.word	0x40014000
 8002cc8:	40014400 	.word	0x40014400

08002ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b087      	sub	sp, #28
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	f023 0201 	bic.w	r2, r3, #1
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0303 	bic.w	r3, r3, #3
 8002d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f023 0302 	bic.w	r3, r3, #2
 8002d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a24      	ldr	r2, [pc, #144]	@ (8002db8 <TIM_OC1_SetConfig+0xec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d007      	beq.n	8002d3c <TIM_OC1_SetConfig+0x70>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <TIM_OC1_SetConfig+0xf0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_OC1_SetConfig+0x70>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <TIM_OC1_SetConfig+0xf4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d10c      	bne.n	8002d56 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	f023 0308 	bic.w	r3, r3, #8
 8002d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a17      	ldr	r2, [pc, #92]	@ (8002db8 <TIM_OC1_SetConfig+0xec>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <TIM_OC1_SetConfig+0xa2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a16      	ldr	r2, [pc, #88]	@ (8002dbc <TIM_OC1_SetConfig+0xf0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d003      	beq.n	8002d6e <TIM_OC1_SetConfig+0xa2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a15      	ldr	r2, [pc, #84]	@ (8002dc0 <TIM_OC1_SetConfig+0xf4>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d111      	bne.n	8002d92 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	621a      	str	r2, [r3, #32]
}
 8002dac:	bf00      	nop
 8002dae:	371c      	adds	r7, #28
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40012c00 	.word	0x40012c00
 8002dbc:	40014000 	.word	0x40014000
 8002dc0:	40014400 	.word	0x40014400

08002dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b087      	sub	sp, #28
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a1b      	ldr	r3, [r3, #32]
 8002dd8:	f023 0210 	bic.w	r2, r3, #16
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f023 0320 	bic.w	r3, r3, #32
 8002e12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <TIM_OC2_SetConfig+0xe8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d10d      	bne.n	8002e44 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <TIM_OC2_SetConfig+0xe8>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d007      	beq.n	8002e5c <TIM_OC2_SetConfig+0x98>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	4a18      	ldr	r2, [pc, #96]	@ (8002eb0 <TIM_OC2_SetConfig+0xec>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d003      	beq.n	8002e5c <TIM_OC2_SetConfig+0x98>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a17      	ldr	r2, [pc, #92]	@ (8002eb4 <TIM_OC2_SetConfig+0xf0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d113      	bne.n	8002e84 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400

08002eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b087      	sub	sp, #28
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0303 	bic.w	r3, r3, #3
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	021b      	lsls	r3, r3, #8
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a21      	ldr	r2, [pc, #132]	@ (8002f9c <TIM_OC3_SetConfig+0xe4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d10d      	bne.n	8002f36 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	021b      	lsls	r3, r3, #8
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a18      	ldr	r2, [pc, #96]	@ (8002f9c <TIM_OC3_SetConfig+0xe4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d007      	beq.n	8002f4e <TIM_OC3_SetConfig+0x96>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a17      	ldr	r2, [pc, #92]	@ (8002fa0 <TIM_OC3_SetConfig+0xe8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d003      	beq.n	8002f4e <TIM_OC3_SetConfig+0x96>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a16      	ldr	r2, [pc, #88]	@ (8002fa4 <TIM_OC3_SetConfig+0xec>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d113      	bne.n	8002f76 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	621a      	str	r2, [r3, #32]
}
 8002f90:	bf00      	nop
 8002f92:	371c      	adds	r7, #28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40012c00 	.word	0x40012c00
 8002fa0:	40014000 	.word	0x40014000
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	021b      	lsls	r3, r3, #8
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	031b      	lsls	r3, r3, #12
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a14      	ldr	r2, [pc, #80]	@ (8003058 <TIM_OC4_SetConfig+0xb0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <TIM_OC4_SetConfig+0x74>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a13      	ldr	r2, [pc, #76]	@ (800305c <TIM_OC4_SetConfig+0xb4>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d003      	beq.n	800301c <TIM_OC4_SetConfig+0x74>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a12      	ldr	r2, [pc, #72]	@ (8003060 <TIM_OC4_SetConfig+0xb8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d109      	bne.n	8003030 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	019b      	lsls	r3, r3, #6
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	621a      	str	r2, [r3, #32]
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40012c00 	.word	0x40012c00
 800305c:	40014000 	.word	0x40014000
 8003060:	40014400 	.word	0x40014400

08003064 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80030a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	041b      	lsls	r3, r3, #16
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a13      	ldr	r2, [pc, #76]	@ (8003108 <TIM_OC5_SetConfig+0xa4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_OC5_SetConfig+0x6a>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a12      	ldr	r2, [pc, #72]	@ (800310c <TIM_OC5_SetConfig+0xa8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_OC5_SetConfig+0x6a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a11      	ldr	r2, [pc, #68]	@ (8003110 <TIM_OC5_SetConfig+0xac>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d109      	bne.n	80030e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40014000 	.word	0x40014000
 8003110:	40014400 	.word	0x40014400

08003114 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800315a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	051b      	lsls	r3, r3, #20
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a14      	ldr	r2, [pc, #80]	@ (80031bc <TIM_OC6_SetConfig+0xa8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d007      	beq.n	8003180 <TIM_OC6_SetConfig+0x6c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a13      	ldr	r2, [pc, #76]	@ (80031c0 <TIM_OC6_SetConfig+0xac>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_OC6_SetConfig+0x6c>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <TIM_OC6_SetConfig+0xb0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d109      	bne.n	8003194 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	029b      	lsls	r3, r3, #10
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	621a      	str	r2, [r3, #32]
}
 80031ae:	bf00      	nop
 80031b0:	371c      	adds	r7, #28
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40014000 	.word	0x40014000
 80031c4:	40014400 	.word	0x40014400

080031c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1b      	ldr	r3, [r3, #32]
 80031d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	f023 0201 	bic.w	r2, r3, #1
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f023 030a 	bic.w	r3, r3, #10
 8003204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	621a      	str	r2, [r3, #32]
}
 800321a:	bf00      	nop
 800321c:	371c      	adds	r7, #28
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003226:	b480      	push	{r7}
 8003228:	b087      	sub	sp, #28
 800322a:	af00      	add	r7, sp, #0
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	60b9      	str	r1, [r7, #8]
 8003230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f023 0210 	bic.w	r2, r3, #16
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003250:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	031b      	lsls	r3, r3, #12
 8003256:	693a      	ldr	r2, [r7, #16]
 8003258:	4313      	orrs	r3, r2
 800325a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003262:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	621a      	str	r2, [r3, #32]
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f043 0307 	orr.w	r3, r3, #7
 80032a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	609a      	str	r2, [r3, #8]
}
 80032b0:	bf00      	nop
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
 80032c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	021a      	lsls	r2, r3, #8
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	431a      	orrs	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	609a      	str	r2, [r3, #8]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	2201      	movs	r2, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a1a      	ldr	r2, [r3, #32]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	43db      	mvns	r3, r3
 800331e:	401a      	ands	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1a      	ldr	r2, [r3, #32]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 031f 	and.w	r3, r3, #31
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800335c:	2302      	movs	r3, #2
 800335e:	e04f      	b.n	8003400 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2201      	movs	r2, #1
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a21      	ldr	r2, [pc, #132]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d108      	bne.n	800339c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	4313      	orrs	r3, r2
 800339a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a14      	ldr	r2, [pc, #80]	@ (800340c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c8:	d004      	beq.n	80033d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a10      	ldr	r2, [pc, #64]	@ (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10c      	bne.n	80033ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2201      	movs	r2, #1
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003428:	2b01      	cmp	r3, #1
 800342a:	d101      	bne.n	8003430 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800342c:	2302      	movs	r3, #2
 800342e:	e060      	b.n	80034f2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4313      	orrs	r3, r2
 8003460:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	041b      	lsls	r3, r3, #16
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a14      	ldr	r2, [pc, #80]	@ (8003500 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d115      	bne.n	80034e0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034be:	051b      	lsls	r3, r3, #20
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	4313      	orrs	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40012c00 	.word	0x40012c00

08003504 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e040      	b.n	8003598 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fa72 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2224      	movs	r2, #36	@ 0x24
 8003530:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa54 	bl	80039f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f825 	bl	80035a0 <UART_SetConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e01b      	b.n	8003598 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800356e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800357e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0201 	orr.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fad3 	bl	8003b3c <UART_CheckIdleState>
 8003596:	4603      	mov	r3, r0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3708      	adds	r7, #8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a4:	b08a      	sub	sp, #40	@ 0x28
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	431a      	orrs	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4bb4      	ldr	r3, [pc, #720]	@ (80038a0 <UART_SetConfig+0x300>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	6812      	ldr	r2, [r2, #0]
 80035d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035d8:	430b      	orrs	r3, r1
 80035da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	68da      	ldr	r2, [r3, #12]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4aa9      	ldr	r2, [pc, #676]	@ (80038a4 <UART_SetConfig+0x304>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003608:	4313      	orrs	r3, r2
 800360a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4aa0      	ldr	r2, [pc, #640]	@ (80038a8 <UART_SetConfig+0x308>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d126      	bne.n	8003678 <UART_SetConfig+0xd8>
 800362a:	4ba0      	ldr	r3, [pc, #640]	@ (80038ac <UART_SetConfig+0x30c>)
 800362c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	2b03      	cmp	r3, #3
 8003636:	d81b      	bhi.n	8003670 <UART_SetConfig+0xd0>
 8003638:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <UART_SetConfig+0xa0>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	08003659 	.word	0x08003659
 800364c:	08003669 	.word	0x08003669
 8003650:	2301      	movs	r3, #1
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003656:	e080      	b.n	800375a <UART_SetConfig+0x1ba>
 8003658:	2302      	movs	r3, #2
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800365e:	e07c      	b.n	800375a <UART_SetConfig+0x1ba>
 8003660:	2304      	movs	r3, #4
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003666:	e078      	b.n	800375a <UART_SetConfig+0x1ba>
 8003668:	2308      	movs	r3, #8
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800366e:	e074      	b.n	800375a <UART_SetConfig+0x1ba>
 8003670:	2310      	movs	r3, #16
 8003672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003676:	e070      	b.n	800375a <UART_SetConfig+0x1ba>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a8c      	ldr	r2, [pc, #560]	@ (80038b0 <UART_SetConfig+0x310>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d138      	bne.n	80036f4 <UART_SetConfig+0x154>
 8003682:	4b8a      	ldr	r3, [pc, #552]	@ (80038ac <UART_SetConfig+0x30c>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003688:	f003 030c 	and.w	r3, r3, #12
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d82d      	bhi.n	80036ec <UART_SetConfig+0x14c>
 8003690:	a201      	add	r2, pc, #4	@ (adr r2, 8003698 <UART_SetConfig+0xf8>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036cd 	.word	0x080036cd
 800369c:	080036ed 	.word	0x080036ed
 80036a0:	080036ed 	.word	0x080036ed
 80036a4:	080036ed 	.word	0x080036ed
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080036ed 	.word	0x080036ed
 80036b0:	080036ed 	.word	0x080036ed
 80036b4:	080036ed 	.word	0x080036ed
 80036b8:	080036d5 	.word	0x080036d5
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036e5 	.word	0x080036e5
 80036cc:	2300      	movs	r3, #0
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036d2:	e042      	b.n	800375a <UART_SetConfig+0x1ba>
 80036d4:	2302      	movs	r3, #2
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036da:	e03e      	b.n	800375a <UART_SetConfig+0x1ba>
 80036dc:	2304      	movs	r3, #4
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036e2:	e03a      	b.n	800375a <UART_SetConfig+0x1ba>
 80036e4:	2308      	movs	r3, #8
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036ea:	e036      	b.n	800375a <UART_SetConfig+0x1ba>
 80036ec:	2310      	movs	r3, #16
 80036ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80036f2:	e032      	b.n	800375a <UART_SetConfig+0x1ba>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a6a      	ldr	r2, [pc, #424]	@ (80038a4 <UART_SetConfig+0x304>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d12a      	bne.n	8003754 <UART_SetConfig+0x1b4>
 80036fe:	4b6b      	ldr	r3, [pc, #428]	@ (80038ac <UART_SetConfig+0x30c>)
 8003700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003704:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003708:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800370c:	d01a      	beq.n	8003744 <UART_SetConfig+0x1a4>
 800370e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003712:	d81b      	bhi.n	800374c <UART_SetConfig+0x1ac>
 8003714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003718:	d00c      	beq.n	8003734 <UART_SetConfig+0x194>
 800371a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800371e:	d815      	bhi.n	800374c <UART_SetConfig+0x1ac>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <UART_SetConfig+0x18c>
 8003724:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003728:	d008      	beq.n	800373c <UART_SetConfig+0x19c>
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x1ac>
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003732:	e012      	b.n	800375a <UART_SetConfig+0x1ba>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800373a:	e00e      	b.n	800375a <UART_SetConfig+0x1ba>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003742:	e00a      	b.n	800375a <UART_SetConfig+0x1ba>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800374a:	e006      	b.n	800375a <UART_SetConfig+0x1ba>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003752:	e002      	b.n	800375a <UART_SetConfig+0x1ba>
 8003754:	2310      	movs	r3, #16
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a51      	ldr	r2, [pc, #324]	@ (80038a4 <UART_SetConfig+0x304>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d17a      	bne.n	800385a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003764:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003768:	2b08      	cmp	r3, #8
 800376a:	d824      	bhi.n	80037b6 <UART_SetConfig+0x216>
 800376c:	a201      	add	r2, pc, #4	@ (adr r2, 8003774 <UART_SetConfig+0x1d4>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003799 	.word	0x08003799
 8003778:	080037b7 	.word	0x080037b7
 800377c:	080037a1 	.word	0x080037a1
 8003780:	080037b7 	.word	0x080037b7
 8003784:	080037a7 	.word	0x080037a7
 8003788:	080037b7 	.word	0x080037b7
 800378c:	080037b7 	.word	0x080037b7
 8003790:	080037b7 	.word	0x080037b7
 8003794:	080037af 	.word	0x080037af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003798:	f7fe fb30 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 800379c:	61f8      	str	r0, [r7, #28]
        break;
 800379e:	e010      	b.n	80037c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037a0:	4b44      	ldr	r3, [pc, #272]	@ (80038b4 <UART_SetConfig+0x314>)
 80037a2:	61fb      	str	r3, [r7, #28]
        break;
 80037a4:	e00d      	b.n	80037c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe fa91 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80037aa:	61f8      	str	r0, [r7, #28]
        break;
 80037ac:	e009      	b.n	80037c2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037b2:	61fb      	str	r3, [r7, #28]
        break;
 80037b4:	e005      	b.n	80037c2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80037c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8107 	beq.w	80039d8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d305      	bcc.n	80037e6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d903      	bls.n	80037ee <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80037ec:	e0f4      	b.n	80039d8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	2200      	movs	r2, #0
 80037f2:	461c      	mov	r4, r3
 80037f4:	4615      	mov	r5, r2
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	022b      	lsls	r3, r5, #8
 8003800:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003804:	0222      	lsls	r2, r4, #8
 8003806:	68f9      	ldr	r1, [r7, #12]
 8003808:	6849      	ldr	r1, [r1, #4]
 800380a:	0849      	lsrs	r1, r1, #1
 800380c:	2000      	movs	r0, #0
 800380e:	4688      	mov	r8, r1
 8003810:	4681      	mov	r9, r0
 8003812:	eb12 0a08 	adds.w	sl, r2, r8
 8003816:	eb43 0b09 	adc.w	fp, r3, r9
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003828:	4650      	mov	r0, sl
 800382a:	4659      	mov	r1, fp
 800382c:	f7fc fcce 	bl	80001cc <__aeabi_uldivmod>
 8003830:	4602      	mov	r2, r0
 8003832:	460b      	mov	r3, r1
 8003834:	4613      	mov	r3, r2
 8003836:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800383e:	d308      	bcc.n	8003852 <UART_SetConfig+0x2b2>
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003846:	d204      	bcs.n	8003852 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	60da      	str	r2, [r3, #12]
 8003850:	e0c2      	b.n	80039d8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003858:	e0be      	b.n	80039d8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003862:	d16a      	bne.n	800393a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003864:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003868:	2b08      	cmp	r3, #8
 800386a:	d834      	bhi.n	80038d6 <UART_SetConfig+0x336>
 800386c:	a201      	add	r2, pc, #4	@ (adr r2, 8003874 <UART_SetConfig+0x2d4>)
 800386e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003872:	bf00      	nop
 8003874:	08003899 	.word	0x08003899
 8003878:	080038b9 	.word	0x080038b9
 800387c:	080038c1 	.word	0x080038c1
 8003880:	080038d7 	.word	0x080038d7
 8003884:	080038c7 	.word	0x080038c7
 8003888:	080038d7 	.word	0x080038d7
 800388c:	080038d7 	.word	0x080038d7
 8003890:	080038d7 	.word	0x080038d7
 8003894:	080038cf 	.word	0x080038cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003898:	f7fe fab0 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 800389c:	61f8      	str	r0, [r7, #28]
        break;
 800389e:	e020      	b.n	80038e2 <UART_SetConfig+0x342>
 80038a0:	efff69f3 	.word	0xefff69f3
 80038a4:	40008000 	.word	0x40008000
 80038a8:	40013800 	.word	0x40013800
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40004400 	.word	0x40004400
 80038b4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038b8:	f7fe fab6 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 80038bc:	61f8      	str	r0, [r7, #28]
        break;
 80038be:	e010      	b.n	80038e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c0:	4b4c      	ldr	r3, [pc, #304]	@ (80039f4 <UART_SetConfig+0x454>)
 80038c2:	61fb      	str	r3, [r7, #28]
        break;
 80038c4:	e00d      	b.n	80038e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c6:	f7fe fa01 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 80038ca:	61f8      	str	r0, [r7, #28]
        break;
 80038cc:	e009      	b.n	80038e2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038d2:	61fb      	str	r3, [r7, #28]
        break;
 80038d4:	e005      	b.n	80038e2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80038e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d077      	beq.n	80039d8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	005a      	lsls	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	2b0f      	cmp	r3, #15
 8003902:	d916      	bls.n	8003932 <UART_SetConfig+0x392>
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800390a:	d212      	bcs.n	8003932 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	b29b      	uxth	r3, r3
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	b29b      	uxth	r3, r3
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	b29a      	uxth	r2, r3
 8003922:	8afb      	ldrh	r3, [r7, #22]
 8003924:	4313      	orrs	r3, r2
 8003926:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	8afa      	ldrh	r2, [r7, #22]
 800392e:	60da      	str	r2, [r3, #12]
 8003930:	e052      	b.n	80039d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003938:	e04e      	b.n	80039d8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800393a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800393e:	2b08      	cmp	r3, #8
 8003940:	d827      	bhi.n	8003992 <UART_SetConfig+0x3f2>
 8003942:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <UART_SetConfig+0x3a8>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003975 	.word	0x08003975
 8003950:	0800397d 	.word	0x0800397d
 8003954:	08003993 	.word	0x08003993
 8003958:	08003983 	.word	0x08003983
 800395c:	08003993 	.word	0x08003993
 8003960:	08003993 	.word	0x08003993
 8003964:	08003993 	.word	0x08003993
 8003968:	0800398b 	.word	0x0800398b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800396c:	f7fe fa46 	bl	8001dfc <HAL_RCC_GetPCLK1Freq>
 8003970:	61f8      	str	r0, [r7, #28]
        break;
 8003972:	e014      	b.n	800399e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003974:	f7fe fa58 	bl	8001e28 <HAL_RCC_GetPCLK2Freq>
 8003978:	61f8      	str	r0, [r7, #28]
        break;
 800397a:	e010      	b.n	800399e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800397c:	4b1d      	ldr	r3, [pc, #116]	@ (80039f4 <UART_SetConfig+0x454>)
 800397e:	61fb      	str	r3, [r7, #28]
        break;
 8003980:	e00d      	b.n	800399e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003982:	f7fe f9a3 	bl	8001ccc <HAL_RCC_GetSysClockFreq>
 8003986:	61f8      	str	r0, [r7, #28]
        break;
 8003988:	e009      	b.n	800399e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800398a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800398e:	61fb      	str	r3, [r7, #28]
        break;
 8003990:	e005      	b.n	800399e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800399c:	bf00      	nop
    }

    if (pclk != 0U)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d019      	beq.n	80039d8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	085a      	lsrs	r2, r3, #1
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	441a      	add	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0f      	cmp	r3, #15
 80039bc:	d909      	bls.n	80039d2 <UART_SetConfig+0x432>
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039c4:	d205      	bcs.n	80039d2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e002      	b.n	80039d8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80039e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3728      	adds	r7, #40	@ 0x28
 80039ec:	46bd      	mov	sp, r7
 80039ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f2:	bf00      	nop
 80039f4:	00f42400 	.word	0x00f42400

080039f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	f003 0310 	and.w	r3, r3, #16
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	f003 0320 	and.w	r3, r3, #32
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d01a      	beq.n	8003b0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003af6:	d10a      	bne.n	8003b0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00a      	beq.n	8003b30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	605a      	str	r2, [r3, #4]
  }
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b098      	sub	sp, #96	@ 0x60
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b4c:	f7fd f89e 	bl	8000c8c <HAL_GetTick>
 8003b50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d12e      	bne.n	8003bbe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f88c 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d021      	beq.n	8003bbe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	461a      	mov	r2, r3
 8003b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e6      	bne.n	8003b7a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e062      	b.n	8003c84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d149      	bne.n	8003c60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 f856 	bl	8003c8c <UART_WaitOnFlagUntilTimeout>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d03c      	beq.n	8003c60 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	623b      	str	r3, [r7, #32]
   return(result);
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	461a      	mov	r2, r3
 8003c02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c04:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e6      	bne.n	8003be6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	e853 3f00 	ldrex	r3, [r3]
 8003c26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3308      	adds	r3, #8
 8003c36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c38:	61fa      	str	r2, [r7, #28]
 8003c3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3c:	69b9      	ldr	r1, [r7, #24]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	e841 2300 	strex	r3, r2, [r1]
 8003c44:	617b      	str	r3, [r7, #20]
   return(result);
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d1e5      	bne.n	8003c18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2220      	movs	r2, #32
 8003c50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e011      	b.n	8003c84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3758      	adds	r7, #88	@ 0x58
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	603b      	str	r3, [r7, #0]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c9c:	e04f      	b.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca4:	d04b      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca6:	f7fc fff1 	bl	8000c8c <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e04e      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0304 	and.w	r3, r3, #4
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d037      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b80      	cmp	r3, #128	@ 0x80
 8003cd2:	d034      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b40      	cmp	r3, #64	@ 0x40
 8003cd8:	d031      	beq.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69db      	ldr	r3, [r3, #28]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d110      	bne.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2208      	movs	r2, #8
 8003cee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f838 	bl	8003d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2208      	movs	r2, #8
 8003cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e029      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d18:	d111      	bne.n	8003d3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f81e 	bl	8003d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e00f      	b.n	8003d5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	bf0c      	ite	eq
 8003d4e:	2301      	moveq	r3, #1
 8003d50:	2300      	movne	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	79fb      	ldrb	r3, [r7, #7]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d0a0      	beq.n	8003c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b095      	sub	sp, #84	@ 0x54
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d118      	bne.n	8003e0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	461a      	mov	r2, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	6979      	ldr	r1, [r7, #20]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	e841 2300 	strex	r3, r2, [r1]
 8003e06:	613b      	str	r3, [r7, #16]
   return(result);
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d1e6      	bne.n	8003ddc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2220      	movs	r2, #32
 8003e12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e22:	bf00      	nop
 8003e24:	3754      	adds	r7, #84	@ 0x54
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <memset>:
 8003e2e:	4402      	add	r2, r0
 8003e30:	4603      	mov	r3, r0
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d100      	bne.n	8003e38 <memset+0xa>
 8003e36:	4770      	bx	lr
 8003e38:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3c:	e7f9      	b.n	8003e32 <memset+0x4>
	...

08003e40 <__libc_init_array>:
 8003e40:	b570      	push	{r4, r5, r6, lr}
 8003e42:	4d0d      	ldr	r5, [pc, #52]	@ (8003e78 <__libc_init_array+0x38>)
 8003e44:	4c0d      	ldr	r4, [pc, #52]	@ (8003e7c <__libc_init_array+0x3c>)
 8003e46:	1b64      	subs	r4, r4, r5
 8003e48:	10a4      	asrs	r4, r4, #2
 8003e4a:	2600      	movs	r6, #0
 8003e4c:	42a6      	cmp	r6, r4
 8003e4e:	d109      	bne.n	8003e64 <__libc_init_array+0x24>
 8003e50:	4d0b      	ldr	r5, [pc, #44]	@ (8003e80 <__libc_init_array+0x40>)
 8003e52:	4c0c      	ldr	r4, [pc, #48]	@ (8003e84 <__libc_init_array+0x44>)
 8003e54:	f000 f818 	bl	8003e88 <_init>
 8003e58:	1b64      	subs	r4, r4, r5
 8003e5a:	10a4      	asrs	r4, r4, #2
 8003e5c:	2600      	movs	r6, #0
 8003e5e:	42a6      	cmp	r6, r4
 8003e60:	d105      	bne.n	8003e6e <__libc_init_array+0x2e>
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e68:	4798      	blx	r3
 8003e6a:	3601      	adds	r6, #1
 8003e6c:	e7ee      	b.n	8003e4c <__libc_init_array+0xc>
 8003e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e72:	4798      	blx	r3
 8003e74:	3601      	adds	r6, #1
 8003e76:	e7f2      	b.n	8003e5e <__libc_init_array+0x1e>
 8003e78:	08003ef0 	.word	0x08003ef0
 8003e7c:	08003ef0 	.word	0x08003ef0
 8003e80:	08003ef0 	.word	0x08003ef0
 8003e84:	08003ef4 	.word	0x08003ef4

08003e88 <_init>:
 8003e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8a:	bf00      	nop
 8003e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e8e:	bc08      	pop	{r3}
 8003e90:	469e      	mov	lr, r3
 8003e92:	4770      	bx	lr

08003e94 <_fini>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	bf00      	nop
 8003e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	469e      	mov	lr, r3
 8003e9e:	4770      	bx	lr
